{
  "version": 3,
  "sources": ["../bundle-KstIoW/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../../../../.nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/modules-watch-stub.js", "../../../worker-modules/src/config.js", "../../../worker-modules/src/utils.js", "../../../worker-modules/src/paper-scoring.js", "../../../worker-modules/src/blog-generator.js", "../../../worker-modules/src/templates.js", "../../../worker-modules/src/archive-manager.js", "../../../worker-modules/src/archive-templates.js", "../bundle-KstIoW/middleware-loader.entry.ts", "../bundle-KstIoW/middleware-insertion-facade.js", "../../../worker-modules/functions/worker.js", "../../../worker-modules/src/handlers.js", "../../../worker-modules/src/paper-scraper.js", "../../../worker-modules/src/paper-analyzer.js", "../../../worker-modules/src/dual-column-templates.js", "../../../worker-modules/src/visitor-counter.js", "../../../worker-modules/src/archive-handlers.js", "../../../worker-modules/src/archive-exporter.js", "../../../../../../.nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../.nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../../../../.nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/zhouql1978/dev/paperdog/target/.wrangler/tmp/dev-HF2dGA",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "// Configuration constants for PaperDog Blog\nexport const corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type',\n};\n\n// Custom Error Class\nexport class AppError extends Error {\n  constructor(message, statusCode = 500) {\n    super(message);\n    this.statusCode = statusCode;\n  }\n}\n\n// Route Configuration\nexport const routes = {\n  'GET /': 'handleRoot',\n  'GET /api/papers': 'handlePapersList',\n  'GET /api/papers/:date': 'handlePapersByDate',\n  'GET /api/papers/:id': 'handlePaperById',\n  'POST /api/papers/:id/view': 'handleTrackPaperView',\n  'POST /api/update': 'handleUpdatePapers',\n  'GET /api/categories': 'handleCategories',\n  'GET /api/search': 'handleSearch',\n  'GET /feed': 'handleRSSFeed',\n  'GET /about': 'handleAbout',\n  'GET /api/scoring/:date': 'handleScoringReport',\n  // Archive routes\n  'GET /api/archive/dates': 'handleArchiveDates',\n  'GET /api/archive/:date': 'handleArchiveByDate',\n  'GET /api/archive/range': 'handleArchiveRange',\n  'GET /api/archive/search': 'handleArchiveSearch',\n  'GET /api/archive/statistics': 'handleArchiveStatistics',\n  'GET /api/archive/export': 'handleArchiveExport',\n  'GET /api/archive/export/formats': 'handleExportFormats',\n  'POST /api/archive/create': 'handleCreateArchive',\n  'GET /archive': 'handleArchivePage',\n};\n\n// Paper sources configuration\nexport const PAPER_SOURCES = {\n  arxiv: {\n    baseUrl: 'https://export.arxiv.org/api/query',\n    categories: ['cs.CV', 'cs.AI', 'cs.LG', 'cs.CL', 'cs.RO'],\n    maxResults: 50,\n    sortBy: 'submittedDate',\n    sortOrder: 'descending'\n  },\n  huggingface: {\n    baseUrl: 'https://huggingface.co/api/papers',\n    categories: ['computer-vision', 'natural-language-processing', 'machine-learning'],\n    maxResults: 30\n  }\n};\n\n// Topic categories for AI/ML papers\nexport const TOPIC_CATEGORIES = [\n  'computer_vision',\n  'machine_learning', \n  'natural_language_processing',\n  'reinforcement_learning',\n  'multimodal_learning',\n  'generative_models',\n  'diffusion_models',\n  'transformer_architectures',\n  'optimization',\n  'robotics',\n  'ethics_ai',\n  'datasets'\n];\n\n// Source-specific scraping configurations\nexport const SOURCE_CONFIGS = {\n  arxiv: {\n    maxPapersPerRequest: 15,\n    requestDelay: 1000,\n    retryAttempts: 3,\n    dateRange: 7, // Last 7 days to get more results\n    fields: 'id,title,summary,authors,published,updated,primary_category'\n  },\n  huggingface: {\n    maxPapersPerRequest: 10,\n    requestDelay: 2000,\n    retryAttempts: 3,\n    dateRange: 1,\n    fields: 'title,summary,authors,published,id,arxiv_id,tags'\n  }\n};\n\n// Model configuration for paper analysis\nexport const MODEL_CONFIG = {\n  analysis: 'openai/gpt-5-mini',\n  fallback_analysis: 'google/gemini-2.5-flash-preview-09-2025',\n  summary: 'openai/gpt-5-mini',\n  translation: 'google/gemini-2.5-flash-preview-09-2025'\n};\n\nexport const MODEL_PARAMS = {\n  analysis: {\n    temperature: 0.3,\n    max_tokens: 2000\n  },\n  summary: {\n    temperature: 0.3,\n    max_tokens: 500\n  },\n  translation: {\n    temperature: 0.5,\n    max_tokens: 800\n  }\n};\n\n// Paper analysis prompt template\nexport const PAPER_ANALYSIS_PROMPT = `You are an expert AI researcher specializing in related fields. \n\nAnalyze this research paper and provide a structured analysis:\n\n**Paper Title:** {title}\n**Authors:** {authors}\n**Abstract:** {abstract}\n**Published:** {published}\n\nGenerate 5 distinct text blocks in English. Use formatting suitable for Twitter (e.g., line breaks for readability, relevant emojis strategically).\nDO NOT MAKE ANYTHING UP. If the information is not in the paper, say \"Not specified in the paper.\"\n\n### Required Sections (Max 280 characters EACH):\n\n1. \uD83D\uDE80 Introduction (Hook & Core Idea):\n    * Start with a strong hook (question, surprising stat, relatable problem).\n    * Immediately state the paper's main breakthrough or purpose in simple, exciting terms.\n    * Briefly hint at *why* it's important or who it benefits.\n    * Goal: Make people stop scrolling and want to know more.\n    \n2. \uD83C\uDFAF Challenges (The Problems Solved):\n    * Clearly list 2-3 key problems or limitations this research tackles.\n    * Use bullet points (e.g., - Problem 1) or a numbered list for easy scanning.\n    * Be direct and focus on the *pain points* the paper addresses.\n    * Example: - Existing methods struggle with X. - Data scarcity hinders Y.\n\t \n3. \u2728 Innovations (The Novel Solution):\n    * List the core method(s), model(s), or key techniques introduced.\n    * Use bullet points or a list.\n    * **Crucially, highlight *what makes it novel***. What's the unique twist or idea?\n    * Focus on the *how* in simple terms.\n    * Example: - Introduced CleverModel architecture. - Novel XYZ training technique.\n\t \n4. \uD83D\uDCCA Experiment (Proof & Breakthrough):\n    * Showcase the single *most compelling* quantitative result (e.g., \"Achieved X% improvement over state-of-the-art!\").\n    * Clearly state the main breakthrough *demonstrated* by the experiments. What does this result *prove*?\n    * Provide concrete evidence of success concisely.\n    * Example: \"Results: Our method outperformed prior work by 15% on [Benchmark Task], showing significant gains in [Metric].\"\n\t\n5. \uD83E\uDD14 Insights (What's Next?):\n    * **Synthesize, don't just copy.** List 1-2 *potential* future research directions *inspired* by this work but not necessarily listed in the paper's future work section.\n    * Suggest 1-2 *potential* broader applications or real-world implications.\n    * End with a forward-looking statement or question to spark discussion.\n    * Example: \"Inspires exploration into [New Area]. Could this revolutionize [Application]? \"\n     \n\n**IMPORTANT: You MUST provide complete Chinese translations for ALL sections. The Chinese translations should be accurate, natural, and suitable for Chinese-speaking AI researchers and enthusiasts. Use proper Simplified Chinese. Do not translate emojis or section numbers. Make sure each Chinese translation is comprehensive and covers the same key points as the English version.**\n\n**Format your response as a valid JSON object:**\n{\n  \"introduction\": \"\uD83D\uDE80 English introduction text...\",\n  \"challenges\": \"\uD83C\uDFAF English challenges text...(Use bullet points or a list with \\\\n for each)\",\n  \"innovations\": \"\u2728 English innovations text...(Use bullet points or a list with \\\\n for each)\",\n  \"experiments\": \"\uD83D\uDCCA English experiments text...\",\n  \"insights\": \"\uD83E\uDD14 English insights text...\",\n  \"keywords\": [\"term1\", \"term2\", ...],\n  \"category\": \"one_of_topic_categories\",\n  \"relevance_score\": (1-10),\n  \"technical_depth\": \"beginner|intermediate|advanced\",\n  \"chinese_abstract\": \"\uD83D\uDE80\u4E2D\u6587\u6458\u8981\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u6458\u8981\uFF0C\u6DB5\u76D6\u8BBA\u6587\u7684\u4E3B\u8981\u8D21\u732E\u3001\u521B\u65B0\u70B9\u548C\u80CC\u666F\u3002\u5FC5\u987B\u4F7F\u7528\u7B80\u4F53\u4E2D\u6587\uFF0C\u786E\u4FDD\u7FFB\u8BD1\u51C6\u786E\u81EA\u7136\u3002\",\n  \"chinese_introduction\": \"\uD83D\uDE80\u4E2D\u6587\u4ECB\u7ECD\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u4ECB\u7ECD\uFF0C\u5305\u62EC\u7814\u7A76\u80CC\u666F\u3001\u52A8\u673A\u548C\u6838\u5FC3\u601D\u60F3\u3002\u5FC5\u987B\u4F7F\u7528\u7B80\u4F53\u4E2D\u6587\uFF0C\u786E\u4FDD\u7FFB\u8BD1\u51C6\u786E\u81EA\u7136\u3002\",\n  \"chinese_challenges\": \"\uD83C\uDFAF\u4E2D\u6587\u6311\u6218\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u6311\u6218\u63CF\u8FF0\uFF0C\u5217\u51FA\u4E3B\u8981\u6280\u672F\u95EE\u9898\u3002\u4F7F\u7528 bullet points \u6216\u5217\u8868\u3002\u5FC5\u987B\u4F7F\u7528\u7B80\u4F53\u4E2D\u6587\uFF0C\u786E\u4FDD\u7FFB\u8BD1\u51C6\u786E\u81EA\u7136\u3002\",\n  \"chinese_innovations\": \"\u2728\u4E2D\u6587\u521B\u65B0\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u521B\u65B0\u63CF\u8FF0\uFF0C\u7A81\u51FA\u65B0\u65B9\u6CD5\u548C\u6280\u672F\u8D21\u732E\u3002\u4F7F\u7528 bullet points \u6216\u5217\u8868\u3002\u5FC5\u987B\u4F7F\u7528\u7B80\u4F53\u4E2D\u6587\uFF0C\u786E\u4FDD\u7FFB\u8BD1\u51C6\u786E\u81EA\u7136\u3002\",\n  \"chinese_experiments\": \"\uD83D\uDCCA\u4E2D\u6587\u5B9E\u9A8C\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u5B9E\u9A8C\u63CF\u8FF0\uFF0C\u5305\u62EC\u8BBE\u7F6E\u3001\u7ED3\u679C\u548C\u7A81\u7834\u3002\u5FC5\u987B\u4F7F\u7528\u7B80\u4F53\u4E2D\u6587\uFF0C\u786E\u4FDD\u7FFB\u8BD1\u51C6\u786E\u81EA\u7136\u3002\",\n  \"chinese_insights\": \"\uD83E\uDD14\u4E2D\u6587\u89C1\u89E3\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u89C1\u89E3\u63CF\u8FF0\uFF0C\u5305\u62EC\u9886\u57DF\u610F\u4E49\u548C\u672A\u6765\u65B9\u5411\u3002\u5FC5\u987B\u4F7F\u7528\u7B80\u4F53\u4E2D\u6587\uFF0C\u786E\u4FDD\u7FFB\u8BD1\u51C6\u786E\u81EA\u7136\u3002\"\n}`;\n\n// RSS feed configuration\nexport const RSS_CONFIG = {\n  title: 'PaperDog - AI Papers Daily',\n  description: 'Daily curated AI and computer vision research papers',\n  language: 'en',\n  maxItems: 20\n};\n\n// Archive configuration\nexport const ARCHIVE_CONFIG = {\n  // Storage settings\n  defaultTTL: 365 * 24 * 60 * 60, // 1 year in seconds\n  maxArchivesPerRequest: 30,\n\n  // Export settings\n  maxExportPapers: 5000,\n  exportTimeoutMs: 30000, // 30 seconds\n  compressionThreshold: 100 * 1024, // 100KB\n\n  // Search settings\n  maxSearchResults: 100,\n  searchCacheTTL: 3600, // 1 hour\n\n  // Date range settings\n  maxDateRangeDays: 365, // 1 year\n  defaultArchiveDays: 30, // Last 30 days\n\n  // Rate limiting\n  maxExportsPerHour: 10,\n  maxSearchesPerMinute: 30,\n\n  // Export formats\n  supportedFormats: ['json', 'csv', 'markdown', 'bibtex'],\n  defaultFormat: 'json',\n\n  // Batch processing\n  batchSize: 1000,\n  maxBatchFiles: 10\n};\n\n// Export format configurations\nexport const EXPORT_CONFIG = {\n  json: {\n    contentType: 'application/json',\n    extension: 'json',\n    description: 'Complete data with full analysis and metadata',\n    supportsAnalysis: true,\n    supportsStatistics: true\n  },\n  csv: {\n    contentType: 'text/csv',\n    extension: 'csv',\n    description: 'Structured tabular data for spreadsheets',\n    supportsAnalysis: false,\n    supportsStatistics: true\n  },\n  markdown: {\n    contentType: 'text/markdown',\n    extension: 'md',\n    description: 'Human-readable format with formatting',\n    supportsAnalysis: true,\n    supportsStatistics: true\n  },\n  bibtex: {\n    contentType: 'text/plain',\n    extension: 'bib',\n    description: 'Academic citation format',\n    supportsAnalysis: false,\n    supportsStatistics: false\n  }\n};\n", "import { AppError } from './config.js';\n\n// Utility functions for PaperDog Blog\n\nexport async function fetchWithTimeout(url, timeout = 10000, options = {}) {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n  \n  const defaultHeaders = {\n    'User-Agent': 'PaperDog-Bot/1.0 (https://paperdog.org)',\n    'Accept': 'application/xml,application/json,text/html'\n  };\n  \n  const fetchOptions = {\n    signal: controller.signal,\n    ...options,\n    headers: {\n      ...defaultHeaders,\n      ...options.headers\n    }\n  };\n  \n  try {\n    const response = await fetch(url, fetchOptions);\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    if (error.name === 'AbortError') {\n      throw new AppError(`Request timeout after ${timeout}ms`);\n    }\n    throw error;\n  }\n}\n\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function generatePaperId(paper) {\n  const timestamp = Date.now();\n  const titleSlug = paper.title.toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .substring(0, 50);\n  \n  return `${paper.source}_${titleSlug}_${timestamp}`;\n}\n\nexport function validateDate(dateString) {\n  const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!regex.test(dateString)) {\n    throw new AppError('Invalid date format. Use YYYY-MM-DD');\n  }\n  \n  const date = new Date(dateString);\n  if (isNaN(date.getTime())) {\n    throw new AppError('Invalid date');\n  }\n  \n  return true;\n}\n\nexport function formatDate(dateString) {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n}\n\nexport function truncateText(text, maxLength = 200) {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\nexport function extractKeywords(text, maxKeywords = 8) {\n  // Simple keyword extraction - in production, use more sophisticated NLP\n  const commonWords = new Set([\n    'the', 'is', 'at', 'which', 'on', 'a', 'an', 'and', 'or', 'but', 'in', 'with',\n    'we', 'our', 'this', 'that', 'these', 'those', 'are', 'be', 'have', 'has',\n    'been', 'from', 'for', 'not', 'as', 'by', 'it', 'of', 'to', 'can', 'will'\n  ]);\n  \n  const words = text.toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(word => word.length > 3 && !commonWords.has(word));\n  \n  const wordFreq = {};\n  words.forEach(word => {\n    wordFreq[word] = (wordFreq[word] || 0) + 1;\n  });\n  \n  return Object.entries(wordFreq)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, maxKeywords)\n    .map(([word]) => word);\n}\n\nexport function jsonResponse(data, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      ...corsHeaders\n    }\n  });\n}\n\nexport function htmlResponse(html, status = 200) {\n  return new Response(html, {\n    status,\n    headers: {\n      'Content-Type': 'text/html; charset=utf-8',\n      ...corsHeaders\n    }\n  });\n}\n\nexport function rssResponse(xml, status = 200) {\n  return new Response(xml, {\n    status,\n    headers: {\n      'Content-Type': 'application/rss+xml; charset=utf-8',\n      ...corsHeaders\n    }\n  });\n}\n\nexport function errorResponse(message, status = 500) {\n  return jsonResponse({ error: message }, status);\n}\n\nexport async function getCachedPapers(date, env) {\n  try {\n    const cached = await env.PAPERS.get(`papers_${date}`);\n    if (cached) {\n      return JSON.parse(cached);\n    }\n  } catch (error) {\n    console.error('Error reading from cache:', error);\n  }\n  return null;\n}\n\nexport async function cachePapers(date, papers, env) {\n  try {\n    const ttl = 24 * 60 * 60; // 24 hours in seconds\n    await env.PAPERS.put(`papers_${date}`, JSON.stringify(papers), {\n      expirationTtl: ttl\n    });\n    console.log(`Cached ${papers.length} papers for date ${date}`);\n  } catch (error) {\n    console.error('Error writing to cache:', error);\n  }\n}\n\nexport async function getCachedPaper(paperId, env) {\n  try {\n    const cached = await env.PAPERS.get(`paper_${paperId}`);\n    if (cached) {\n      return JSON.parse(cached);\n    }\n  } catch (error) {\n    console.error('Error reading paper from cache:', error);\n  }\n  return null;\n}\n\nexport async function cachePaper(paperId, paper, env) {\n  try {\n    const ttl = 7 * 24 * 60 * 60; // 7 days in seconds\n    await env.PAPERS.put(`paper_${paperId}`, JSON.stringify(paper), {\n      expirationTtl: ttl\n    });\n  } catch (error) {\n    console.error('Error caching paper:', error);\n  }\n}\n\nexport function validatePaper(paper) {\n  if (!paper.title || paper.title.trim().length < 10) {\n    throw new AppError('Paper title is required and must be at least 10 characters');\n  }\n  \n  if (!paper.abstract || paper.abstract.trim().length < 50) {\n    throw new AppError('Paper abstract is required and must be at least 50 characters');\n  }\n  \n  if (!paper.authors || !Array.isArray(paper.authors) || paper.authors.length === 0) {\n    throw new AppError('Paper must have at least one author');\n  }\n  \n  return true;\n}\n\nexport function filterPapersByCategory(papers, category) {\n  if (!category) return papers;\n  \n  return papers.filter(paper => \n    paper.category?.toLowerCase() === category.toLowerCase() ||\n    paper.analysis?.category?.toLowerCase() === category.toLowerCase()\n  );\n}\n\nexport function searchPapers(papers, query) {\n  if (!query) return papers;\n  \n  const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 2);\n  \n  return papers.filter(paper => {\n    const searchableText = [\n      paper.title,\n      paper.abstract,\n      ...(paper.authors || []),\n      ...(paper.analysis?.keywords || [])\n    ].join(' ').toLowerCase();\n    \n    return searchTerms.every(term => searchableText.includes(term));\n  });\n}\n\nexport function sortPapersByDate(papers, order = 'desc') {\n  return [...papers].sort((a, b) => {\n    const dateA = new Date(a.published || a.scraped_at);\n    const dateB = new Date(b.published || b.scraped_at);\n    return order === 'desc' ? dateB - dateA : dateA - dateB;\n  });\n}\n\nexport const corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type',\n};\n\n// Archive utility functions\nexport function generateArchiveKey(date) {\n  return `archive_${date}`;\n}\n\nexport function generateArchiveIndexKey() {\n  return 'archive_index';\n}\n\nexport function generateExportKey(jobId) {\n  return `export_${jobId}`;\n}\n\nexport function validateDateRange(startDate, endDate) {\n  if (!startDate || !endDate) {\n    throw new AppError('Both start_date and end_date are required', 400);\n  }\n\n  validateDate(startDate);\n  validateDate(endDate);\n\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n\n  if (start > end) {\n    throw new AppError('Start date must be before or equal to end date', 400);\n  }\n\n  // Check if date range is too large (e.g., more than 1 year)\n  const diffTime = Math.abs(end - start);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n  if (diffDays > 365) {\n    throw new AppError('Date range cannot exceed 365 days', 400);\n  }\n\n  return { startDate, endDate, days: diffDays };\n}\n\nexport function validateExportParams(params) {\n  const { format, startDate, endDate, category, minScore, maxScore } = params;\n\n  // Validate format\n  const validFormats = ['json', 'csv', 'markdown', 'bibtex'];\n  if (!validFormats.includes(format)) {\n    throw new AppError(`Invalid format. Supported formats: ${validFormats.join(', ')}`, 400);\n  }\n\n  // Validate date range if provided\n  if (startDate || endDate) {\n    validateDateRange(startDate, endDate);\n  }\n\n  // Validate scores\n  if (minScore !== undefined && (minScore < 0 || minScore > 10)) {\n    throw new AppError('Minimum score must be between 0 and 10', 400);\n  }\n\n  if (maxScore !== undefined && (maxScore < 0 || maxScore > 10)) {\n    throw new AppError('Maximum score must be between 0 and 10', 400);\n  }\n\n  if (minScore !== undefined && maxScore !== undefined && minScore > maxScore) {\n    throw new AppError('Minimum score must be less than or equal to maximum score', 400);\n  }\n\n  return params;\n}\n\nexport function formatDateForDisplay(dateString) {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n}\n\nexport function generateExportJobId() {\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substring(2, 8);\n  return `export_${timestamp}_${random}`;\n}\n\nexport function sanitizeFilename(filename) {\n  return filename.replace(/[^a-zA-Z0-9._-]/g, '_').replace(/_{2,}/g, '_');\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function generateArchiveStatistics(papers) {\n  const stats = {\n    total: papers.length,\n    categories: {},\n    sources: {},\n    scores: [],\n    dates: [],\n    keywords: new Set()\n  };\n\n  papers.forEach(paper => {\n    // Category stats\n    const category = paper.analysis?.category || paper.category || 'other';\n    stats.categories[category] = (stats.categories[category] || 0) + 1;\n\n    // Source stats\n    const source = paper.source || 'unknown';\n    stats.sources[source] = (stats.sources[source] || 0) + 1;\n\n    // Score stats\n    const score = paper.analysis?.relevance_score || 5;\n    stats.scores.push(score);\n\n    // Date stats\n    const date = paper.archive_date || paper.published?.split('T')[0] || 'unknown';\n    if (!stats.dates.includes(date)) {\n      stats.dates.push(date);\n    }\n\n    // Keywords\n    if (paper.analysis?.keywords) {\n      paper.analysis.keywords.forEach(keyword => stats.keywords.add(keyword));\n    }\n  });\n\n  // Calculate averages\n  const avgScore = stats.scores.length > 0 ?\n    stats.scores.reduce((a, b) => a + b, 0) / stats.scores.length : 0;\n\n  return {\n    total_papers: stats.total,\n    categories: stats.categories,\n    sources: stats.sources,\n    average_score: Math.round(avgScore * 10) / 10,\n    unique_dates: stats.dates.length,\n    unique_keywords: stats.keywords.size,\n    date_range: stats.dates.length > 0 ? {\n      start: stats.dates.sort()[0],\n      end: stats.dates.sort().reverse()[0]\n    } : null\n  };\n}\n\nexport function groupPapersByDate(papers) {\n  const grouped = {};\n\n  papers.forEach(paper => {\n    const date = paper.archive_date || paper.published?.split('T')[0] || 'unknown';\n    if (!grouped[date]) grouped[date] = [];\n    grouped[date].push(paper);\n  });\n\n  return grouped;\n}\n\nexport function getPaginationParams(url) {\n  const page = parseInt(url.searchParams.get('page')) || 1;\n  const limit = parseInt(url.searchParams.get('limit')) || 20;\n\n  if (page < 1) throw new AppError('Page must be greater than 0', 400);\n  if (limit < 1 || limit > 100) throw new AppError('Limit must be between 1 and 100', 400);\n\n  return { page, limit };\n}\n\nexport function paginateArray(array, page, limit) {\n  const startIndex = (page - 1) * limit;\n  const endIndex = startIndex + limit;\n\n  return {\n    items: array.slice(startIndex, endIndex),\n    pagination: {\n      current_page: page,\n      total_pages: Math.ceil(array.length / limit),\n      total_items: array.length,\n      has_next: endIndex < array.length,\n      has_prev: page > 1\n    }\n  };\n}\n\n// View tracking functions\nexport async function incrementPaperView(paperId, env) {\n  try {\n    const viewKey = `views_${paperId}`;\n    const currentViews = await env.PAPERS.get(viewKey);\n    const newViews = currentViews ? parseInt(currentViews) + 1 : 1;\n\n    await env.PAPERS.put(viewKey, newViews.toString(), {\n      expirationTtl: 365 * 24 * 60 * 60 // 1 year TTL\n    });\n\n    return newViews;\n  } catch (error) {\n    console.error('Error incrementing paper views:', error);\n    return 0;\n  }\n}\n\nexport async function getPaperViewCount(paperId, env) {\n  try {\n    const viewKey = `views_${paperId}`;\n    const views = await env.PAPERS.get(viewKey);\n    return views ? parseInt(views) : 0;\n  } catch (error) {\n    console.error('Error getting paper view count:', error);\n    return 0;\n  }\n}\n\nexport async function addViewToPaper(paper, env) {\n  if (!paper || !paper.id) {\n    return paper;\n  }\n\n  const newViewCount = await incrementPaperView(paper.id, env);\n  return {\n    ...paper,\n    views: newViewCount\n  };\n}\n\nexport async function enrichPapersWithViews(papers, env) {\n  const papersWithViews = await Promise.all(\n    papers.map(async (paper) => {\n      const viewCount = await getPaperViewCount(paper.id, env);\n      return {\n        ...paper,\n        views: viewCount\n      };\n    })\n  );\n\n  return papersWithViews;\n}", "// Enhanced Paper Scoring System\n// \u57FA\u4E8E\u591A\u56E0\u7D20\u7684\u8BBA\u6587\u8BC4\u5206\u7CFB\u7EDF\uFF0C\u53C2\u8003Source\u76EE\u5F55\u7684\u8BC4\u5206\u6A21\u5F0F\n\nimport { AppError } from './config.js';\n\nconst logger = {\n  info: (msg, data = {}) => console.log(`[SCORING] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[SCORING] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[SCORING] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[SCORING] ${msg}`, data)\n};\n\n// \u8BC4\u5206\u6743\u91CD\u914D\u7F6E\nconst SCORING_WEIGHTS = {\n  recency: 0.3,        // \u65B0\u9C9C\u5EA6\u6743\u91CD\n  relevance: 0.4,      // AI\u76F8\u5173\u6027\u6743\u91CD\n  popularity: 0.2,     // \u6D41\u884C\u5EA6\u6743\u91CD\n  quality: 0.1         // \u8D28\u91CF\u6743\u91CD\n};\n\n// \u6E90\u7279\u5B9A\u6743\u91CD\u914D\u7F6E\nconst SOURCE_BONUSES = {\n  'huggingface.co': 2.0,  // HuggingFace \u8BBA\u6587\u83B7\u5F97 +2.0 \u52A0\u5206\n  'arxiv.org': 0.0        // arXiv \u8BBA\u6587\u65E0\u989D\u5916\u52A0\u5206\n};\n\n// \u65B0\u9C9C\u5EA6\u8BC4\u5206\u8BA1\u7B97\nexport function calculateRecencyScore(publishedDate) {\n  try {\n    const now = new Date();\n    const publishTime = new Date(publishedDate);\n    const daysAgo = Math.floor((now - publishTime) / (1000 * 60 * 60 * 24));\n    \n    // \u65B0\u9C9C\u5EA6\u8BC4\u5206\uFF1A\u5F53\u5929\u53D1\u5E0310\u5206\uFF0C\u6BCF\u5929\u9012\u51CF1\u5206\uFF0C\u6700\u4F4E1\u5206\n    let score = Math.max(1, 10 - daysAgo);\n    \n    // \u989D\u5916\u5956\u52B1\uFF1A7\u5929\u5185\u53D1\u5E03\u7684\u8BBA\u6587\u83B7\u5F97\u989D\u5916\u52A0\u5206\n    if (daysAgo <= 7) {\n      score += 2;\n    } else if (daysAgo <= 30) {\n      score += 1;\n    }\n    \n    return parseFloat(Math.min(10, score).toFixed(2)); // \u786E\u4FDD\u8FD4\u56DEfloat\n  } catch (error) {\n    logger.warn('Failed to calculate recency score:', error);\n    return 5.0; // \u9ED8\u8BA4\u5206\u6570 (float)\n  }\n}\n\n// AI\u76F8\u5173\u6027\u8BC4\u5206\uFF08\u57FA\u4E8E\u8BBA\u6587\u5206\u6790\u7ED3\u679C\uFF09\nexport function calculateRelevanceScore(paper) {\n  try {\n    let score = 5.0; // \u57FA\u7840\u5206\u6570 (float)\n    \n    // \u57FA\u4E8E\u5206\u6790\u7ED3\u679C\u7684\u76F8\u5173\u6027\u8BC4\u5206\n    if (paper.analysis) {\n      const analysis = paper.analysis;\n      \n      // \u57FA\u4E8EAI\u6A21\u578B\u7ED9\u51FA\u7684\u76F8\u5173\u6027\u8BC4\u5206\n      if (analysis.relevance_score) {\n        score = parseFloat(analysis.relevance_score);\n      }\n      \n      // \u57FA\u4E8E\u5173\u952E\u8BCD\u7684\u76F8\u5173\u6027\u52A0\u5206\n      const aiKeywords = [\n        'neural network', 'deep learning', 'machine learning', 'computer vision',\n        'natural language processing', 'transformer', 'attention', 'gpt', 'bert',\n        'diffusion model', 'generative ai', 'reinforcement learning', 'llm',\n        'multimodal', 'vision transformer', 'segmentation', 'detection'\n      ];\n      \n      const keywords = analysis.keywords || [];\n      const aiKeywordCount = keywords.filter(keyword => \n        aiKeywords.some(aiTerm => keyword.toLowerCase().includes(aiTerm))\n      ).length;\n      \n      score += aiKeywordCount * 0.5; // \u6BCF\u4E2AAI\u5173\u952E\u8BCD\u52A00.5\u5206\n      \n      // \u57FA\u4E8E\u6280\u672F\u6DF1\u5EA6\u7684\u52A0\u5206\n      if (analysis.technical_depth === 'high') {\n        score += 1.0;\n      } else if (analysis.technical_depth === 'medium') {\n        score += 0.5;\n      }\n    }\n    \n    // \u57FA\u4E8E\u6807\u9898\u548C\u6458\u8981\u7684\u5173\u952E\u8BCD\u5339\u914D\n    const text = `${paper.title} ${paper.abstract || ''}`.toLowerCase();\n    const highValueTerms = [\n      'breakthrough', 'state-of-the-art', 'novel', 'innovative', 'efficient',\n      'scalable', 'robust', 'accuracy', 'performance', 'optimization'\n    ];\n    \n    const termMatches = highValueTerms.filter(term => text.includes(term)).length;\n    score += termMatches * 0.3;\n    \n    return parseFloat(Math.min(10, Math.max(1, score)).toFixed(2));\n  } catch (error) {\n    logger.warn('Failed to calculate relevance score:', error);\n    return 5.0;\n  }\n}\n\n// \u6D41\u884C\u5EA6\u8BC4\u5206\uFF08\u57FA\u4E8E\u5F15\u7528\u3001\u70B9\u51FB\u7B49\u6307\u6807\uFF09\nexport function calculatePopularityScore(paper) {\n  try {\n    let score = 3.0; // \u57FA\u7840\u5206\u6570 (float)\n    \n    // \u57FA\u4E8E\u5F15\u7528\u6570\u7684\u8BC4\u5206\uFF08\u5982\u679C\u6709\u7684\u8BDD\uFF09\n    if (paper.citations && paper.citations > 0) {\n      if (paper.citations >= 100) {\n        score += 3.0;\n      } else if (paper.citations >= 50) {\n        score += 2.0;\n      } else if (paper.citations >= 10) {\n        score += 1.0;\n      }\n    }\n    \n    // \u57FA\u4E8E\u4F5C\u8005\u5F71\u54CD\u529B\u7684\u8BC4\u5206\n    if (paper.authors && paper.authors.length > 0) {\n      const influentialAuthors = [\n        'yoshua bengio', 'geoffrey hinton', 'yann lecun', 'andrew ng',\n        'fei-fei li', 'pieter abbeel', 'ilya sutskever', 'demis hassabis'\n      ];\n      \n      const hasInfluentialAuthor = paper.authors.some(author =>\n        influentialAuthors.some(inf => author.toLowerCase().includes(inf))\n      );\n      \n      if (hasInfluentialAuthor) {\n        score += 2.0;\n      }\n    }\n    \n    // \u57FA\u4E8E\u4F1A\u8BAE/\u671F\u520A\u5F71\u54CD\u529B\u7684\u8BC4\u5206\n    const topVenues = [\n      'neurips', 'icml', 'iclr', 'cvpr', 'iccv', 'eccv', 'acl', 'emnlp',\n      'nature', 'science', 'ieee transactions', 'jmlr'\n    ];\n    \n    if (paper.venue) {\n      const venueLower = paper.venue.toLowerCase();\n      const isTopVenue = topVenues.some(venue => venueLower.includes(venue));\n      \n      if (isTopVenue) {\n        score += 2.0;\n      }\n    }\n    \n    // \u57FA\u4E8E\u4EE3\u7801\u53EF\u7528\u6027\u7684\u52A0\u5206\n    if (paper.code_available) {\n      score += 1.0;\n    }\n    \n    return parseFloat(Math.min(10, score).toFixed(2));\n  } catch (error) {\n    logger.warn('Failed to calculate popularity score:', error);\n    return 3.0;\n  }\n}\n\n// \u8D28\u91CF\u8BC4\u5206\uFF08\u57FA\u4E8E\u8BBA\u6587\u7684\u5B8C\u6574\u6027\u548C\u6280\u672F\u4EF7\u503C\uFF09\nexport function calculateQualityScore(paper) {\n  try {\n    let score = 5.0; // \u57FA\u7840\u5206\u6570 (float)\n    \n    // \u57FA\u4E8E\u6458\u8981\u5B8C\u6574\u6027\n    if (paper.abstract && paper.abstract.length > 200) {\n      score += 1.0;\n    }\n    \n    // \u57FA\u4E8E\u5206\u6790\u7ED3\u679C\u7684\u6DF1\u5EA6\n    if (paper.analysis) {\n      const analysis = paper.analysis;\n      \n      // \u5B9E\u9A8C\u90E8\u5206\u7684\u8BE6\u7EC6\u7A0B\u5EA6\n      if (analysis.experiments && analysis.experiments.length > 100) {\n        score += 1.0;\n      }\n      \n      // \u521B\u65B0\u90E8\u5206\u7684\u6DF1\u5EA6\n      if (analysis.innovations && analysis.innovations.length > 100) {\n        score += 1.0;\n      }\n      \n      // \u6280\u672F\u6DF1\u5EA6\n      if (analysis.technical_depth === 'high') {\n        score += 1.5;\n      } else if (analysis.technical_depth === 'medium') {\n        score += 0.5;\n      }\n    }\n    \n    // \u57FA\u4E8E\u65B9\u6CD5\u8BBA\u7684\u5B8C\u6574\u6027\n    if (paper.abstract && (\n        paper.abstract.toLowerCase().includes('method') ||\n        paper.abstract.toLowerCase().includes('approach') ||\n        paper.abstract.toLowerCase().includes('algorithm') ||\n        paper.abstract.toLowerCase().includes('framework')\n    )) {\n      score += 0.5;\n    }\n    \n    return parseFloat(Math.min(10, score).toFixed(2));\n  } catch (error) {\n    logger.warn('Failed to calculate quality score:', error);\n    return 5.0;\n  }\n}\n\n// \u8BA1\u7B97\u7EFC\u5408\u8BC4\u5206\nexport function calculateComprehensiveScore(paper) {\n  try {\n    // \u8BA1\u7B97\u5404\u9879\u8BC4\u5206\n    const recencyScore = calculateRecencyScore(paper.published);\n    const relevanceScore = calculateRelevanceScore(paper);\n    const popularityScore = calculatePopularityScore(paper);\n    const qualityScore = calculateQualityScore(paper);\n    \n    // \u8BA1\u7B97\u6E90\u6743\u91CD\u52A0\u5206\n    let sourceBonus = 0.0;\n    let sourceType = 'unknown';\n    \n    // \u4F18\u5148\u57FA\u4E8E\u539F\u59CB\u6765\u6E90\u8BC6\u522B\uFF0C\u9632\u6B62\u4F2A\u88C5\u7684\u6E90\u6DF7\u6DC6\n    if (paper.original_source) {\n      // \u5982\u679C\u6709\u539F\u59CB\u6765\u6E90\u6807\u8BC6\uFF0C\u4F7F\u7528\u5B83\n      if (paper.original_source.includes('huggingface')) {\n        sourceBonus = SOURCE_BONUSES['huggingface.co'];\n        sourceType = 'huggingface.co';\n      } else if (paper.original_source.includes('arxiv')) {\n        sourceBonus = SOURCE_BONUSES['arxiv.org'];\n        sourceType = 'arxiv.org';\n      }\n    } else if (paper.source) {\n      // \u68C0\u67E5\u662F\u5426\u662F\u771F\u5B9E\u7684 HuggingFace \u6E90\n      if (paper.source.toLowerCase().includes('huggingface') || \n          paper.source.toLowerCase().includes('hugging face')) {\n        \n        // \u989D\u5916\u9A8C\u8BC1\uFF1A\u786E\u4FDD\u4E0D\u662F\u4F2A\u88C5\u7684 arXiv \u8BBA\u6587\n        const isRealHuggingFace = !paper.url || \n                                 !paper.url.includes('arxiv.org') ||\n                                 paper.is_fallback ||\n                                 paper.original_source === 'huggingface_fallback';\n        \n        if (isRealHuggingFace) {\n          sourceBonus = SOURCE_BONUSES['huggingface.co'];\n          sourceType = 'huggingface.co';\n        } else {\n          // \u8FD9\u662F\u4F2A\u88C5\u7684 arXiv \u8BBA\u6587\n          sourceBonus = SOURCE_BONUSES['arxiv.org'];\n          sourceType = 'arxiv.org';\n        }\n      } \n      // \u68C0\u67E5\u662F\u5426\u662F\u771F\u5B9E\u7684 arXiv \u6E90\n      else if (paper.source.toLowerCase().includes('arxiv')) {\n        sourceBonus = SOURCE_BONUSES['arxiv.org'];\n        sourceType = 'arxiv.org';\n      }\n    }\n    \n    // \u5907\u7528\u68C0\u67E5\uFF1A\u57FA\u4E8EURL\u548C\u5176\u4ED6\u7279\u5F81\n    if (sourceType === 'unknown' && paper.url) {\n      if (paper.url.includes('arxiv.org') && !paper.url.includes('huggingface.co')) {\n        sourceBonus = SOURCE_BONUSES['arxiv.org'];\n        sourceType = 'arxiv.org';\n      } else if (paper.url.includes('huggingface.co') && !paper.url.includes('arxiv.org')) {\n        sourceBonus = SOURCE_BONUSES['huggingface.co'];\n        sourceType = 'huggingface.co';\n      }\n    }\n    \n    // \u8BA1\u7B97\u52A0\u6743\u603B\u5206\n    const baseScore = \n      (recencyScore * SCORING_WEIGHTS.recency) +\n      (relevanceScore * SCORING_WEIGHTS.relevance) +\n      (popularityScore * SCORING_WEIGHTS.popularity) +\n      (qualityScore * SCORING_WEIGHTS.quality);\n    \n    const totalScore = baseScore + sourceBonus;\n    \n    // \u521B\u5EFA\u8BC4\u5206\u8BE6\u60C5\u5BF9\u8C61\n    const scoringDetails = {\n      total_score: Math.round(totalScore * 100) / 100, // \u4FDD\u7559\u4E24\u4F4D\u5C0F\u6570\n      base_score: Math.round(baseScore * 100) / 100,\n      source_bonus: Math.round(sourceBonus * 100) / 100,\n      source_type: sourceType,\n      recency_score: Math.round(recencyScore * 100) / 100,\n      relevance_score: Math.round(relevanceScore * 100) / 100,\n      popularity_score: Math.round(popularityScore * 100) / 100,\n      quality_score: Math.round(qualityScore * 100) / 100,\n      weights: SCORING_WEIGHTS,\n      calculated_at: new Date().toISOString()\n    };\n    \n    // \u6DFB\u52A0\u8BC4\u5206\u8BE6\u60C5\u5230\u8BBA\u6587\u5BF9\u8C61\n    const scoredPaper = {\n      ...paper,\n      scoring: scoringDetails\n    };\n    \n    logger.debug(`Calculated score for paper \"${paper.title}\": ${scoringDetails.total_score}`, {\n      base_score: scoringDetails.base_score,\n      source_bonus: scoringDetails.source_bonus,\n      source_type: scoringDetails.source_type,\n      recency: scoringDetails.recency_score,\n      relevance: scoringDetails.relevance_score,\n      popularity: scoringDetails.popularity_score,\n      quality: scoringDetails.quality_score\n    });\n    \n    return scoredPaper;\n  } catch (error) {\n    logger.error('Failed to calculate comprehensive score:', error);\n    // \u8FD4\u56DE\u5E26\u6709\u9ED8\u8BA4\u8BC4\u5206\u7684\u8BBA\u6587\n    return {\n      ...paper,\n      scoring: {\n        total_score: 5.0,\n        base_score: 5.0,\n        source_bonus: 0.0,\n        source_type: 'unknown',\n        recency_score: 5.0,\n        relevance_score: 5.0,\n        popularity_score: 5.0,\n        quality_score: 5.0,\n        weights: SCORING_WEIGHTS,\n        calculated_at: new Date().toISOString(),\n        error: 'Scoring calculation failed'\n      }\n    };\n  }\n}\n\n// \u8BBA\u6587\u7B5B\u9009\u548C\u6392\u5E8F\nexport function filterAndSortPapers(papers, options = {}) {\n  const {\n    minScore = 6.0,        // \u6700\u4F4E\u5206\u6570\u9608\u503C (float)\n    maxPapers = 10,        // \u6700\u5927\u8BBA\u6587\u6570\u91CF\uFF0C\u6539\u4E3A10\u7BC7\n    minRecencyScore = 3.0,  // \u6700\u4F4E\u65B0\u9C9C\u5EA6\u5206\u6570 (float)\n    daysAgoLimit = 90,     // \u6700\u591A90\u5929\u524D\u7684\u8BBA\u6587\n    ensureBothSources = true  // \u786E\u4FDD\u4ECE\u4E24\u4E2A\u6765\u6E90\u5404\u90095\u7BC7\n  } = options;\n  \n  try {\n    const now = new Date();\n    const cutoffDate = new Date(now.getTime() - daysAgoLimit * 24 * 60 * 60 * 1000);\n    const date = now.toISOString().split('T')[0]; // For seeding random\n    \n    // 1. \u4E3A\u6240\u6709\u8BBA\u6587\u8BA1\u7B97\u8BC4\u5206\n    const scoredPapers = papers.map(paper => calculateComprehensiveScore(paper));\n    \n    // 2. \u8FC7\u6EE4\u8BBA\u6587\n    const filteredPapers = scoredPapers.filter(paper => {\n      // \u68C0\u67E5\u65F6\u95F4\u9650\u5236\n      try {\n        const paperDate = new Date(paper.published);\n        if (paperDate < cutoffDate) {\n          return false;\n        }\n      } catch {\n        return false;\n      }\n      \n      // \u68C0\u67E5\u5206\u6570\u9608\u503C\n      if (paper.scoring.total_score < minScore) {\n        return false;\n      }\n      \n      // \u68C0\u67E5\u65B0\u9C9C\u5EA6\u9608\u503C\n      if (paper.scoring.recency_score < minRecencyScore) {\n        return false;\n      }\n      \n      return true;\n    });\n    \n    logger.info(`Filtered ${scoredPapers.length} papers to ${filteredPapers.length} papers`);\n    \n    // 3. \u6392\u5E8F\u8BBA\u6587 (with random tie-breaking)\n    const sortedPapers = filteredPapers.sort((a, b) => {\n      const random = createSeededRandom(date);\n      \n      // \u4E3B\u8981\u6309\u603B\u5206\u6392\u5E8F\n      const scoreDiff = b.scoring.total_score - a.scoring.total_score;\n      if (Math.abs(scoreDiff) > 0.01) {\n        return scoreDiff;\n      }\n      \n      // \u5206\u6570\u76F8\u540C\u65F6\uFF0C\u6309\u65B0\u9C9C\u5EA6\u6392\u5E8F\n      const recencyDiff = b.scoring.recency_score - a.scoring.recency_score;\n      if (Math.abs(recencyDiff) > 0.01) {\n        return recencyDiff;\n      }\n      \n      // \u518D\u6309\u76F8\u5173\u6027\u6392\u5E8F\n      const relevanceDiff = b.scoring.relevance_score - a.scoring.relevance_score;\n      if (Math.abs(relevanceDiff) > 0.01) {\n        return relevanceDiff;\n      }\n      \n      // \u6700\u540E\u6309\u968F\u673A\u6392\u5E8F (for tie-breaking)\n      return random() - 0.5;\n    });\n    \n    // 4. \u9009\u62E9Top N\u8BBA\u6587\uFF08\u786E\u4FDD\u4ECEarXiv\u548CHuggingFace\u5404\u90095\u7BC7\uFF09\n    let topPapers;\n    if (ensureBothSources && maxPapers >= 10) {\n      topPapers = selectPapersFromBothSources(sortedPapers, maxPapers, date);\n    } else {\n      topPapers = sortedPapers.slice(0, maxPapers);\n    }\n    \n    // 5. Validate the selection\n    const validation = validatePaperSelection(topPapers, options);\n    if (!validation.isValid) {\n      logger.warn('Paper selection validation failed:', validation.issues);\n    } else {\n      logger.info('Paper selection validation passed');\n    }\n    \n    logger.info(`Selected top ${topPapers.length} papers from ${filteredPapers.length} filtered papers`);\n    logger.info(`Selection validation: ${JSON.stringify(validation.summary)}`);\n    \n    return topPapers;\n  } catch (error) {\n    logger.error('Failed to filter and sort papers:', error);\n    // \u53D1\u751F\u9519\u8BEF\u65F6\uFF0C\u8FD4\u56DE\u7B80\u5355\u7684\u6309\u65F6\u95F4\u6392\u5E8F\n    return papers\n      .sort((a, b) => new Date(b.published) - new Date(a.published))\n      .slice(0, maxPapers);\n  }\n}\n\n// Validate paper selection results\nfunction validatePaperSelection(papers, options) {\n  const { maxPapers = 10, ensureBothSources = true } = options;\n  const issues = [];\n  const summary = {\n    total_papers: papers.length,\n    arxiv_count: 0,\n    huggingface_count: 0,\n    other_count: 0,\n    average_score: 0,\n    score_range: { min: 10, max: 0 }\n  };\n  \n  if (papers.length === 0) {\n    issues.push('No papers selected');\n    return { isValid: false, issues, summary };\n  }\n  \n  // Count sources\n  papers.forEach(paper => {\n    const sourceType = paper.scoring?.source_type || 'unknown';\n    if (sourceType === 'arxiv.org') {\n      summary.arxiv_count++;\n    } else if (sourceType === 'huggingface.co') {\n      summary.huggingface_count++;\n    } else {\n      summary.other_count++;\n    }\n    \n    const score = paper.scoring?.total_score || 0;\n    summary.average_score += score;\n    summary.score_range.min = Math.min(summary.score_range.min, score);\n    summary.score_range.max = Math.max(summary.score_range.max, score);\n  });\n  \n  summary.average_score = summary.average_score / papers.length;\n  \n  // Validate count\n  if (papers.length > maxPapers) {\n    issues.push(`Too many papers selected: ${papers.length} > ${maxPapers}`);\n  } else if (papers.length < maxPapers / 2) {\n    issues.push(`Too few papers selected: ${papers.length} < ${maxPapers / 2}`);\n  }\n  \n  // Validate source balance if required\n  if (ensureBothSources) {\n    const targetPerSource = Math.floor(maxPapers / 2);\n    if (summary.arxiv_count < targetPerSource / 2) {\n      issues.push(`Insufficient arXiv papers: ${summary.arxiv_count} < ${targetPerSource / 2}`);\n    }\n    if (summary.huggingface_count < targetPerSource / 2) {\n      issues.push(`Insufficient HuggingFace papers: ${summary.huggingface_count} < ${targetPerSource / 2}`);\n    }\n    if (summary.arxiv_count + summary.huggingface_count < maxPapers * 0.8) {\n      issues.push('Poor source balance - too many other/unknown sources');\n    }\n  }\n  \n  // Validate scores\n  if (summary.score_range.min < 4.0) {\n    issues.push(`Low minimum score: ${summary.score_range.min} < 4.0`);\n  }\n  \n  const isValid = issues.length === 0;\n  \n  return { isValid, issues, summary };\n}\n\nfunction createSeededRandom(dateString) {\n  // Simple seeded random function based on date for consistent daily selection\n  let seed = 0;\n  for (let i = 0; i < dateString.length; i++) {\n    seed += dateString.charCodeAt(i) * 31;\n  }\n  seed = seed % 2147483647;\n  \n  return function() {\n    seed = (seed * 16807) % 2147483647;\n    return (seed - 1) / 2147483646;\n  };\n}\n\n// \u4ECE\u4E24\u4E2A\u6765\u6E90\u5404\u90095\u7BC7\u8BBA\u6587\nfunction selectPapersFromBothSources(sortedPapers, maxPapers = 10, date = new Date().toISOString().split('T')[0]) {\n  const arxivPapers = [];\n  const huggingfacePapers = [];\n  const unknownPapers = [];\n  \n  // \u5206\u79BB arXiv \u548C HuggingFace \u8BBA\u6587\uFF0C\u5E76\u8BE6\u7EC6\u8BB0\u5F55\u5206\u7C7B\u8FC7\u7A0B\n  sortedPapers.forEach((paper, index) => {\n    const sourceType = paper.scoring.source_type;\n    const paperInfo = {\n      index: index,\n      title: paper.title.substring(0, 50) + '...',\n      source: paper.source,\n      original_source: paper.original_source,\n      source_type: sourceType,\n      url: paper.url,\n      is_fallback: paper.is_fallback,\n      score: paper.scoring.total_score\n    };\n    \n    if (sourceType === 'arxiv.org') {\n      arxivPapers.push(paper);\n      logger.debug(`Classified as arXiv:`, paperInfo);\n    } else if (sourceType === 'huggingface.co') {\n      huggingfacePapers.push(paper);\n      logger.debug(`Classified as HuggingFace:`, paperInfo);\n    } else {\n      unknownPapers.push(paper);\n      logger.warn(`Unknown source type:`, paperInfo);\n    }\n  });\n  \n  logger.info(`Paper classification: ${arxivPapers.length} arXiv, ${huggingfacePapers.length} HuggingFace, ${unknownPapers.length} unknown`);\n  \n  // \u68C0\u67E5\u662F\u5426\u6709\u8DB3\u591F\u7684\u8BBA\u6587\n  if (arxivPapers.length === 0 && huggingfacePapers.length === 0) {\n    logger.warn('No papers found with proper source classification, fallback to score-based selection');\n    return sortedPapers.slice(0, maxPapers);\n  }\n  \n  // Create seeded random for consistent daily selection\n  const random = createSeededRandom(date);\n  \n  // Sort arXiv papers with random tie-breaking for equal scores\n  arxivPapers.sort((a, b) => {\n    const scoreDiff = b.scoring.total_score - a.scoring.total_score;\n    if (Math.abs(scoreDiff) > 0.01) { // Small threshold for \"equal\" scores\n      return scoreDiff;\n    }\n    // For equal scores, use random tie-breaking\n    return random() - 0.5;\n  });\n  \n  // Sort HuggingFace papers with random tie-breaking for equal scores\n  huggingfacePapers.sort((a, b) => {\n    const scoreDiff = b.scoring.total_score - a.scoring.total_score;\n    if (Math.abs(scoreDiff) > 0.01) {\n      return scoreDiff;\n    }\n    // For equal scores, use random tie-breaking\n    return random() - 0.5;\n  });\n  \n  const selectedPapers = [];\n  const targetPerSource = Math.floor(maxPapers / 2); // \u6BCF\u4E2A\u6765\u6E90\u76EE\u68075\u7BC7\n  \n  // \u4ECEarXiv\u9009\u62E9 top 5 (with random tie-breaking already applied)\n  const arxivSelected = arxivPapers.slice(0, Math.min(targetPerSource, arxivPapers.length));\n  selectedPapers.push(...arxivSelected);\n  logger.info(`Selected ${arxivSelected.length} arXiv papers (target: ${targetPerSource})`);\n  \n  // \u4ECEHuggingFace\u9009\u62E9 top 5 (with random tie-breaking already applied)\n  const huggingfaceSelected = huggingfacePapers.slice(0, Math.min(targetPerSource, huggingfacePapers.length));\n  selectedPapers.push(...huggingfaceSelected);\n  logger.info(`Selected ${huggingfaceSelected.length} HuggingFace papers (target: ${targetPerSource})`);\n  \n  logger.info(`Initial selection: ${arxivSelected.length} arXiv + ${huggingfaceSelected.length} HuggingFace = ${selectedPapers.length} papers`);\n  \n  // \u5982\u679C\u8FD8\u9700\u8981\u66F4\u591A\u8BBA\u6587\uFF0C\u6309\u4EE5\u4E0B\u4F18\u5148\u7EA7\u8865\u5145\n  if (selectedPapers.length < maxPapers) {\n    const remainingSlots = maxPapers - selectedPapers.length;\n    const remainingPapers = [];\n    \n    // 1. \u4F18\u5148\u4ECE\u6709\u8BBA\u6587\u4F46\u6570\u91CF\u4E0D\u8DB3\u7684\u6765\u6E90\u8865\u5145 (already sorted with random)\n    if (arxivSelected.length < targetPerSource && arxivPapers.length > arxivSelected.length) {\n      remainingPapers.push(...arxivPapers.slice(arxivSelected.length, arxivSelected.length + remainingSlots));\n    }\n    if (huggingfaceSelected.length < targetPerSource && huggingfacePapers.length > huggingfaceSelected.length) {\n      remainingPapers.push(...huggingfacePapers.slice(huggingfaceSelected.length, huggingfaceSelected.length + remainingSlots));\n    }\n    \n    // 2. \u6DFB\u52A0\u672A\u5206\u7C7B\u7684\u8BBA\u6587 (sort with random tie-breaking)\n    unknownPapers.sort((a, b) => {\n      const scoreDiff = b.scoring.total_score - a.scoring.total_score;\n      if (Math.abs(scoreDiff) > 0.01) {\n        return scoreDiff;\n      }\n      return random() - 0.5;\n    });\n    remainingPapers.push(...unknownPapers);\n    \n    // \u9009\u62E9\u5269\u4F59\u7684\n    const backupSelected = remainingPapers.slice(0, remainingSlots);\n    selectedPapers.push(...backupSelected);\n    \n    logger.info(`Added ${backupSelected.length} backup papers to reach ${selectedPapers.length} total papers`);\n  }\n  \n  // \u786E\u4FDD\u603B\u6570\u4E0D\u8D85\u8FC7maxPapers\u5E76\u6309\u603B\u5206\u91CD\u65B0\u6392\u5E8F (preserve source balance but order by score)\n  const finalPapers = selectedPapers\n    .slice(0, maxPapers)\n    .sort((a, b) => {\n      const scoreDiff = b.scoring.total_score - a.scoring.total_score;\n      if (Math.abs(scoreDiff) > 0.01) {\n        return scoreDiff;\n      }\n      // Final tie-breaking: random\n      return random() - 0.5;\n    });\n  \n  // \u6700\u7EC8\u7EDF\u8BA1\u548C\u9A8C\u8BC1\n  const finalArxivCount = finalPapers.filter(p => p.scoring.source_type === 'arxiv.org').length;\n  const finalHuggingfaceCount = finalPapers.filter(p => p.scoring.source_type === 'huggingface.co').length;\n  const finalOtherCount = finalPapers.filter(p => !['arxiv.org', 'huggingface.co'].includes(p.scoring.source_type)).length;\n  \n  logger.info(`Final selection summary: ${finalArxivCount} arXiv + ${finalHuggingfaceCount} HuggingFace + ${finalOtherCount} other = ${finalPapers.length} total`);\n  logger.info(`Random seed used for date: ${date}`);\n  \n  // Enhanced logging for source distribution\n  logger.info(`Source distribution details:`, {\n    arxiv: {\n      total_available: arxivPapers.length,\n      selected: finalArxivCount,\n      top_scores: arxivPapers.slice(0, 3).map(p => ({ title: p.title.substring(0, 30) + '...', score: p.scoring.total_score }))\n    },\n    huggingface: {\n      total_available: huggingfacePapers.length,\n      selected: finalHuggingfaceCount,\n      top_scores: huggingfacePapers.slice(0, 3).map(p => ({ title: p.title.substring(0, 30) + '...', score: p.scoring.total_score }))\n    },\n    other: {\n      total_available: unknownPapers.length,\n      selected: finalOtherCount\n    }\n  });\n  \n  // \u5982\u679C\u5206\u5E03\u4E0D\u7406\u60F3\uFF0C\u8BB0\u5F55\u8B66\u544A\n  if (finalArxivCount === 0) {\n    logger.warn('No arXiv papers in final selection - check arXiv scraping and source classification');\n  }\n  if (finalHuggingfaceCount === 0) {\n    logger.warn('No HuggingFace papers in final selection - check HuggingFace scraping and source classification');\n  }\n  if (finalOtherCount > 2) {\n    logger.warn(`High number of other/unknown source papers: ${finalOtherCount} - review source detection logic`);\n  }\n  \n  return finalPapers;\n}\n\n// \u5E94\u7528 HuggingFace \u4F18\u5148\u903B\u8F91\uFF08\u4FDD\u7559\u65E7\u51FD\u6570\u517C\u5BB9\u6027\uFF09\nfunction applyHuggingFacePriority(sortedPapers, maxPapers) {\n  const targetHuggingFaceCount = Math.min(3, maxPapers); // \u76EE\u6807\uFF1A3/5 \u6765\u81EA HuggingFace\n  const huggingFacePapers = [];\n  const otherPapers = [];\n  \n  // \u5206\u79BB HuggingFace \u548C\u5176\u4ED6\u8BBA\u6587\n  sortedPapers.forEach(paper => {\n    if (paper.scoring.source_type === 'huggingface.co') {\n      huggingFacePapers.push(paper);\n    } else {\n      otherPapers.push(paper);\n    }\n  });\n  \n  logger.info(`Found ${huggingFacePapers.length} HuggingFace papers and ${otherPapers.length} other papers`);\n  \n  const selectedPapers = [];\n  let huggingFaceSelected = 0;\n  let otherSelected = 0;\n  \n  // \u6DF7\u5408\u9009\u62E9\u7B56\u7565\uFF1A\u786E\u4FDD HuggingFace \u8BBA\u6587\u6709\u8DB3\u591F\u4EE3\u8868\n  for (let i = 0; i < maxPapers; i++) {\n    const currentHuggingFaceRatio = huggingFaceSelected / (i + 1);\n    const targetRatio = targetHuggingFaceCount / maxPapers;\n    \n    // \u5982\u679C HuggingFace \u8BBA\u6587\u6BD4\u4F8B\u4E0D\u8DB3\uFF0C\u4F18\u5148\u9009\u62E9\n    if (currentHuggingFaceRatio < targetRatio && huggingFacePapers.length > huggingFaceSelected) {\n      selectedPapers.push(huggingFacePapers[huggingFaceSelected]);\n      huggingFaceSelected++;\n    } \n    // \u5426\u5219\u9009\u62E9\u5176\u4ED6\u8BBA\u6587\u4E2D\u7684\u6700\u4F73\n    else if (otherPapers.length > otherSelected) {\n      selectedPapers.push(otherPapers[otherSelected]);\n      otherSelected++;\n    }\n    // \u5982\u679C\u67D0\u4E00\u7C7B\u8BBA\u6587\u5DF2\u7ECF\u9009\u5B8C\uFF0C\u7EE7\u7EED\u9009\u62E9\u53E6\u4E00\u7C7B\n    else if (huggingFacePapers.length > huggingFaceSelected) {\n      selectedPapers.push(huggingFacePapers[huggingFaceSelected]);\n      huggingFaceSelected++;\n    }\n    else if (otherPapers.length > otherSelected) {\n      selectedPapers.push(otherPapers[otherSelected]);\n      otherSelected++;\n    }\n  }\n  \n  logger.info(`Selected ${huggingFaceSelected} HuggingFace papers and ${otherSelected} other papers`);\n  \n  return selectedPapers;\n}\n\n// \u751F\u6210\u8BC4\u5206\u62A5\u544A\nexport function generateScoringReport(papers) {\n  try {\n    const scoredPapers = papers.map(paper => calculateComprehensiveScore(paper));\n    \n    const report = {\n      total_papers: scoredPapers.length,\n      average_score: scoredPapers.reduce((sum, p) => sum + p.scoring.total_score, 0) / scoredPapers.length,\n      score_distribution: {\n        excellent: scoredPapers.filter(p => p.scoring.total_score >= 8.5).length,\n        good: scoredPapers.filter(p => p.scoring.total_score >= 7.0 && p.scoring.total_score < 8.5).length,\n        average: scoredPapers.filter(p => p.scoring.total_score >= 5.5 && p.scoring.total_score < 7.0).length,\n        below_average: scoredPapers.filter(p => p.scoring.total_score < 5.5).length\n      },\n      top_paper: scoredPapers.length > 0 ? scoredPapers[0] : null,\n      scoring_weights: SCORING_WEIGHTS,\n      generated_at: new Date().toISOString()\n    };\n    \n    return report;\n  } catch (error) {\n    logger.error('Failed to generate scoring report:', error);\n    return {\n      error: 'Failed to generate scoring report',\n      message: error.message\n    };\n  }\n}\n\nexport {\n  SCORING_WEIGHTS,\n  SOURCE_BONUSES\n};\n", "import { AppError } from './config.js';\nimport { validateDate, formatDate, sortPapersByDate, filterPapersByCategory, searchPapers } from './utils.js';\nimport { filterAndSortPapers, generateScoringReport, SCORING_WEIGHTS } from './paper-scoring.js';\n\nconst logger = {\n  info: (msg, data = {}) => console.log(`[BLOG] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[BLOG] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[BLOG] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[BLOG] ${msg}`, data)\n};\n\nexport async function generateDailyReport(papers, date) {\n  try {\n    logger.info(`Generating daily report for ${date} with ${papers.length} papers`);\n    \n    if (!papers || papers.length === 0) {\n      return {\n        date: date,\n        title: `No Papers Found - ${formatDate(date)}`,\n        summary: 'No new AI papers were found for this date.',\n        papers: [],\n        total_papers: 0,\n        categories: {},\n        top_papers: [],\n        scoring_report: null\n      };\n    }\n    \n    // Use enhanced scoring system to filter and select top papers\n    const topPapers = filterAndSortPapers(papers, {\n      minScore: 6.0,\n      maxPapers: 10,  // \u6539\u4E3A\u9009\u62E910\u7BC7\u8BBA\u6587\n      minRecencyScore: 3.0,\n      daysAgoLimit: 90,\n      ensureBothSources: true  // \u786E\u4FDD\u4ECE\u4E24\u4E2A\u6765\u6E90\u5404\u90095\u7BC7\n    });\n    \n    // Generate scoring report\n    const scoringReport = generateScoringReport(papers);\n    \n    // Group by category for all papers\n    const categories = {};\n    papers.forEach(paper => {\n      const category = paper.analysis?.category || paper.category || 'other';\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push(paper);\n    });\n    \n    // Generate enhanced summary with scoring information\n    const summary = generateDailySummary(papers, date, categories, scoringReport);\n    \n    const report = {\n      date: date,\n      title: `Daily AI Papers Digest - ${formatDate(date)}`,\n      summary: summary,\n      papers: papers,\n      total_papers: papers.length,\n      categories: categories,\n      top_papers: topPapers,\n      scoring_report: scoringReport,\n      generated_at: new Date().toISOString()\n    };\n    \n    logger.info(`Generated daily report with ${papers.length} papers, selected top ${topPapers.length} papers`);\n    return report;\n    \n  } catch (error) {\n    logger.error('Failed to generate daily report:', error);\n    throw new AppError(`Failed to generate daily report: ${error.message}`);\n  }\n}\n\nfunction getScoreColor(score) {\n  if (score >= 8.5) return '#28a745'; // Excellent - green\n  if (score >= 7.0) return '#17a2b8'; // Good - blue\n  if (score >= 5.5) return '#ffc107'; // Average - yellow\n  return '#dc3545'; // Below average - red\n}\n\nfunction generateDailySummary(papers, date, categories, scoringReport) {\n  const topCategories = Object.entries(categories)\n    .sort(([,a], [,b]) => b.length - a.length)\n    .slice(0, 3)\n    .map(([cat, papers]) => `${cat.replace('_', ' ')} (${papers.length})`)\n    .join(', ');\n  \n  const avgRelevance = papers.reduce((sum, paper) => {\n    return sum + (paper.analysis?.relevance_score || 5);\n  }, 0) / papers.length;\n  \n  const topKeywords = {};\n  papers.forEach(paper => {\n    const keywords = paper.analysis?.keywords || [];\n    keywords.forEach(keyword => {\n      topKeywords[keyword] = (topKeywords[keyword] || 0) + 1;\n    });\n  });\n  \n  const trendingKeywords = Object.entries(topKeywords)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 5)\n    .map(([keyword]) => keyword)\n    .join(', ');\n  \n  // \u7EDF\u8BA1\u6765\u6E90\u5206\u5E03\uFF08\u4F7F\u7528\u66F4\u51C6\u786E\u7684\u65B9\u6CD5\uFF09\n  const sourceCounts = {\n    arxiv: papers.filter(p => p.scoring?.source_type === 'arxiv.org').length,\n    huggingface: papers.filter(p => p.scoring?.source_type === 'huggingface.co').length,\n    unknown: papers.filter(p => !p.scoring?.source_type || !['arxiv.org', 'huggingface.co'].includes(p.scoring.source_type)).length\n  };\n  \n  // \u9A8C\u8BC1\u6E90\u5206\u5E03\u5E76\u8BB0\u5F55\u8B66\u544A\n  if (sourceCounts.arxiv === 0) {\n    logger.warn('No arXiv papers found in summary generation');\n  }\n  if (sourceCounts.huggingface === 0) {\n    logger.warn('No HuggingFace papers found in summary generation');\n  }\n  if (sourceCounts.unknown > 0) {\n    logger.warn(`Found ${sourceCounts.unknown} papers with unknown source type`);\n  }\n  \n  // Enhanced summary with scoring information\n  let summary = `Today's digest features ${papers.length} papers spanning ${Object.keys(categories).length} categories, with strong representation from ${topCategories}. The average relevance score is ${avgRelevance.toFixed(1)}/10. Trending topics include ${trendingKeywords}.`;\n  \n  // \u6DFB\u52A0\u6765\u6E90\u7EDF\u8BA1\u548C\u9A8C\u8BC1\u4FE1\u606F\n  if (sourceCounts.unknown > 0) {\n    summary += ` Source distribution: ${sourceCounts.arxiv} from arXiv, ${sourceCounts.huggingface} from HuggingFace, ${sourceCounts.unknown} unknown sources.`;\n  } else {\n    summary += ` Source distribution: ${sourceCounts.arxiv} from arXiv, ${sourceCounts.huggingface} from HuggingFace.`;\n  }\n  \n  // \u6DFB\u52A0\u6E90\u5206\u5E03\u9A8C\u8BC1\u72B6\u6001\n  const targetPerSource = 5;\n  const isBalanced = sourceCounts.arxiv >= targetPerSource && sourceCounts.huggingface >= targetPerSource;\n  if (isBalanced) {\n    summary += ` \u2705 Balanced source representation achieved.`;\n  } else {\n    summary += ` \u26A0\uFE0F Unbalanced source distribution detected.`;\n  }\n  \n  if (scoringReport && !scoringReport.error) {\n    summary += ` Using our advanced scoring system that considers recency (${Math.round(SCORING_WEIGHTS.recency * 100)}%), relevance (${Math.round(SCORING_WEIGHTS.relevance * 100)}%), popularity (${Math.round(SCORING_WEIGHTS.popularity * 100)}%), and quality (${Math.round(SCORING_WEIGHTS.quality * 100)}%), we selected the top 10 papers (5 from arXiv, 5 from HuggingFace) with an average score of ${scoringReport.average_score.toFixed(1)}/10.`;\n    \n    if (scoringReport.score_distribution) {\n      const excellentCount = scoringReport.score_distribution.excellent || 0;\n      const goodCount = scoringReport.score_distribution.good || 0;\n      if (excellentCount > 0 || goodCount > 0) {\n        summary += ` ${excellentCount} papers scored excellent (8.5+), and ${goodCount} scored good (7.0+).`;\n      }\n    }\n  }\n  \n  return summary;\n}\n\nexport async function generateBlogContent(papers, options = {}) {\n  const {\n    title = 'AI Research Papers Daily',\n    description = 'Latest advances in artificial intelligence and computer vision research',\n    showFullAnalysis = false,\n    maxPapers = 10  // \u6539\u4E3A\u663E\u793A10\u7BC7\u8BBA\u6587\n  } = options;\n  \n  try {\n    // Use scoring to filter and get top papers\n    const topPapers = filterAndSortPapers(papers, {\n      minScore: 6.0,\n      maxPapers: maxPapers,\n      minRecencyScore: 3.0,\n      daysAgoLimit: 90,\n      ensureBothSources: true  // \u786E\u4FDD\u4ECE\u4E24\u4E2A\u6765\u6E90\u5404\u90095\u7BC7\n    });\n    \n    const sortedPapers = topPapers; // Already filtered and sorted\n    \n    let html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${title}</title>\n    <meta name=\"description\" content=\"${description}\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        .hero-section {\n            background: rgba(255, 255, 255, 0.1);\n            backdrop-filter: blur(10px);\n            border-radius: 20px;\n            padding: 3rem 2rem;\n            margin: 2rem 0;\n            color: white;\n            text-align: center;\n        }\n        .paper-card {\n            background: white;\n            border-radius: 15px;\n            padding: 1.5rem;\n            margin-bottom: 1.5rem;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n        .paper-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);\n        }\n        .paper-title {\n            color: #2c3e50;\n            font-weight: 600;\n            margin-bottom: 0.5rem;\n            font-size: 1.2rem;\n        }\n        .paper-authors {\n            color: #7f8c8d;\n            font-size: 0.9rem;\n            margin-bottom: 1rem;\n        }\n        .paper-abstract {\n            color: #34495e;\n            line-height: 1.6;\n            margin-bottom: 1rem;\n        }\n        .paper-meta {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 0.5rem;\n        }\n        .category-badge {\n            background: linear-gradient(45deg, #667eea, #764ba2);\n            color: white;\n            padding: 0.25rem 0.75rem;\n            border-radius: 20px;\n            font-size: 0.8rem;\n            font-weight: 500;\n        }\n        .relevance-score {\n            background: #27ae60;\n            color: white;\n            padding: 0.25rem 0.5rem;\n            border-radius: 15px;\n            font-size: 0.8rem;\n        }\n        .keywords {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 0.5rem;\n            margin-top: 1rem;\n        }\n        .keyword-tag {\n            background: #ecf0f1;\n            color: #2c3e50;\n            padding: 0.25rem 0.5rem;\n            border-radius: 12px;\n            font-size: 0.75rem;\n        }\n        .analysis-section {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 1rem;\n            margin-top: 1rem;\n            border-left: 4px solid #667eea;\n        }\n        .source-icon {\n            margin-right: 0.5rem;\n        }\n        .arxiv-icon { color: #b31b1b; }\n        .huggingface-icon { color: #ffd700; }\n        .stats-section {\n            background: rgba(255, 255, 255, 0.9);\n            border-radius: 15px;\n            padding: 2rem;\n            margin: 2rem 0;\n            text-align: center;\n        }\n        .stat-item {\n            margin: 1rem;\n        }\n        .stat-number {\n            font-size: 2rem;\n            font-weight: bold;\n            color: #667eea;\n        }\n        .stat-label {\n            color: #7f8c8d;\n            font-size: 0.9rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"hero-section\">\n            <h1 class=\"display-4 mb-3\">\n                <i class=\"fas fa-graduation-cap me-3\"></i>${title}\n            </h1>\n            <p class=\"lead\">${description}</p>\n            <p class=\"mb-0\">\n                <i class=\"fas fa-calendar-alt me-2\"></i>\n                Updated: ${formatDate(new Date().toISOString().split('T')[0])}\n            </p>\n        </div>\n        \n        <div class=\"stats-section\">\n            <div class=\"row\">\n                <div class=\"col-md-3 stat-item\">\n                    <div class=\"stat-number\">${sortedPapers.length}</div>\n                    <div class=\"stat-label\">Top Papers</div>\n                </div>\n                <div class=\"col-md-3 stat-item\">\n                    <div class=\"stat-number\">${new Set(sortedPapers.map(p => p.analysis?.category || p.category || 'other')).size}</div>\n                    <div class=\"stat-label\">Categories</div>\n                </div>\n                <div class=\"col-md-3 stat-item\">\n                    <div class=\"stat-number\">${sortedPapers.filter(p => p.source === 'arxiv').length}</div>\n                    <div class=\"stat-label\">arXiv Papers</div>\n                </div>\n                <div class=\"col-md-3 stat-item\">\n                    <div class=\"stat-number\">${sortedPapers.filter(p => p.source === 'huggingface').length}</div>\n                    <div class=\"stat-label\">HuggingFace Papers</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <div class=\"col-12\">\n                <h2 class=\"text-white mb-4\">\n                    <i class=\"fas fa-fire me-2\"></i>Today's Top Papers\n                </h2>\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            ${sortedPapers.map(paper => generatePaperCard(paper, showFullAnalysis)).join('')}\n        </div>\n        \n        <footer class=\"text-center text-white py-4 mt-5\">\n            <p class=\"mb-0\">\n                <i class=\"fas fa-robot me-2\"></i>\n                Curated by PaperDog AI \u2022 \n                <i class=\"fas fa-code me-1\"></i>\n                Built with Cloudflare Workers\n            </p>\n        </footer>\n    </div>\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>`;\n    \n    return html;\n    \n  } catch (error) {\n    logger.error('Failed to generate blog content:', error);\n    throw new AppError(`Failed to generate blog content: ${error.message}`);\n  }\n}\n\nfunction generatePaperCard(paper, showFullAnalysis = false) {\n  const sourceIcon = paper.source === 'arxiv' ? 'arxiv-icon' : 'huggingface-icon';\n  const sourceName = paper.source === 'arxiv' ? 'arXiv' : 'HuggingFace';\n  const relevanceScore = paper.analysis?.relevance_score || 5;\n  const category = paper.analysis?.category || paper.category || 'other';\n  const keywords = paper.analysis?.keywords || [];\n  \n  // Enhanced scoring information\n  const totalScore = paper.scoring?.total_score || relevanceScore;\n  const recencyScore = paper.scoring?.recency_score || 5;\n  const isTopPaper = paper.scoring && totalScore >= 7.0;\n  \n  // Check for Chinese translation\n  const hasChineseTranslation = paper.analysis?.chinese_introduction;\n  \n  let analysisContent = '';\n  if (showFullAnalysis && paper.analysis) {\n    analysisContent = `\n        <div class=\"analysis-section\">\n            <h6 class=\"mb-2\"><i class=\"fas fa-brain me-2\"></i>AI Analysis</h6>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <strong>Introduction:</strong>\n                    <p class=\"small\">${paper.analysis.introduction || 'Not available'}</p>\n                </div>\n                <div class=\"col-md-6\">\n                    <strong>Innovations:</strong>\n                    <p class=\"small\">${paper.analysis.innovations || 'Not available'}</p>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <strong>Results:</strong>\n                    <p class=\"small\">${paper.analysis.experiments || 'Not available'}</p>\n                </div>\n                <div class=\"col-md-6\">\n                    <strong>Insights:</strong>\n                    <p class=\"small\">${paper.analysis.insights || 'Not available'}</p>\n                </div>\n            </div>\n            ${hasChineseTranslation ? `\n            <hr class=\"my-3\">\n            <h6 class=\"mb-2\"><i class=\"fas fa-language me-2\"></i>\u4E2D\u6587\u5206\u6790 (Chinese Analysis)</h6>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <strong>\u4E2D\u6587\u4ECB\u7ECD:</strong>\n                    <p class=\"small\">${paper.analysis.chinese_introduction || '\u7FFB\u8BD1\u4E0D\u53EF\u7528'}</p>\n                </div>\n                <div class=\"col-md-6\">\n                    <strong>\u4E2D\u6587\u521B\u65B0\u70B9:</strong>\n                    <p class=\"small\">${paper.analysis.chinese_innovations || '\u7FFB\u8BD1\u4E0D\u53EF\u7528'}</p>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <strong>\u4E2D\u6587\u5B9E\u9A8C\u7ED3\u679C:</strong>\n                    <p class=\"small\">${paper.analysis.chinese_experiments || '\u7FFB\u8BD1\u4E0D\u53EF\u7528'}</p>\n                </div>\n                <div class=\"col-md-6\">\n                    <strong>\u4E2D\u6587\u89C1\u89E3:</strong>\n                    <p class=\"small\">${paper.analysis.chinese_insights || '\u7FFB\u8BD1\u4E0D\u53EF\u7528'}</p>\n                </div>\n            </div>\n            ` : ''}\n        </div>\n    `;\n  }\n  \n  return `\n        <div class=\"col-lg-6 mb-4\">\n            <div class=\"paper-card ${isTopPaper ? 'border border-warning border-2' : ''}\">\n                ${isTopPaper ? '<div class=\"position-absolute top-0 end-0 m-2\"><span class=\"badge bg-warning text-dark\"><i class=\"fas fa-trophy me-1\"></i>Top Paper</span></div>' : ''}\n                <div class=\"paper-title\">\n                    <i class=\"fas fa-file-alt source-icon ${sourceIcon}\"></i>\n                    <a href=\"${paper.url}\" target=\"_blank\" class=\"text-decoration-none\">${paper.title}</a>\n                </div>\n                \n                <div class=\"paper-authors\">\n                    <i class=\"fas fa-users me-2\"></i>\n                    ${paper.authors ? paper.authors.slice(0, 3).join(', ') + (paper.authors.length > 3 ? ' et al.' : '') : 'Unknown authors'}\n                </div>\n                \n                <div class=\"paper-abstract\">\n                    ${paper.abstract ? paper.abstract.substring(0, 200) + '...' : 'No abstract available'}\n                </div>\n                \n                <div class=\"paper-meta\">\n                    <div>\n                        <span class=\"category-badge\">${category.replace('_', ' ')}</span>\n                        <span class=\"relevance-score\" style=\"background: ${getScoreColor(totalScore)};\">\n                            <i class=\"fas fa-star me-1\"></i>${totalScore.toFixed(1)}/10\n                        </span>\n                        ${paper.scoring ? `\n                        <span class=\"recency-score\" style=\"background: #17a2b8; color: white; padding: 0.25rem 0.5rem; border-radius: 15px; font-size: 0.8rem;\">\n                            <i class=\"fas fa-clock me-1\"></i>${recencyScore.toFixed(1)}\n                        </span>\n                        ` : ''}\n                        ${hasChineseTranslation ? `\n                        <span class=\"badge bg-info ms-1\">\n                            <i class=\"fas fa-language me-1\"></i>\u4E2D\u6587\n                        </span>\n                        ` : ''}\n                    </div>\n                    <div class=\"text-muted small\">\n                        <i class=\"fas fa-external-link-alt me-1\"></i>\n                        ${sourceName}\n                    </div>\n                </div>\n                \n                ${analysisContent}\n                \n                ${keywords.length > 0 ? `\n                <div class=\"keywords\">\n                    ${keywords.slice(0, 5).map(keyword => \n                        `<span class=\"keyword-tag\">${keyword}</span>`\n                    ).join('')}\n                </div>\n                ` : ''}\n                \n                <div class=\"mt-3\">\n                    <a href=\"${paper.url}\" target=\"_blank\" class=\"btn btn-outline-primary btn-sm me-2\">\n                        <i class=\"fas fa-external-link-alt me-1\"></i>View Paper\n                    </a>\n                    ${paper.pdf_url ? `\n                    <a href=\"${paper.pdf_url}\" target=\"_blank\" class=\"btn btn-outline-danger btn-sm\">\n                        <i class=\"fas fa-file-pdf me-1\"></i>PDF\n                    </a>\n                    ` : ''}\n                </div>\n            </div>\n        </div>\n    `;\n}\n\nexport function generateRSSFeed(papers, options = {}) {\n  const {\n    title = 'PaperDog - AI Papers Daily',\n    description = 'Daily curated AI and computer vision research papers',\n    link = 'https://paperdog.org',\n    maxItems = 20\n  } = options;\n  \n  const sortedPapers = sortPapersByDate(papers).slice(0, maxItems);\n  \n  const items = sortedPapers.map(paper => {\n    const pubDate = new Date(paper.published || paper.scraped_at).toUTCString();\n    const description = `\n        <strong>Authors:</strong> ${paper.authors ? paper.authors.join(', ') : 'Unknown'}<br>\n        <strong>Category:</strong> ${paper.analysis?.category || paper.category || 'other'}<br>\n        <strong>Relevance Score:</strong> ${paper.analysis?.relevance_score || 5}/10<br><br>\n        ${paper.abstract ? paper.abstract.substring(0, 500) + '...' : 'No abstract available'}\n        ${paper.analysis?.keywords ? '<br><br><strong>Keywords:</strong> ' + paper.analysis.keywords.join(', ') : ''}\n    `;\n    \n    return `\n        <item>\n            <title><![CDATA[${paper.title}]]></title>\n            <description><![CDATA[${description}]]></description>\n            <link>${paper.url}</link>\n            <guid isPermaLink=\"false\">${paper.id}</guid>\n            <pubDate>${pubDate}</pubDate>\n        </item>\n    `;\n  }).join('');\n  \n  const rss = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n    <channel>\n        <title>${title}</title>\n        <description>${description}</description>\n        <link>${link}</link>\n        <atom:link href=\"${link}/feed\" rel=\"self\" type=\"application/rss+xml\"/>\n        <language>en</language>\n        <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>\n        ${items}\n    </channel>\n</rss>`;\n  \n  return rss;\n}", "import { formatDate } from './utils.js';\n\nexport function getIndexHTML(papers = [], dailyReport = null) {\n  const recentPapers = papers.slice(0, 6);\n  const totalPapers = papers.length;\n  const categories = [...new Set(papers.map(p => p.analysis?.category || p.category || 'other'))];\n  \n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PaperDog - AI Papers Daily Digest</title>\n    <meta name=\"description\" content=\"Daily curated AI and computer vision research papers from arXiv and HuggingFace\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        :root {\n            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n        }\n        \n        body {\n            background: #f8f9fa;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .hero-section {\n            background: var(--primary-gradient);\n            color: white;\n            padding: 4rem 0;\n            margin-bottom: 3rem;\n        }\n        \n        .hero-title {\n            font-size: 3rem;\n            font-weight: 700;\n            margin-bottom: 1rem;\n        }\n        \n        .hero-subtitle {\n            font-size: 1.25rem;\n            opacity: 0.9;\n            margin-bottom: 2rem;\n        }\n        \n        .stats-card {\n            background: white;\n            border-radius: 15px;\n            padding: 2rem;\n            box-shadow: var(--card-shadow);\n            text-align: center;\n            margin-bottom: 2rem;\n            transition: transform 0.3s ease;\n        }\n        \n        .stats-card:hover {\n            transform: translateY(-5px);\n        }\n        \n        .stats-number {\n            font-size: 2.5rem;\n            font-weight: bold;\n            color: #667eea;\n            margin-bottom: 0.5rem;\n        }\n        \n        .paper-card {\n            background: white;\n            border-radius: 15px;\n            padding: 1.5rem;\n            margin-bottom: 1.5rem;\n            box-shadow: var(--card-shadow);\n            transition: all 0.3s ease;\n            height: 100%;\n        }\n        \n        .paper-card:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);\n        }\n        \n        .paper-title {\n            color: #2c3e50;\n            font-weight: 600;\n            margin-bottom: 0.75rem;\n            font-size: 1.1rem;\n            line-height: 1.4;\n        }\n        \n        .paper-title a {\n            color: inherit;\n            text-decoration: none;\n        }\n        \n        .paper-title a:hover {\n            color: #667eea;\n        }\n        \n        .paper-meta {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n            flex-wrap: wrap;\n            gap: 0.5rem;\n        }\n        \n        .source-badge {\n            font-size: 0.8rem;\n            padding: 0.25rem 0.75rem;\n            border-radius: 20px;\n            font-weight: 500;\n        }\n        \n        .arxiv-badge {\n            background: #dc3545;\n            color: white;\n        }\n        \n        .huggingface-badge {\n            background: #ffc107;\n            color: #212529;\n        }\n        \n        .category-badge {\n            background: var(--primary-gradient);\n            color: white;\n            padding: 0.25rem 0.75rem;\n            border-radius: 20px;\n            font-size: 0.8rem;\n            font-weight: 500;\n        }\n        \n        .relevance-score {\n            background: #28a745;\n            color: white;\n            padding: 0.25rem 0.5rem;\n            border-radius: 15px;\n            font-size: 0.8rem;\n        }\n        \n        .paper-abstract {\n            color: #6c757d;\n            line-height: 1.6;\n            margin-bottom: 1rem;\n            font-size: 0.9rem;\n        }\n        \n        .keywords {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 0.5rem;\n            margin-top: 1rem;\n        }\n        \n        .keyword-tag {\n            background: #e9ecef;\n            color: #495057;\n            padding: 0.25rem 0.5rem;\n            border-radius: 12px;\n            font-size: 0.75rem;\n        }\n        \n        .section-title {\n            font-size: 2rem;\n            font-weight: 600;\n            color: #2c3e50;\n            margin-bottom: 2rem;\n            text-align: center;\n        }\n        \n        .btn-primary-custom {\n            background: var(--primary-gradient);\n            border: none;\n            border-radius: 25px;\n            padding: 0.75rem 2rem;\n            font-weight: 500;\n            transition: all 0.3s ease;\n        }\n        \n        .btn-primary-custom:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n        }\n        \n        .footer {\n            background: #2c3e50;\n            color: white;\n            padding: 3rem 0 2rem;\n            margin-top: 5rem;\n        }\n        \n        .loading-spinner {\n            display: none;\n            text-align: center;\n            padding: 2rem;\n        }\n        \n        .feature-icon {\n            font-size: 3rem;\n            color: #667eea;\n            margin-bottom: 1rem;\n        }\n        \n        @media (max-width: 768px) {\n            .hero-title {\n                font-size: 2rem;\n            }\n            \n            .hero-subtitle {\n                font-size: 1rem;\n            }\n            \n            .paper-meta {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n        }\n    </style>\n</head>\n<body>\n    <!-- Hero Section -->\n    <section class=\"hero-section\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-lg-8 mx-auto text-center\">\n                    <h1 class=\"hero-title\">\n                        <i class=\"fas fa-graduation-cap me-3\"></i>PaperDog\n                    </h1>\n                    <p class=\"hero-subtitle\">\n                        Daily AI & Computer Vision Research Papers Digest\n                    </p>\n                    <p class=\"lead mb-4\">\n                        Curated from arXiv and HuggingFace with AI-powered analysis\n                    </p>\n                    <div class=\"d-flex justify-content-center gap-3\">\n                        <a href=\"#papers\" class=\"btn btn-light btn-lg\">\n                            <i class=\"fas fa-book-open me-2\"></i>Explore Papers\n                        </a>\n                        <a href=\"/api/papers\" class=\"btn btn-outline-light btn-lg\">\n                            <i class=\"fas fa-code me-2\"></i>API\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Stats Section -->\n    <section class=\"container mb-5\">\n        <div class=\"row\">\n            <div class=\"col-md-3\">\n                <div class=\"stats-card\">\n                    <div class=\"stats-number\">${totalPapers}</div>\n                    <div class=\"text-muted\">Total Papers</div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"stats-card\">\n                    <div class=\"stats-number\">${categories.length}</div>\n                    <div class=\"text-muted\">Categories</div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"stats-card\">\n                    <div class=\"stats-number\">${papers.filter(p => p.source === 'arxiv').length}</div>\n                    <div class=\"text-muted\">arXiv Papers</div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"stats-card\">\n                    <div class=\"stats-number\">${papers.filter(p => p.source === 'huggingface').length}</div>\n                    <div class=\"text-muted\">HuggingFace Papers</div>\n                </div>\n            </div>\n        </div>\n    </section>\n\n    <!-- Features Section -->\n    <section class=\"container mb-5\">\n        <div class=\"row\">\n            <div class=\"col-md-4 text-center mb-4\">\n                <div class=\"feature-icon\">\n                    <i class=\"fas fa-robot\"></i>\n                </div>\n                <h4>AI-Powered Analysis</h4>\n                <p>Advanced AI analyzes each paper for relevance, methodology, and impact</p>\n            </div>\n            <div class=\"col-md-4 text-center mb-4\">\n                <div class=\"feature-icon\">\n                    <i class=\"fas fa-sync-alt\"></i>\n                </div>\n                <h4>Daily Updates</h4>\n                <p>Automatically updated every day with the latest research papers</p>\n            </div>\n            <div class=\"col-md-4 text-center mb-4\">\n                <div class=\"feature-icon\">\n                    <i class=\"fas fa-filter\"></i>\n                </div>\n                <h4>Smart Curation</h4>\n                <p>Intelligent filtering ensures only high-quality, relevant papers</p>\n            </div>\n        </div>\n    </section>\n\n    <!-- Recent Papers Section -->\n    <section class=\"container mb-5\" id=\"papers\">\n        <h2 class=\"section-title\">\n            <i class=\"fas fa-fire me-2\"></i>Recent Papers\n        </h2>\n        \n        <div class=\"loading-spinner\" id=\"loadingSpinner\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n            </div>\n            <p class=\"mt-2\">Loading latest papers...</p>\n        </div>\n        \n        <div class=\"row\" id=\"papersContainer\">\n            ${recentPapers.map(paper => generatePaperCardHTML(paper)).join('')}\n        </div>\n        \n        ${recentPapers.length > 0 ? `\n        <div class=\"text-center mt-4\">\n            <a href=\"/archive\" class=\"btn btn-primary-custom\">\n                <i class=\"fas fa-archive me-2\"></i>View All Papers\n            </a>\n            <a href=\"/feed\" class=\"btn btn-outline-primary ms-2\">\n                <i class=\"fas fa-rss me-2\"></i>RSS Feed\n            </a>\n        </div>\n        ` : ''}\n    </section>\n\n    <!-- Daily Report Section -->\n    ${dailyReport ? `\n    <section class=\"container mb-5\">\n        <div class=\"card border-0 shadow-sm\">\n            <div class=\"card-body p-4\">\n                <h3 class=\"card-title\">\n                    <i class=\"fas fa-chart-line me-2\"></i>Daily Report - ${formatDate(dailyReport.date)}\n                </h3>\n                <p class=\"card-text\">${dailyReport.summary}</p>\n                <a href=\"/report/${dailyReport.date}\" class=\"btn btn-outline-primary\">\n                    <i class=\"fas fa-eye me-2\"></i>View Full Report\n                </a>\n            </div>\n        </div>\n    </section>\n    ` : ''}\n\n    <!-- Footer -->\n    <footer class=\"footer\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <h5><i class=\"fas fa-graduation-cap me-2\"></i>PaperDog</h5>\n                    <p>Your daily source for AI and computer vision research papers.</p>\n                </div>\n                <div class=\"col-md-4\">\n                    <h5>Quick Links</h5>\n                    <ul class=\"list-unstyled\">\n                        <li><a href=\"/\" class=\"text-white-50\">Home</a></li>\n                        <li><a href=\"/archive\" class=\"text-white-50\">Archive</a></li>\n                        <li><a href=\"/api/papers\" class=\"text-white-50\">API</a></li>\n                        <li><a href=\"/feed\" class=\"text-white-50\">RSS Feed</a></li>\n                    </ul>\n                </div>\n                <div class=\"col-md-4\">\n                    <h5>Connect</h5>\n                    <p>\n                        <a href=\"https://paperdog.org\" class=\"text-white-50 me-3\">\n                            <i class=\"fas fa-globe\"></i>\n                        </a>\n                        <a href=\"/feed\" class=\"text-white-50 me-3\">\n                            <i class=\"fas fa-rss\"></i>\n                        </a>\n                        <a href=\"mailto:contact@paperdog.org\" class=\"text-white-50\">\n                            <i class=\"fas fa-envelope\"></i>\n                        </a>\n                    </p>\n                    <p class=\"text-white-50 small\">\n                        Built with \u2764\uFE0F using Cloudflare Workers\n                    </p>\n                </div>\n            </div>\n            <hr class=\"my-4 bg-white\">\n            <div class=\"text-center\">\n                <p class=\"mb-0 text-white-50\">&copy; 2024 PaperDog. All rights reserved.</p>\n            </div>\n        </div>\n    </footer>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        // Simple search functionality\n        document.addEventListener('DOMContentLoaded', function() {\n            const searchInput = document.createElement('input');\n            searchInput.type = 'text';\n            searchInput.className = 'form-control mb-4';\n            searchInput.placeholder = 'Search papers...';\n            searchInput.id = 'searchInput';\n            \n            const papersSection = document.querySelector('#papers');\n            if (papersSection) {\n                papersSection.insertBefore(searchInput, papersSection.firstChild.nextSibling);\n            }\n            \n            searchInput.addEventListener('input', function(e) {\n                const searchTerm = e.target.value.toLowerCase();\n                const paperCards = document.querySelectorAll('.paper-card');\n                \n                paperCards.forEach(card => {\n                    const text = card.textContent.toLowerCase();\n                    if (text.includes(searchTerm)) {\n                        card.style.display = 'block';\n                    } else {\n                        card.style.display = 'none';\n                    }\n                });\n            });\n        });\n    </script>\n</body>\n</html>`;\n}\n\nfunction generatePaperCardHTML(paper) {\n  const sourceClass = paper.source === 'arxiv' ? 'arxiv-badge' : 'huggingface-badge';\n  const sourceIcon = paper.source === 'arxiv' ? 'fas fa-university' : 'fas fa-heart';\n  const relevanceScore = paper.analysis?.relevance_score || 5;\n  const category = paper.analysis?.category || paper.category || 'other';\n  const keywords = paper.analysis?.keywords || [];\n  \n  return `\n        <div class=\"col-lg-6 col-xl-4 mb-4\">\n            <div class=\"paper-card\">\n                <div class=\"paper-title\">\n                    <a href=\"${paper.url}\" target=\"_blank\">${paper.title}</a>\n                </div>\n                \n                <div class=\"paper-meta\">\n                    <div>\n                        <span class=\"source-badge ${sourceClass}\">\n                            <i class=\"${sourceIcon} me-1\"></i>${paper.source}\n                        </span>\n                    </div>\n                    <div>\n                        <span class=\"relevance-score\">\n                            <i class=\"fas fa-star me-1\"></i>${relevanceScore}/10\n                        </span>\n                    </div>\n                </div>\n                \n                <div class=\"paper-abstract\">\n                    ${paper.abstract ? paper.abstract.substring(0, 150) + '...' : 'No abstract available'}\n                </div>\n                \n                <div class=\"mb-2\">\n                    <span class=\"category-badge\">${category.replace('_', ' ')}</span>\n                </div>\n                \n                ${keywords.length > 0 ? `\n                <div class=\"keywords\">\n                    ${keywords.slice(0, 3).map(keyword => \n                        `<span class=\"keyword-tag\">${keyword}</span>`\n                    ).join('')}\n                </div>\n                ` : ''}\n                \n                <div class=\"mt-3\">\n                    <a href=\"${paper.url}\" target=\"_blank\" class=\"btn btn-outline-primary btn-sm me-2\">\n                        <i class=\"fas fa-external-link-alt me-1\"></i>View Paper\n                    </a>\n                    ${paper.pdf_url ? `\n                    <a href=\"${paper.pdf_url}\" target=\"_blank\" class=\"btn btn-outline-danger btn-sm\">\n                        <i class=\"fas fa-file-pdf me-1\"></i>PDF\n                    </a>\n                    ` : ''}\n                </div>\n            </div>\n        </div>\n    `;\n}\n\nexport function getReportHTML(report) {\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Daily Report - ${report.date} | PaperDog</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        body { background: #f8f9fa; }\n        .report-header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 3rem 0;\n            margin-bottom: 2rem;\n        }\n        .paper-summary {\n            background: white;\n            border-radius: 10px;\n            padding: 1.5rem;\n            margin-bottom: 1.5rem;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"report-header\">\n        <div class=\"container\">\n            <h1 class=\"display-4\">\n                <i class=\"fas fa-chart-line me-3\"></i>Daily Report\n            </h1>\n            <p class=\"lead\">${report.date}</p>\n            <p>${report.summary}</p>\n        </div>\n    </div>\n    \n    <div class=\"container\">\n        <div class=\"row mb-4\">\n            <div class=\"col-md-3\">\n                <div class=\"text-center\">\n                    <h3 class=\"text-primary\">${report.total_papers}</h3>\n                    <p class=\"text-muted\">Total Papers</p>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"text-center\">\n                    <h3 class=\"text-success\">${Object.keys(report.categories).length}</h3>\n                    <p class=\"text-muted\">Categories</p>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"text-center\">\n                    <h3 class=\"text-warning\">${report.top_papers.length}</h3>\n                    <p class=\"text-muted\">Top Papers</p>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"text-center\">\n                    <h3 class=\"text-info\">${report.papers.filter(p => p.source === 'arxiv').length}</h3>\n                    <p class=\"text-muted\">arXiv Papers</p>\n                </div>\n            </div>\n        </div>\n        \n        <h2 class=\"mb-4\">Top Papers Today</h2>\n        <div class=\"row\">\n            ${report.top_papers.map(paper => `\n                <div class=\"col-lg-6 mb-4\">\n                    <div class=\"paper-summary\">\n                        <h5>${paper.title}</h5>\n                        <p class=\"text-muted\">\n                            <strong>Authors:</strong> ${paper.authors ? paper.authors.slice(0, 3).join(', ') + (paper.authors.length > 3 ? ' et al.' : '') : 'Unknown'}\n                        </p>\n                        <p><strong>Category:</strong> ${paper.analysis?.category || paper.category || 'other'}</p>\n                        <p><strong>Relevance:</strong> ${paper.analysis?.relevance_score || 5}/10</p>\n                        <p><strong>Abstract:</strong> ${paper.abstract ? paper.abstract.substring(0, 200) + '...' : 'No abstract available'}</p>\n                        <a href=\"${paper.url}\" target=\"_blank\" class=\"btn btn-primary btn-sm\">\n                            <i class=\"fas fa-external-link-alt me-1\"></i>View Paper\n                        </a>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n        \n        <div class=\"text-center mt-4\">\n            <a href=\"/\" class=\"btn btn-secondary\">\n                <i class=\"fas fa-arrow-left me-2\"></i>Back to Home\n            </a>\n        </div>\n    </div>\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>`;\n}\n\nexport function getArchiveHTML(papers, options = {}) {\n  const { page = 1, limit = 12, category = null, search = null } = options;\n  \n  let filteredPapers = papers;\n  \n  if (category) {\n    filteredPapers = filteredPapers.filter(p => \n      (p.analysis?.category || p.category || 'other') === category\n    );\n  }\n  \n  if (search) {\n    const searchLower = search.toLowerCase();\n    filteredPapers = filteredPapers.filter(p => \n      p.title.toLowerCase().includes(searchLower) ||\n      p.abstract.toLowerCase().includes(searchLower) ||\n      (p.authors && p.authors.some(a => a.toLowerCase().includes(searchLower)))\n    );\n  }\n  \n  const totalPages = Math.ceil(filteredPapers.length / limit);\n  const startIndex = (page - 1) * limit;\n  const endIndex = startIndex + limit;\n  const paginatedPapers = filteredPapers.slice(startIndex, endIndex);\n  \n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Paper Archive - PaperDog</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        body { background: #f8f9fa; }\n        .archive-header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 3rem 0;\n            margin-bottom: 2rem;\n        }\n        .filter-section {\n            background: white;\n            border-radius: 10px;\n            padding: 1.5rem;\n            margin-bottom: 2rem;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"archive-header\">\n        <div class=\"container\">\n            <h1 class=\"display-4\">\n                <i class=\"fas fa-archive me-3\"></i>Paper Archive\n            </h1>\n            <p class=\"lead\">Browse through ${filteredPapers.length} research papers</p>\n        </div>\n    </div>\n    \n    <div class=\"container\">\n        <div class=\"filter-section\">\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Search papers...\" \n                           value=\"${search || ''}\" id=\"searchInput\">\n                </div>\n                <div class=\"col-md-3\">\n                    <select class=\"form-select\" id=\"categoryFilter\">\n                        <option value=\"\">All Categories</option>\n                        <option value=\"computer_vision\" ${category === 'computer_vision' ? 'selected' : ''}>Computer Vision</option>\n                        <option value=\"machine_learning\" ${category === 'machine_learning' ? 'selected' : ''}>Machine Learning</option>\n                        <option value=\"natural_language_processing\" ${category === 'natural_language_processing' ? 'selected' : ''}>NLP</option>\n                        <option value=\"reinforcement_learning\" ${category === 'reinforcement_learning' ? 'selected' : ''}>Reinforcement Learning</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\">\n                    <button class=\"btn btn-primary w-100\" onclick=\"applyFilters()\">\n                        <i class=\"fas fa-filter me-1\"></i>Filter\n                    </button>\n                </div>\n                <div class=\"col-md-3\">\n                    <a href=\"/\" class=\"btn btn-outline-secondary w-100\">\n                        <i class=\"fas fa-home me-1\"></i>Back to Home\n                    </a>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            ${paginatedPapers.map(paper => generatePaperCardHTML(paper)).join('')}\n        </div>\n        \n        ${totalPages > 1 ? `\n        <nav aria-label=\"Page navigation\" class=\"mt-4\">\n            <ul class=\"pagination justify-content-center\">\n                ${page > 1 ? `\n                <li class=\"page-item\">\n                    <a class=\"page-link\" href=\"?page=${page-1}&category=${category || ''}&search=${search || ''}\">Previous</a>\n                </li>\n                ` : ''}\n                \n                ${Array.from({length: Math.min(5, totalPages)}, (_, i) => {\n                    const pageNum = Math.max(1, Math.min(totalPages - 4, page - 2)) + i;\n                    return `\n                    <li class=\"page-item ${pageNum === page ? 'active' : ''}\">\n                        <a class=\"page-link\" href=\"?page=${pageNum}&category=${category || ''}&search=${search || ''}\">${pageNum}</a>\n                    </li>\n                    `;\n                }).join('')}\n                \n                ${page < totalPages ? `\n                <li class=\"page-item\">\n                    <a class=\"page-link\" href=\"?page=${page+1}&category=${category || ''}&search=${search || ''}\">Next</a>\n                </li>\n                ` : ''}\n            </ul>\n        </nav>\n        ` : ''}\n    </div>\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        function applyFilters() {\n            const search = document.getElementById('searchInput').value;\n            const category = document.getElementById('categoryFilter').value;\n            const params = new URLSearchParams();\n            \n            if (search) params.append('search', search);\n            if (category) params.append('category', category);\n            \n            window.location.search = params.toString();\n        }\n        \n        document.getElementById('searchInput').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                applyFilters();\n            }\n        });\n    </script>\n</body>\n</html>`;\n}", "import { AppError, TOPIC_CATEGORIES } from './config.js';\nimport { validateDate, generatePaperId, sortPapersByDate, enrichPapersWithViews } from './utils.js';\n\nconst logger = {\n  info: (msg, data = {}) => console.log(`[ARCHIVE] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[ARCHIVE] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[ARCHIVE] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[ARCHIVE] ${msg}`, data)\n};\n\n// Archive storage keys\nconst ARCHIVE_KEYS = {\n  daily: (date) => `archive_${date}`,\n  index: 'archive_index',\n  stats: 'archive_stats',\n  search_cache: (hash) => `archive_search_${hash}`,\n  export_cache: (jobId) => `export_${jobId}`\n};\n\n// Archive entry structure\nfunction createArchiveEntry(date, papers, metadata = {}) {\n  const categories = {};\n  const sources = {};\n  const scores = [];\n  const keywords = new Set();\n\n  papers.forEach(paper => {\n    // Count categories\n    const category = paper.analysis?.category || paper.category || 'other';\n    categories[category] = (categories[category] || 0) + 1;\n\n    // Count sources\n    const source = paper.source || 'unknown';\n    sources[source] = (sources[source] || 0) + 1;\n\n    // Collect scores\n    const score = paper.analysis?.relevance_score || 5;\n    scores.push(score);\n\n    // Collect keywords\n    (paper.analysis?.keywords || []).forEach(keyword => keywords.add(keyword));\n  });\n\n  const avgScore = scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : 0;\n\n  return {\n    date,\n    papers: papers.map(paper => ({\n      id: paper.id,\n      title: paper.title,\n      authors: paper.authors,\n      abstract: paper.abstract,\n      published: paper.published,\n      source: paper.source,\n      url: paper.url,\n      primary_category: paper.primary_category,\n      analysis: paper.analysis,\n      scraped_at: paper.scraped_at,\n      views: paper.views || 0, // Include view count\n      archive_metadata: {\n        archived_at: new Date().toISOString(),\n        original_id: paper.id,\n        views_at_archive: paper.views || 0 // Track views at time of archiving\n      }\n    })),\n    metadata: {\n      total_papers: papers.length,\n      categories,\n      sources,\n      average_score: Math.round(avgScore * 10) / 10,\n      unique_keywords: Array.from(keywords).slice(0, 50),\n      total_views: papers.reduce((sum, paper) => sum + (paper.views || 0), 0), // Total views for all papers\n      created_at: new Date().toISOString(),\n      ...metadata\n    }\n  };\n}\n\n// Create or update archive index\nasync function updateArchiveIndex(env, date, stats) {\n  try {\n    const existingIndex = await getArchiveIndex(env);\n    const index = existingIndex || {\n      available_dates: [],\n      date_stats: {},\n      last_updated: null\n    };\n\n    // Add date if not exists\n    if (!index.available_dates.includes(date)) {\n      index.available_dates.push(date);\n      index.available_dates.sort().reverse(); // Most recent first\n    }\n\n    // Update date stats\n    index.date_stats[date] = {\n      total_papers: stats.total_papers,\n      average_score: stats.average_score,\n      categories: stats.categories,\n      sources: stats.sources,\n      updated_at: new Date().toISOString()\n    };\n\n    index.last_updated = new Date().toISOString();\n\n    // Store updated index\n    await env.PAPERS.put(ARCHIVE_KEYS.index, JSON.stringify(index), {\n      expirationTtl: 365 * 24 * 60 * 60 // 1 year\n    });\n\n    return index;\n  } catch (error) {\n    logger.error('Error updating archive index:', error);\n    throw new AppError('Failed to update archive index', 500);\n  }\n}\n\n// Get archive index\nexport async function getArchiveIndex(env) {\n  try {\n    const cached = await env.PAPERS.get(ARCHIVE_KEYS.index);\n    if (cached) {\n      return JSON.parse(cached);\n    }\n  } catch (error) {\n    logger.error('Error reading archive index:', error);\n  }\n  return null;\n}\n\n// Archive papers for a specific date\nexport async function archivePapers(date, papers, env, metadata = {}) {\n  try {\n    validateDate(date);\n\n    if (!papers || papers.length === 0) {\n      throw new AppError('No papers provided for archiving', 400);\n    }\n\n    logger.info(`Archiving ${papers.length} papers for date ${date}`);\n\n    // Enrich papers with view counts before archiving\n    const papersWithViews = await enrichPapersWithViews(papers, env);\n\n    // Create archive entry\n    const archiveEntry = createArchiveEntry(date, papersWithViews, metadata);\n\n    // Store archive entry with long TTL (1 year)\n    await env.PAPERS.put(ARCHIVE_KEYS.daily(date), JSON.stringify(archiveEntry), {\n      expirationTtl: 365 * 24 * 60 * 60 // 1 year\n    });\n\n    // Update archive index\n    await updateArchiveIndex(env, date, archiveEntry.metadata);\n\n    logger.info(`Successfully archived ${papers.length} papers for ${date}`);\n\n    return {\n      success: true,\n      date,\n      papers_archived: papers.length,\n      metadata: archiveEntry.metadata\n    };\n  } catch (error) {\n    logger.error(`Error archiving papers for ${date}:`, error);\n    throw error instanceof AppError ? error : new AppError(`Archive failed: ${error.message}`, 500);\n  }\n}\n\n// Get archived papers for a specific date\nexport async function getArchivedPapers(date, env) {\n  try {\n    validateDate(date);\n\n    const cached = await env.PAPERS.get(ARCHIVE_KEYS.daily(date));\n    if (!cached) {\n      return null;\n    }\n\n    const archiveEntry = JSON.parse(cached);\n    return archiveEntry;\n  } catch (error) {\n    logger.error(`Error retrieving archived papers for ${date}:`, error);\n    throw new AppError(`Failed to retrieve archive: ${error.message}`, 500);\n  }\n}\n\n// Get archived papers for a date range\nexport async function getArchivedPapersByRange(startDate, endDate, env) {\n  try {\n    validateDate(startDate);\n    validateDate(endDate);\n\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n\n    if (start > end) {\n      throw new AppError('Start date must be before or equal to end date', 400);\n    }\n\n    // Get archive index to check available dates\n    const index = await getArchiveIndex(env);\n    if (!index) {\n      return [];\n    }\n\n    const availableDates = index.available_dates.filter(date => {\n      const dateObj = new Date(date);\n      return dateObj >= start && dateObj <= end;\n    });\n\n    if (availableDates.length === 0) {\n      return [];\n    }\n\n    // Fetch archives for available dates in parallel\n    const archives = await Promise.all(\n      availableDates.map(date => getArchivedPapers(date, env))\n    );\n\n    return archives.filter(archive => archive !== null);\n  } catch (error) {\n    logger.error(`Error retrieving archived papers for range ${startDate} to ${endDate}:`, error);\n    throw error instanceof AppError ? error : new AppError(`Failed to retrieve archive range: ${error.message}`, 500);\n  }\n}\n\n// Search within archived papers\nexport async function searchArchivedPapers(query, filters = {}, env) {\n  try {\n    if (!query || query.trim().length < 2) {\n      throw new AppError('Search query must be at least 2 characters', 400);\n    }\n\n    const { startDate, endDate, category, minScore, maxResults = 50 } = filters;\n\n    // Get date range\n    let archives = [];\n    if (startDate && endDate) {\n      archives = await getArchivedPapersByRange(startDate, endDate, env);\n    } else {\n      // Get last 30 days if no date range specified\n      const index = await getArchiveIndex(env);\n      if (index && index.available_dates.length > 0) {\n        const recentDates = index.available_dates.slice(0, 30);\n        archives = await Promise.all(\n          recentDates.map(date => getArchivedPapers(date, env))\n        );\n        archives = archives.filter(archive => archive !== null);\n      }\n    }\n\n    if (archives.length === 0) {\n      return {\n        query,\n        results: [],\n        total_results: 0,\n        archives_searched: 0\n      };\n    }\n\n    const searchTerms = query.toLowerCase().split(' ').filter(term => term.length > 2);\n    const results = [];\n\n    archives.forEach(archive => {\n      archive.papers.forEach(paper => {\n        // Apply filters\n        if (category) {\n          const paperCategory = paper.analysis?.category || paper.category || 'other';\n          if (paperCategory.toLowerCase() !== category.toLowerCase()) {\n            return;\n          }\n        }\n\n        if (minScore) {\n          const score = paper.analysis?.relevance_score || 5;\n          if (score < minScore) {\n            return;\n          }\n        }\n\n        // Search in paper content\n        const searchableText = [\n          paper.title,\n          paper.abstract,\n          paper.authors?.join(' '),\n          paper.analysis?.keywords?.join(' '),\n          paper.analysis?.introduction,\n          paper.analysis?.innovations\n        ].filter(Boolean).join(' ').toLowerCase();\n\n        const matches = searchTerms.every(term => searchableText.includes(term));\n\n        if (matches) {\n          results.push({\n            ...paper,\n            archive_date: archive.date,\n            search_relevance: calculateSearchRelevance(paper, searchTerms)\n          });\n        }\n      });\n    });\n\n    // Sort by relevance and score\n    results.sort((a, b) => {\n      const relevanceA = a.search_relevance;\n      const relevanceB = b.search_relevance;\n      const scoreA = a.analysis?.relevance_score || 5;\n      const scoreB = b.analysis?.relevance_score || 5;\n\n      if (relevanceB !== relevanceA) return relevanceB - relevanceA;\n      return scoreB - scoreA;\n    });\n\n    // Limit results\n    const limitedResults = results.slice(0, maxResults);\n\n    return {\n      query,\n      filters,\n      results: limitedResults,\n      total_results: results.length,\n      archives_searched: archives.length,\n      date_range: {\n        start: archives[0]?.date,\n        end: archives[archives.length - 1]?.date\n      }\n    };\n  } catch (error) {\n    logger.error('Error searching archived papers:', error);\n    throw error instanceof AppError ? error : new AppError(`Search failed: ${error.message}`, 500);\n  }\n}\n\n// Calculate search relevance score\nfunction calculateSearchRelevance(paper, searchTerms) {\n  let score = 0;\n  const title = paper.title.toLowerCase();\n  const abstract = paper.abstract.toLowerCase();\n  const keywords = (paper.analysis?.keywords || []).join(' ').toLowerCase();\n\n  searchTerms.forEach(term => {\n    // Title matches (highest weight)\n    if (title.includes(term)) score += 3;\n\n    // Keywords matches (high weight)\n    if (keywords.includes(term)) score += 2;\n\n    // Abstract matches (medium weight)\n    if (abstract.includes(term)) score += 1;\n  });\n\n  // Bonus for paper score\n  const paperScore = paper.analysis?.relevance_score || 5;\n  score += (paperScore - 5) * 0.5; // Normalize paper score impact\n\n  return score;\n}\n\n// Get archive statistics\nexport async function getArchiveStatistics(env) {\n  try {\n    const index = await getArchiveIndex(env);\n    if (!index) {\n      return {\n        total_archives: 0,\n        total_papers: 0,\n        date_range: null,\n        category_distribution: {},\n        source_distribution: {},\n        average_scores: {}\n      };\n    }\n\n    const stats = {\n      total_archives: index.available_dates.length,\n      total_papers: 0,\n      date_range: {\n        start: index.available_dates[index.available_dates.length - 1],\n        end: index.available_dates[0]\n      },\n      category_distribution: {},\n      source_distribution: {},\n      average_scores: {},\n      daily_averages: {}\n    };\n\n    // Aggregate statistics from date stats\n    Object.entries(index.date_stats).forEach(([date, dateStats]) => {\n      stats.total_papers += dateStats.total_papers;\n\n      // Aggregate categories\n      Object.entries(dateStats.categories).forEach(([category, count]) => {\n        stats.category_distribution[category] = (stats.category_distribution[category] || 0) + count;\n      });\n\n      // Aggregate sources\n      Object.entries(dateStats.sources).forEach(([source, count]) => {\n        stats.source_distribution[source] = (stats.source_distribution[source] || 0) + count;\n      });\n\n      // Store daily average\n      stats.daily_averages[date] = dateStats.average_score;\n    });\n\n    // Calculate overall average score\n    const scoreSum = Object.values(stats.daily_averages).reduce((a, b) => a + b, 0);\n    stats.overall_average_score = stats.total_archives > 0 ? scoreSum / stats.total_archives : 0;\n\n    return stats;\n  } catch (error) {\n    logger.error('Error getting archive statistics:', error);\n    throw new AppError(`Failed to get archive statistics: ${error.message}`, 500);\n  }\n}\n\n// Check if date has been archived\nexport async function isDateArchived(date, env) {\n  try {\n    validateDate(date);\n    const archive = await getArchivedPapers(date, env);\n    return archive !== null;\n  } catch (error) {\n    logger.error(`Error checking if date ${date} is archived:`, error);\n    return false;\n  }\n}\n\n// Get available archive dates\nexport async function getAvailableArchiveDates(env) {\n  try {\n    const index = await getArchiveIndex(env);\n    return index ? index.available_dates : [];\n  } catch (error) {\n    logger.error('Error getting available archive dates:', error);\n    return [];\n  }\n}\n\n// Clean up old archives (optional maintenance function)\nexport async function cleanupOldArchives(beforeDate, env) {\n  try {\n    validateDate(beforeDate);\n\n    const index = await getArchiveIndex(env);\n    if (!index) {\n      return { removed: 0 };\n    }\n\n    const cutoffDate = new Date(beforeDate);\n    const datesToRemove = index.available_dates.filter(date => new Date(date) < cutoffDate);\n\n    if (datesToRemove.length === 0) {\n      return { removed: 0 };\n    }\n\n    // Remove archive entries\n    await Promise.all(\n      datesToRemove.map(date => env.PAPERS.delete(ARCHIVE_KEYS.daily(date)))\n    );\n\n    // Update index\n    index.available_dates = index.available_dates.filter(date => !datesToRemove.includes(date));\n    datesToRemove.forEach(date => delete index.date_stats[date]);\n\n    await env.PAPERS.put(ARCHIVE_KEYS.index, JSON.stringify(index), {\n      expirationTtl: 365 * 24 * 60 * 60\n    });\n\n    logger.info(`Cleaned up ${datesToRemove.length} old archives before ${beforeDate}`);\n\n    return { removed: datesToRemove.length, dates_removed: datesToRemove };\n  } catch (error) {\n    logger.error('Error cleaning up old archives:', error);\n    throw new AppError(`Cleanup failed: ${error.message}`, 500);\n  }\n}\n\nexport {\n  ARCHIVE_KEYS\n};", "import { formatDate, formatBytes, sanitizeFilename } from './utils.js';\n\n// Enhanced archive HTML template with export functionality\nexport function generateEnhancedArchiveHTML(data) {\n  const {\n    papers = [],\n    availableDates = [],\n    statistics = null,\n    selectedDate = null,\n    filters = {},\n    pagination = {}\n  } = data;\n\n  const { category = null, search = null } = filters;\n  const { currentPage = 1, totalPages = 1, totalPapers = 0, hasNext = false, hasPrev = false } = pagination;\n\n  // Generate export URL parameters\n  const exportParams = new URLSearchParams();\n  if (selectedDate) exportParams.set('start_date', selectedDate);\n  if (selectedDate) exportParams.set('end_date', selectedDate);\n  if (category) exportParams.set('category', category);\n\n  const exportBaseUrl = `/api/archive/export?${exportParams.toString()}`;\n\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Paper Archive - PaperDog</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        :root {\n            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n            --border-radius: 12px;\n        }\n\n        body {\n            background: #f8f9fa;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        .archive-header {\n            background: var(--primary-gradient);\n            color: white;\n            padding: 3rem 0;\n            margin-bottom: 2rem;\n        }\n\n        .stats-card {\n            background: white;\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--card-shadow);\n            border: none;\n            transition: transform 0.2s ease;\n        }\n\n        .stats-card:hover {\n            transform: translateY(-2px);\n        }\n\n        .filter-section {\n            background: white;\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            margin-bottom: 2rem;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n        }\n\n        .export-panel {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            margin-bottom: 2rem;\n        }\n\n        .export-btn {\n            background: rgba(255, 255, 255, 0.2);\n            border: 2px solid rgba(255, 255, 255, 0.3);\n            color: white;\n            border-radius: 8px;\n            padding: 0.5rem 1rem;\n            margin: 0.25rem;\n            transition: all 0.3s ease;\n            text-decoration: none;\n            display: inline-block;\n        }\n\n        .export-btn:hover {\n            background: rgba(255, 255, 255, 0.3);\n            border-color: rgba(255, 255, 255, 0.5);\n            color: white;\n            transform: translateY(-1px);\n        }\n\n        .date-selector {\n            background: white;\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            margin-bottom: 2rem;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n        }\n\n        .date-btn {\n            background: #f8f9fa;\n            border: 2px solid #e9ecef;\n            border-radius: 8px;\n            padding: 0.5rem 1rem;\n            margin: 0.25rem;\n            transition: all 0.2s ease;\n            text-decoration: none;\n            color: #495057;\n            font-size: 0.9rem;\n        }\n\n        .date-btn:hover, .date-btn.active {\n            background: var(--primary-gradient);\n            border-color: transparent;\n            color: white;\n            transform: translateY(-1px);\n        }\n\n        .paper-card {\n            background: white;\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            margin-bottom: 1rem;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            border: none;\n            transition: all 0.3s ease;\n        }\n\n        .paper-card:hover {\n            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);\n            transform: translateY(-2px);\n        }\n\n        .score-badge {\n            background: var(--secondary-gradient);\n            color: white;\n            border-radius: 20px;\n            padding: 0.25rem 0.75rem;\n            font-size: 0.8rem;\n            font-weight: 600;\n        }\n\n        .view-count {\n            background: rgba(0, 123, 255, 0.1);\n            color: #007bff;\n            border-radius: 12px;\n            padding: 0.25rem 0.5rem;\n            font-size: 0.8rem;\n            font-weight: 500;\n            display: flex;\n            align-items: center;\n            gap: 0.25rem;\n            border: 1px solid rgba(0, 123, 255, 0.2);\n        }\n\n        .view-count i {\n            font-size: 0.7rem;\n        }\n\n        .category-badge {\n            background: #e3f2fd;\n            color: #1976d2;\n            border-radius: 15px;\n            padding: 0.25rem 0.75rem;\n            font-size: 0.8rem;\n            font-weight: 500;\n        }\n\n        .search-box {\n            border-radius: 25px;\n            border: 2px solid #e9ecef;\n            padding: 0.75rem 1.5rem;\n            transition: all 0.3s ease;\n        }\n\n        .search-box:focus {\n            border-color: #667eea;\n            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);\n        }\n\n        .pagination {\n            margin-top: 2rem;\n        }\n\n        .page-link {\n            border-radius: 8px;\n            margin: 0 0.25rem;\n            border: none;\n            background: #f8f9fa;\n            color: #495057;\n        }\n\n        .page-link:hover, .page-item.active .page-link {\n            background: var(--primary-gradient);\n            color: white;\n        }\n\n        .export-format-info {\n            background: rgba(255, 255, 255, 0.1);\n            border-radius: 8px;\n            padding: 1rem;\n            margin-top: 1rem;\n        }\n\n        .loading-spinner {\n            display: none;\n            text-align: center;\n            padding: 2rem;\n        }\n\n        .stats-number {\n            font-size: 2rem;\n            font-weight: 700;\n            color: #667eea;\n        }\n    </style>\n</head>\n<body>\n    <!-- Header -->\n    <div class=\"archive-header\">\n        <div class=\"container\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-lg-8\">\n                    <h1 class=\"display-5 fw-bold mb-2\">\n                        <i class=\"fas fa-archive me-3\"></i>Paper Archive\n                    </h1>\n                    <p class=\"lead mb-0\">Browse and export your curated research paper collection</p>\n                </div>\n                <div class=\"col-lg-4 text-end\">\n                    <a href=\"/\" class=\"btn btn-outline-light\">\n                        <i class=\"fas fa-home me-2\"></i>Back to Home\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <!-- Statistics Panel -->\n        ${statistics ? `\n        <div class=\"row mb-4\">\n            <div class=\"col-md-3\">\n                <div class=\"stats-card text-center\">\n                    <div class=\"stats-number\">${statistics.total_archives}</div>\n                    <div class=\"text-muted\">Archived Days</div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"stats-card text-center\">\n                    <div class=\"stats-number\">${statistics.total_papers}</div>\n                    <div class=\"text-muted\">Total Papers</div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"stats-card text-center\">\n                    <div class=\"stats-number\">${statistics.overall_average_score?.toFixed(1) || '0.0'}</div>\n                    <div class=\"text-muted\">Avg Score</div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"stats-card text-center\">\n                    <div class=\"stats-number\">${Object.keys(statistics.category_distribution).length}</div>\n                    <div class=\"text-muted\">Categories</div>\n                </div>\n            </div>\n        </div>\n        ` : ''}\n\n        <!-- Export Panel -->\n        <div class=\"export-panel\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-lg-8\">\n                    <h4 class=\"mb-2\">\n                        <i class=\"fas fa-download me-2\"></i>Export Archive Data\n                    </h4>\n                    <p class=\"mb-0 opacity-75\">Download your archived papers in various formats</p>\n                </div>\n                <div class=\"col-lg-4 text-end\">\n                    <a href=\"${exportBaseUrl}&format=json\" class=\"export-btn\" title=\"Complete JSON data\">\n                        <i class=\"fas fa-code me-1\"></i>JSON\n                    </a>\n                    <a href=\"${exportBaseUrl}&format=csv\" class=\"export-btn\" title=\"Spreadsheet format\">\n                        <i class=\"fas fa-table me-1\"></i>CSV\n                    </a>\n                    <a href=\"${exportBaseUrl}&format=markdown\" class=\"export-btn\" title=\"Readable format\">\n                        <i class=\"fas fa-file-alt me-1\"></i>Markdown\n                    </a>\n                    <a href=\"${exportBaseUrl}&format=bibtex\" class=\"export-btn\" title=\"Citation format\">\n                        <i class=\"fas fa-quote-right me-1\"></i>BibTeX\n                    </a>\n                </div>\n            </div>\n            <div class=\"export-format-info\">\n                <small>\n                    <strong>JSON:</strong> Complete data with analysis \u2022\n                    <strong>CSV:</strong> Tabular data for analysis \u2022\n                    <strong>Markdown:</strong> Human-readable reports \u2022\n                    <strong>BibTeX:</strong> Academic citations\n                </small>\n            </div>\n        </div>\n\n        <!-- Date Selector -->\n        ${availableDates.length > 0 ? `\n        <div class=\"date-selector\">\n            <h5 class=\"mb-3\">\n                <i class=\"fas fa-calendar me-2\"></i>Browse by Date\n            </h5>\n            <div class=\"d-flex flex-wrap\">\n                ${availableDates.slice(0, 15).map(date => `\n                    <a href=\"?date=${date}\" class=\"date-btn ${selectedDate === date ? 'active' : ''}\" title=\"${formatDate(date)}\">\n                        ${new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </a>\n                `).join('')}\n                ${availableDates.length > 15 ? `\n                    <span class=\"text-muted ms-2\">... and ${availableDates.length - 15} more dates</span>\n                ` : ''}\n            </div>\n        </div>\n        ` : ''}\n\n        <!-- Filters and Search -->\n        <div class=\"filter-section\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-lg-6\">\n                    <form method=\"GET\" action=\"/archive\" class=\"d-flex gap-2\">\n                        ${selectedDate ? `<input type=\"hidden\" name=\"date\" value=\"${selectedDate}\">` : ''}\n                        <input type=\"text\" name=\"search\" class=\"form-control search-box\" placeholder=\"Search papers...\" value=\"${search || ''}\">\n                        <button type=\"submit\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-search\"></i>\n                        </button>\n                        ${search ? `<a href=\"?${selectedDate ? `date=${selectedDate}` : ''}\" class=\"btn btn-outline-secondary\">Clear</a>` : ''}\n                    </form>\n                </div>\n                <div class=\"col-lg-6 text-end\">\n                    <div class=\"btn-group\" role=\"group\">\n                        <a href=\"?${new URLSearchParams({...filters, date: selectedDate}).toString()}\" class=\"btn btn-outline-primary ${!category ? 'active' : ''}\">\n                            All Categories\n                        </a>\n                        ${statistics ? Object.keys(statistics.category_distribution || {}).slice(0, 5).map(cat => `\n                            <a href=\"?${new URLSearchParams({...filters, date: selectedDate, category: cat}).toString()}\"\n                               class=\"btn btn-outline-primary ${category === cat ? 'active' : ''}\"\n                               title=\"${cat.replace(/_/g, ' ')}\">\n                                ${cat.replace(/_/g, ' ').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}\n                            </a>\n                        `).join('') : ''}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Papers List -->\n        <div class=\"papers-section\">\n            <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                <h4>\n                    <i class=\"fas fa-file-alt me-2\"></i>\n                    ${selectedDate ? `Papers for ${formatDate(selectedDate)}` : 'Recent Papers'}\n                    ${category ? ` - ${category.replace(/_/g, ' ')}` : ''}\n                    ${search ? ` (Search: \"${search}\")` : ''}\n                </h4>\n                <span class=\"text-muted\">${totalPapers} papers found</span>\n            </div>\n\n            ${papers.length === 0 ? `\n                <div class=\"text-center py-5\">\n                    <i class=\"fas fa-inbox fa-3x text-muted mb-3\"></i>\n                    <h5 class=\"text-muted\">No papers found</h5>\n                    <p class=\"text-muted\">Try adjusting your search criteria or browse a different date.</p>\n                </div>\n            ` : papers.map(paper => `\n                <div class=\"paper-card\">\n                    <div class=\"row\">\n                        <div class=\"col-md-10\">\n                            <div class=\"d-flex justify-content-between align-items-start mb-2\">\n                                <h5 class=\"mb-1\">\n                                    <a href=\"${paper.url || '#'}\" target=\"_blank\" class=\"text-decoration-none\">\n                                        ${paper.title}\n                                    </a>\n                                </h5>\n                                <div class=\"d-flex align-items-center gap-2\">\n                                    <div class=\"view-count\">\n                                        <i class=\"fas fa-eye\"></i>\n                                        <span>${paper.views || 0}</span>\n                                    </div>\n                                    <span class=\"score-badge\">${(paper.analysis?.relevance_score || 5).toFixed(1)}/10</span>\n                                </div>\n                            </div>\n                            <p class=\"text-muted mb-2\">\n                                <i class=\"fas fa-user me-1\"></i>${paper.authors?.join(', ') || 'Unknown authors'}\n                                ${paper.published ? `<span class=\"ms-3\"><i class=\"fas fa-calendar me-1\"></i>${new Date(paper.published).toLocaleDateString()}</span>` : ''}\n                                ${paper.source ? `<span class=\"ms-3\"><i class=\"fas fa-database me-1\"></i>${paper.source}</span>` : ''}\n                            </p>\n                            ${paper.analysis?.category ? `<span class=\"category-badge mb-2 d-inline-block\">${paper.analysis.category.replace(/_/g, ' ')}</span>` : ''}\n                            <p class=\"mb-2\">${paper.abstract?.substring(0, 300) || 'No abstract available'}${paper.abstract?.length > 300 ? '...' : ''}</p>\n                            ${paper.analysis?.keywords?.length > 0 ? `\n                                <div class=\"mb-2\">\n                                    <small class=\"text-muted\">Keywords: ${paper.analysis.keywords.slice(0, 8).join(', ')}</small>\n                                </div>\n                            ` : ''}\n                        </div>\n                        <div class=\"col-md-2 text-end\">\n                            ${paper.url ? `\n                                <a href=\"${paper.url}\" target=\"_blank\" class=\"btn btn-sm btn-outline-primary mb-2\">\n                                    <i class=\"fas fa-external-link-alt me-1\"></i>View Paper\n                                </a>\n                            ` : ''}\n                            <button class=\"btn btn-sm btn-outline-secondary\" onclick=\"exportPaper('${paper.id}', '${sanitizeFilename(paper.title)}')\">\n                                <i class=\"fas fa-download me-1\"></i>Export\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n\n        <!-- Pagination -->\n        ${totalPages > 1 ? `\n        <nav class=\"pagination\">\n            <ul class=\"pagination justify-content-center\">\n                <li class=\"page-item ${!hasPrev ? 'disabled' : ''}\">\n                    <a class=\"page-link\" href=\"?${new URLSearchParams({...filters, date: selectedDate, page: currentPage - 1}).toString()}\">Previous</a>\n                </li>\n\n                ${Array.from({length: Math.min(5, totalPages)}, (_, i) => {\n                  const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;\n                  return `\n                    <li class=\"page-item ${pageNum === currentPage ? 'active' : ''}\">\n                        <a class=\"page-link\" href=\"?${new URLSearchParams({...filters, date: selectedDate, page: pageNum}).toString()}\">${pageNum}</a>\n                    </li>\n                  `;\n                }).join('')}\n\n                <li class=\"page-item ${!hasNext ? 'disabled' : ''}\">\n                    <a class=\"page-link\" href=\"?${new URLSearchParams({...filters, date: selectedDate, page: currentPage + 1}).toString()}\">Next</a>\n                </li>\n            </ul>\n        </nav>\n        ` : ''}\n    </div>\n\n    <!-- Loading Spinner -->\n    <div class=\"loading-spinner\" id=\"loadingSpinner\">\n        <div class=\"spinner-border text-primary\" role=\"status\">\n            <span class=\"visually-hidden\">Loading...</span>\n        </div>\n        <p class=\"mt-2\">Preparing your export...</p>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        // Export individual paper\n        async function exportPaper(paperId, paperTitle) {\n            const spinner = document.getElementById('loadingSpinner');\n            spinner.style.display = 'block';\n\n            try {\n                // For now, we'll export as JSON - could be enhanced to support multiple formats\n                const response = await fetch(\\`/api/papers/\\${paperId}\\`);\n                const data = await response.json();\n\n                const exportData = {\n                    paper: data,\n                    exported_at: new Date().toISOString(),\n                    format: 'individual_export'\n                };\n\n                downloadFile(JSON.stringify(exportData, null, 2), \\`\\${paperTitle}_export.json\\`, 'application/json');\n            } catch (error) {\n                alert('Export failed: ' + error.message);\n            } finally {\n                spinner.style.display = 'none';\n            }\n        }\n\n        // Download file helper\n        function downloadFile(content, filename, contentType) {\n            const blob = new Blob([content], { type: contentType });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n        }\n\n        // Show export progress for large downloads\n        document.querySelectorAll('a[href*=\"/api/archive/export\"]').forEach(link => {\n            link.addEventListener('click', function(e) {\n                const spinner = document.getElementById('loadingSpinner');\n                spinner.style.display = 'block';\n\n                // Hide spinner after a delay (export will proceed in background)\n                setTimeout(() => {\n                    spinner.style.display = 'none';\n                }, 3000);\n            });\n        });\n    </script>\n</body>\n</html>`;\n}\n\n// Export modal template\nexport function generateExportModal(data) {\n  const { totalPapers, dateRange, availableFormats, currentFilters } = data;\n\n  return `\n<div class=\"modal fade\" id=\"exportModal\" tabindex=\"-1\" aria-labelledby=\"exportModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-lg\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\" id=\"exportModalLabel\">\n          <i class=\"fas fa-download me-2\"></i>Export Archive Data\n        </h5>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <h6 class=\"mb-3\">Export Summary</h6>\n            <ul class=\"list-unstyled\">\n              <li><strong>Total Papers:</strong> ${totalPapers}</li>\n              <li><strong>Date Range:</strong> ${dateRange?.start || 'All'} to ${dateRange?.end || 'All'}</li>\n              ${currentFilters?.category ? `<li><strong>Category:</strong> ${currentFilters.category}</li>` : ''}\n              ${currentFilters?.search ? `<li><strong>Search:</strong> \"${currentFilters.search}\"</li>` : ''}\n            </ul>\n          </div>\n          <div class=\"col-md-6\">\n            <h6 class=\"mb-3\">Select Format</h6>\n            ${availableFormats.map(format => `\n              <div class=\"form-check mb-2\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"exportFormat\" id=\"format_${format.value}\" value=\"${format.value}\" ${format.default ? 'checked' : ''}>\n                <label class=\"form-check-label\" for=\"format_${format.value}\">\n                  <strong>${format.label}</strong> - ${format.description}\n                </label>\n              </div>\n            `).join('')}\n          </div>\n        </div>\n\n        <div class=\"row mt-4\">\n          <div class=\"col-12\">\n            <h6 class=\"mb-3\">Export Options</h6>\n            <div class=\"form-check mb-2\">\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"includeAbstracts\" checked>\n              <label class=\"form-check-label\" for=\"includeAbstracts\">Include abstracts</label>\n            </div>\n            <div class=\"form-check mb-2\">\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"includeAnalysis\" checked>\n              <label class=\"form-check-label\" for=\"includeAnalysis\">Include AI analysis</label>\n            </div>\n            <div class=\"form-check mb-2\">\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"includeStatistics\" checked>\n              <label class=\"form-check-label\" for=\"includeStatistics\">Include statistics</label>\n            </div>\n            <div class=\"form-check mb-2\">\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"compressLarge\" checked>\n              <label class=\"form-check-label\" for=\"compressLarge\">Compress large exports</label>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n        <button type=\"button\" class=\"btn btn-primary\" onclick=\"performAdvancedExport()\">\n          <i class=\"fas fa-download me-2\"></i>Export Data\n        </button>\n      </div>\n    </div>\n  </div>\n</div>`;\n}\n\n// Export progress template\nexport function generateExportProgressTemplate() {\n  return `\n<div class=\"progress mb-3\" style=\"height: 25px\">\n  <div class=\"progress-bar progress-bar-striped progress-bar-animated\"\n       role=\"progressbar\"\n       id=\"exportProgressBar\">\n    Preparing export...\n  </div>\n</div>\n<div class=\"text-center\">\n  <p id=\"exportStatusText\">Initializing export process... </p>\n  <div class=\"spinner-border text-primary\" role=\"status\">\n    <span class=\"visually-hidden\">Loading...</span>\n  </div>\n</div>`;\n}\n\n// Export completion template\nexport function generateExportCompleteTemplate(result) {\n  const { format, filename, size, papers_count, metadata } = result;\n\n  return `\n<div class=\"alert alert-success\" role=\"alert\">\n  <h6 class=\"alert-heading\">Export Complete! <i class=\"fas fa-check-circle\"></i></h6>\n  <p>Your archive data has been successfully exported.</p>\n  <hr>\n  <ul class=\"mb-0\">\n    <li><strong>Format:</strong> ${format.toUpperCase()}</li>\n    <li><strong>Papers:</strong> ${papers_count}</li>\n    <li><strong>File size:</strong> ${formatBytes(size)}</li>\n    <li><strong>Filename:</strong> ${filename}</li>\n  </ul>\n</div>\n<div class=\"text-center mt-3\">\n  <a href=\"#\" class=\"btn btn-success\" onclick=\"downloadExportedFile()\">\n    <i class=\"fas fa-download me-2\"></i>Download File\n  </a>\n  <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n</div>`;\n}\n\n// Category distribution chart template\nexport function generateCategoryChart(categories) {\n  const total = Object.values(categories).reduce((a, b) => a + b, 0);\n  const sortedCategories = Object.entries(categories)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 8);\n\n  return `\n<div class=\"chart-container mb-4\">\n  <h6 class=\"mb-3\">Papers by Category</h6>\n  ${sortedCategories.map(([category, count]) => {\n    const percentage = ((count / total) * 100).toFixed(1);\n    return `\n      <div class=\"mb-2\">\n        <div class=\"d-flex justify-content-between mb-1\">\n          <span class=\"small\">${category.replace(/_/g, ' ')}</span>\n          <span class=\"small text-muted\">${count} (${percentage}%)</span>\n        </div>\n        <div class=\"progress\" style=\"height: 8px\">\n          <div class=\"progress-bar bg-primary\" style=\"width: ${percentage}%\"></div>\n        </div>\n      </div>\n    `;\n  }).join('')}\n</div>`;\n}\n\n// Date range picker template\nexport function generateDateRangePicker() {\n  return `\n<div class=\"row mb-3\">\n  <div class=\"col-md-6\">\n    <label for=\"startDate\" class=\"form-label\">Start Date</label>\n    <input type=\"date\" class=\"form-control\" id=\"startDate\" name=\"start_date\">\n  </div>\n  <div class=\"col-md-6\">\n    <label for=\"endDate\" class=\"form-label\">End Date</label>\n    <input type=\"date\" class=\"form-control\" id=\"endDate\" name=\"end_date\">\n  </div>\n</div>`;\n}\n\n// Advanced filter template\nexport function generateAdvancedFilters() {\n  return `\n<div class=\"row mb-3\">\n  <div class=\"col-md-4\">\n    <label for=\"categoryFilter\" class=\"form-label\">Category</label>\n    <select class=\"form-select\" id=\"categoryFilter\" name=\"category\">\n      <option value=\"\">All Categories</option>\n      <option value=\"computer_vision\">Computer Vision</option>\n      <option value=\"machine_learning\">Machine Learning</option>\n      <option value=\"natural_language_processing\">Natural Language Processing</option>\n      <option value=\"reinforcement_learning\">Reinforcement Learning</option>\n      <option value=\"multimodal_learning\">Multimodal Learning</option>\n      <option value=\"generative_models\">Generative Models</option>\n      <option value=\"diffusion_models\">Diffusion Models</option>\n      <option value=\"transformer_architectures\">Transformer Architectures</option>\n    </select>\n  </div>\n  <div class=\"col-md-4\">\n    <label for=\"minScore\" class=\"form-label\">Minimum Score</label>\n    <input type=\"range\" class=\"form-range\" id=\"minScore\" name=\"min_score\" min=\"1\" max=\"10\" value=\"1\">\n    <div class=\"text-center\"><small id=\"minScoreValue\">1</small></div>\n  </div>\n  <div class=\"col-md-4\">\n    <label for=\"maxScore\" class=\"form-label\">Maximum Score</label>\n    <input type=\"range\" class=\"form-range\" id=\"maxScore\" name=\"max_score\" min=\"1\" max=\"10\" value=\"10\">\n    <div class=\"text-center\"><small id=\"maxScoreValue\">10</small></div>\n  </div>\n</div>`;\n}\n\n// Export summary template\nexport function generateExportSummary(data) {\n  const { format, papers_count, date_range, filters } = data;\n\n  return `\n<div class=\"export-summary mb-4\">\n  <h6>Export Details</h6>\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <div class=\"text-center\">\n        <div class=\"h4 text-primary\">${papers_count}</div>\n        <small class=\"text-muted\">Papers</small>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"text-center\">\n        <div class=\"h4 text-primary\">${format.toUpperCase()}</div>\n        <small class=\"text-muted\">Format</small>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"text-center\">\n        <div class=\"h4 text-primary\">${date_range ? `${date_range.start} to ${date_range.end}` : 'All'}</div>\n        <small class=\"text-muted\">Date Range</small>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"text-center\">\n        <div class=\"h4 text-primary\">${filters?.category || 'All'}</div>\n        <small class=\"text-muted\">Category</small>\n      </div>\n    </div>\n  </div>\n</div>`;\n}", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/zhouql1978/dev/paperdog/target/.wrangler/tmp/bundle-KstIoW/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/zhouql1978/.nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/zhouql1978/dev/paperdog/target/.wrangler/tmp/bundle-KstIoW/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/zhouql1978/dev/paperdog/target/.wrangler/tmp/bundle-KstIoW/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/zhouql1978/dev/paperdog/target/worker-modules/functions/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/zhouql1978/.nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/zhouql1978/.nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/zhouql1978/dev/paperdog/target/worker-modules/functions/worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "// Main entry point - imports all modules and sets up the worker\nimport { routes } from '../src/config.js';\nimport {\n  handleRoot,\n  handlePapersList,\n  handlePapersByDate,\n  handlePaperById,\n  handleUpdatePapers,\n  handleCategories,\n  handleSearch,\n  handleRSSFeed,\n  handleAbout,\n  handleScoringReport,\n  handleTrackPaperView,\n  handleArchivePage\n} from '../src/handlers.js';\nimport { archiveHandlers } from '../src/archive-handlers.js';\nimport { scrapeDailyPapers } from '../src/paper-scraper.js';\nimport { analyzePapers } from '../src/paper-analyzer.js';\nimport { generateDailyReport } from '../src/blog-generator.js';\nimport { errorResponse, cachePapers } from '../src/utils.js';\nimport { archivePapers } from '../src/archive-manager.js';\n\n// Handler mapping - direct function calls instead of eval\nconst handlers = {\n  handleRoot,\n  handlePapersList,\n  handlePapersByDate,\n  handlePaperById,\n  handleUpdatePapers,\n  handleCategories,\n  handleSearch,\n  handleRSSFeed,\n  handleAbout,\n  handleScoringReport,\n  handleTrackPaperView,\n  handleArchivePage,\n  // Archive handlers\n  handleArchiveDates: archiveHandlers.handleArchiveDates,\n  handleArchiveByDate: archiveHandlers.handleArchiveByDate,\n  handleArchiveRange: archiveHandlers.handleArchiveRange,\n  handleArchiveSearch: archiveHandlers.handleArchiveSearch,\n  handleArchiveStatistics: archiveHandlers.handleArchiveStatistics,\n  handleArchiveExport: archiveHandlers.handleArchiveExport,\n  handleExportFormats: archiveHandlers.handleExportFormats,\n  handleCreateArchive: archiveHandlers.handleCreateArchive\n};\n\n// Main Fetch Handler\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      const url = new URL(request.url);\n      const path = url.pathname;\n      const method = request.method;\n      \n      // Handle OPTIONS preflight\n      if (method === 'OPTIONS') {\n        return new Response(null, { \n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type',\n          }\n        });\n      }\n\n      // Route matching\n      for (const [pattern, handlerName] of Object.entries(routes)) {\n        const [routeMethod, routePath] = pattern.split(' ');\n        if (method === routeMethod) {\n          // Handle parameterized routes\n          if (routePath.includes(':')) {\n            const routeParts = routePath.split('/');\n            const pathParts = path.split('/');\n            if (routeParts.length === pathParts.length) {\n              let match = true;\n              let paramValue = null;\n              for (let i = 0; i < routeParts.length; i++) {\n                if (routeParts[i].startsWith(':')) {\n                  paramValue = pathParts[i];\n                } else if (routeParts[i] !== pathParts[i]) {\n                  match = false;\n                  break;\n                }\n              }\n              if (match && paramValue) {\n                // Call handler directly using handler mapping\n                const handler = handlers[handlerName];\n                if (handler) {\n                  return await handler(request, env, paramValue);\n                }\n              }\n            }\n          } else if (path === routePath) {\n            // Call handler directly using handler mapping\n            const handler = handlers[handlerName];\n            if (handler) {\n              return await handler(request, env);\n            }\n          }\n        }\n      }\n      \n      // Handle static routes (archive, report, etc.)\n      if (path === '/archive') {\n        return await handleArchive(request, env);\n      } else if (path.startsWith('/report/')) {\n        const date = path.split('/')[2];\n        return await handleReportByDate(request, env, date);\n      }\n      \n      return errorResponse('Route not found', 404);\n    } catch (error) {\n      console.error('Fetch error:', error);\n      return errorResponse(error.message, error.statusCode || 500);\n    }\n  },\n\n  async scheduled(event, env, ctx) {\n    console.log('Running scheduled paper update at:', new Date().toISOString());\n    \n    try {\n      const apiKey = env.OPENROUTER_API_KEY;\n      if (!apiKey) {\n        console.error('\u274C OPENROUTER_API_KEY not configured');\n        return;\n      }\n      \n      const today = new Date().toISOString().split('T')[0];\n      console.log(`\uD83D\uDD04 Starting daily paper update for ${today}`);\n      \n      // Step 1: Scrape papers\n      console.log('\uD83D\uDCE1 Scraping papers from sources...');\n      const scrapedPapers = await scrapeDailyPapers();\n      if (scrapedPapers.length === 0) {\n        console.error('\u274C No papers could be scraped from sources');\n        return;\n      }\n      \n      console.log(`\u2705 Scraped ${scrapedPapers.length} papers`);\n      \n      // Step 2: Analyze papers\n      console.log('\uD83E\uDDE0 Analyzing papers with AI...');\n      const analyzedPapers = await analyzePapers(scrapedPapers, apiKey);\n      \n      console.log(`\u2705 Analyzed ${analyzedPapers.length} papers`);\n      \n      // Step 3: Cache results\n      console.log('\uD83D\uDCBE Caching results...');\n      await cachePapers(today, analyzedPapers, env);\n\n      // Step 4: Generate daily report\n      console.log('\uD83D\uDCCA Generating daily report...');\n      const dailyReport = await generateDailyReport(analyzedPapers, today);\n\n      // Step 5: Archive top 10 papers for long-term storage\n      console.log('\uD83D\uDCE6 Archiving top 10 papers for long-term storage...');\n      try {\n        // Sort papers by relevance score and take top 10 for archiving\n        const topPapers = [...analyzedPapers]\n          .sort((a, b) => {\n            const scoreA = (a.analysis?.relevance_score || a.scoring?.total_score || 5);\n            const scoreB = (b.analysis?.relevance_score || b.scoring?.total_score || 5);\n            return scoreB - scoreA; // Higher score first\n          })\n          .slice(0, 10); // Archive only top 10 papers\n\n        const archiveResult = await archivePapers(today, topPapers, env, {\n          source: 'scheduled_update',\n          auto_archived: true,\n          papers_archived: topPapers.length,\n          total_papers_analyzed: analyzedPapers.length\n        });\n        console.log(`\u2705 Successfully archived ${archiveResult.papers_archived} top papers for ${today} (from ${analyzedPapers.length} total)`);\n      } catch (archiveError) {\n        console.warn('\u26A0\uFE0F Failed to archive papers:', archiveError.message);\n        // Don't fail the entire update if archiving fails\n      }\n\n      console.log('\u2705 Daily report generated successfully!');\n      console.log(`\uD83D\uDCC8 Summary: ${analyzedPapers.length} papers processed, ${dailyReport.total_papers} total papers`);\n      \n      // Log statistics\n      const categories = {};\n      analyzedPapers.forEach(paper => {\n        const category = paper.analysis?.category || paper.category || 'other';\n        categories[category] = (categories[category] || 0) + 1;\n      });\n      \n      console.log('\uD83D\uDCC2 Category breakdown:', categories);\n      \n    } catch (error) {\n      console.error('\u274C Scheduled paper update failed:', error);\n    }\n  }\n};\n\n// Additional route handlers\nasync function handleArchive(request, env) {\n  try {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page')) || 1;\n    const limit = parseInt(url.searchParams.get('limit')) || 12;\n    const category = url.searchParams.get('category');\n    const search = url.searchParams.get('search');\n    \n    // Get papers from the last 30 days\n    let allPapers = [];\n    for (let i = 0; i < 30; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const papers = await env.PAPERS.get(`papers_${dateStr}`);\n      if (papers) {\n        const parsed = JSON.parse(papers);\n        allPapers.push(...parsed);\n      }\n    }\n    \n    // Apply filters\n    if (category) {\n      allPapers = allPapers.filter(p => \n        (p.analysis?.category || p.category || 'other') === category\n      );\n    }\n    \n    if (search) {\n      const searchLower = search.toLowerCase();\n      allPapers = allPapers.filter(p => \n        p.title.toLowerCase().includes(searchLower) ||\n        p.abstract.toLowerCase().includes(searchLower) ||\n        (p.authors && p.authors.some(a => a.toLowerCase().includes(searchLower)))\n      );\n    }\n    \n    // Import and use templates\n    const { getArchiveHTML } = await import('../src/templates.js');\n    const html = getArchiveHTML(allPapers, { page, limit, category, search });\n    \n    return new Response(html, {\n      headers: {\n        'Content-Type': 'text/html; charset=utf-8',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      }\n    });\n  } catch (error) {\n    console.error('Error in archive handler:', error);\n    return errorResponse(error.message, 500);\n  }\n}\n\nasync function handleReportByDate(request, env, date) {\n  try {\n    // Import validation function\n    const { validateDate, getCachedPapers } = await import('../src/utils.js');\n    const { generateDailyReport } = await import('../src/blog-generator.js');\n    const { getReportHTML } = await import('../src/templates.js');\n    \n    validateDate(date);\n    \n    const papers = await getCachedPapers(date, env);\n    if (!papers || papers.length === 0) {\n      return errorResponse('No papers found for this date', 404);\n    }\n    \n    const report = await generateDailyReport(papers, date);\n    const html = getReportHTML(report);\n    \n    return new Response(html, {\n      headers: {\n        'Content-Type': 'text/html; charset=utf-8',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      }\n    });\n  } catch (error) {\n    console.error('Error in report handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}", "import { routes } from './config.js';\nimport {\n  validateDate,\n  getCachedPapers,\n  cachePapers,\n  jsonResponse,\n  htmlResponse,\n  rssResponse,\n  errorResponse,\n  sortPapersByDate,\n  filterPapersByCategory,\n  searchPapers,\n  incrementPaperView,\n  getPaperViewCount,\n  enrichPapersWithViews\n} from './utils.js';\nimport { scrapeDailyPapers } from './paper-scraper.js';\nimport { analyzePapers } from './paper-analyzer.js';\nimport { generateDailyReport, generateBlogContent, generateRSSFeed } from './blog-generator.js';\nimport { getIndexHTML } from './templates.js';\nimport { getDualColumnHTML } from './dual-column-templates.js';\nimport { filterAndSortPapers, generateScoringReport } from './paper-scoring.js';\nimport { archivePapers } from './archive-manager.js';\nimport { trackVisitor, getVisitorStats, formatVisitorStats } from './visitor-counter.js';\n\nconst logger = {\n  info: (msg, data = {}) => console.log(`[HANDLER] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[HANDLER] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[HANDLER] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[HANDLER] ${msg}`, data)\n};\n\n// Route Handlers\nexport async function handleRoot(request, env) {\n  try {\n    const today = new Date().toISOString().split('T')[0];\n    const url = new URL(request.url);\n\n    // Track visitor\n    const visitorInfo = await trackVisitor(request, env);\n\n    // Check for specific date parameter\n    const requestedDate = url.searchParams.get('date');\n    const targetDate = requestedDate || today;\n\n    // Try to get cached papers\n    let papers = await getCachedPapers(targetDate, env);\n    let dailyReport = null;\n\n    if (!papers) {\n      // If no papers for today, try to get recent papers\n      const recentDates = [];\n      for (let i = 0; i < 7; i++) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        recentDates.push(date.toISOString().split('T')[0]);\n      }\n\n      // Find the most recent date with papers\n      for (const date of recentDates) {\n        const cached = await getCachedPapers(date, env);\n        if (cached && cached.length > 0) {\n          papers = cached;\n          break;\n        }\n      }\n    }\n\n    // Try to get daily report\n    if (papers && papers.length > 0) {\n      // Use enhanced filtering and sorting with source balancing and random tie-breaking\n      const displayPapers = filterAndSortPapers(papers, {\n        ensureBothSources: true,\n        maxPapers: 10,\n        minScore: 5.0 // Lower threshold to ensure we get 10 papers when possible\n      });\n\n      // Use the filtered papers for daily report\n      dailyReport = await generateDailyReport(displayPapers, targetDate);\n      \n      // Set displayPapers to the balanced selection\n      papers = displayPapers; // Update papers to the balanced selection for consistency\n    }\n\n    // displayPapers is now the balanced top 10 from filterAndSortPapers\n    const displayPapers = papers || [];\n\n    // Enrich papers with view counts before passing to template\n    const papersWithViews = await enrichPapersWithViews(displayPapers, env);\n\n    // Get visitor stats for display\n    const visitorStats = await getVisitorStats(env);\n    const formattedStats = formatVisitorStats(visitorStats);\n\n    return htmlResponse(getDualColumnHTML(papersWithViews, dailyReport, formattedStats));\n  } catch (error) {\n    logger.error('Error in root handler:', error);\n    return htmlResponse(getIndexHTML([], null));\n  }\n}\n\nexport async function handlePapersList(request, env) {\n  try {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page')) || 1;\n    const limit = Math.min(parseInt(url.searchParams.get('limit')) || 10, 11); // Default 10, max 11\n    const category = url.searchParams.get('category');\n    const search = url.searchParams.get('search');\n    const date = url.searchParams.get('date');\n    \n    let papers = [];\n    \n    if (date) {\n      validateDate(date);\n      papers = await getCachedPapers(date, env) || [];\n    } else {\n      // Get papers from the last 1 days\n      for (let i = 0; i < 1; i++) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dateStr = date.toISOString().split('T')[0];\n        const cached = await getCachedPapers(dateStr, env);\n        if (cached) {\n          papers.push(...cached);\n        }\n      }\n    }\n    \n    // Apply filters\n    if (category) {\n      papers = filterPapersByCategory(papers, category);\n    }\n    \n    if (search) {\n      papers = searchPapers(papers, search);\n    }\n    \n    // Sort by relevance score first, then by date, with random tie-breaking\n    papers.sort((a, b) => {\n      const scoreA = a.analysis?.relevance_score || a.scoring?.total_score || 5;\n      const scoreB = b.analysis?.relevance_score || b.scoring?.total_score || 5;\n\n      // Primary sort: higher score first\n      if (Math.abs(scoreB - scoreA) > 0.1) {\n        return scoreB - scoreA;\n      }\n\n      // Secondary sort: random tie-breaking for identical scores\n      if (scoreA === scoreB) {\n        return Math.random() - 0.5; // Random -0.5 to 0.5\n      }\n\n      // Tertiary sort: newer papers first if scores are very close\n      const dateA = new Date(a.published || a.scraped_at || 0);\n      const dateB = new Date(b.published || b.scraped_at || 0);\n      return dateB - dateA;\n    });\n    \n    // Apply pagination\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedPapers = papers.slice(startIndex, endIndex);\n\n    // Enrich papers with view counts\n    const papersWithViews = await enrichPapersWithViews(paginatedPapers, env);\n\n    const response = {\n      papers: papersWithViews,\n      pagination: {\n        current_page: page,\n        total_pages: Math.ceil(papers.length / limit),\n        total_papers: papers.length,\n        has_next: endIndex < papers.length,\n        has_prev: page > 1\n      },\n      filters: {\n        category: category,\n        search: search,\n        date: date\n      }\n    };\n\n    return jsonResponse(response);\n  } catch (error) {\n    logger.error('Error in papers list handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\nexport async function handlePapersByDate(request, env, date) {\n  try {\n    validateDate(date);\n\n    const papers = await getCachedPapers(date, env);\n    if (!papers) {\n      return errorResponse('No papers found for this date', 404);\n    }\n\n    // Enrich papers with view counts\n    const papersWithViews = await enrichPapersWithViews(papers, env);\n\n    return jsonResponse({\n      date: date,\n      papers: papersWithViews,\n      total_papers: papersWithViews.length\n    });\n  } catch (error) {\n    logger.error('Error in papers by date handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\nexport async function handlePaperById(request, env, paperId) {\n  try {\n    // Try to find the paper in recent cached data\n    let paper = null;\n\n    // Search through the last 7 days of cached papers\n    for (let i = 0; i < 7; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const papers = await getCachedPapers(dateStr, env);\n\n      if (papers) {\n        paper = papers.find(p => p.id === paperId);\n        if (paper) break;\n      }\n    }\n\n    if (!paper) {\n      return errorResponse('Paper not found', 404);\n    }\n\n    // Add view count to paper\n    const viewCount = await getPaperViewCount(paperId, env);\n    const paperWithViews = {\n      ...paper,\n      views: viewCount\n    };\n\n    return jsonResponse(paperWithViews);\n  } catch (error) {\n    logger.error('Error in paper by ID handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\nexport async function handleUpdatePapers(request, env) {\n  try {\n    // Check for API key\n    const apiKey = env.OPENROUTER_API_KEY;\n    if (!apiKey) {\n      return errorResponse('OpenRouter API key not configured', 503);\n    }\n    \n    const today = new Date().toISOString().split('T')[0];\n    \n    // Check rate limiting (simple implementation)\n    const clientIP = request.headers.get('CF-Connecting-IP') || 'unknown';\n    const rateLimitKey = `rate_limit_${clientIP}`;\n    const lastUpdate = await env.PAPERS.get(rateLimitKey);\n    \n    if (lastUpdate) {\n      const lastUpdateTime = parseInt(lastUpdate);\n      const timeSinceLastUpdate = Date.now() - lastUpdateTime;\n      const minInterval = 5 * 60 * 1000; // 5 minutes\n      \n      if (timeSinceLastUpdate < minInterval) {\n        return errorResponse('Please wait before requesting another update', 429);\n      }\n    }\n    \n    // Update rate limit\n    await env.PAPERS.put(rateLimitKey, Date.now().toString(), {\n      expirationTtl: 300 // 5 minutes\n    });\n    \n    logger.info('Starting manual paper update');\n    \n    // Step 1: Scrape papers\n    const scrapedPapers = await scrapeDailyPapers();\n    if (scrapedPapers.length === 0) {\n      return errorResponse('No papers could be scraped', 404);\n    }\n    \n    // Step 2: Analyze papers\n    const analyzedPapers = await analyzePapers(scrapedPapers, apiKey);\n    \n    // Step 3: Cache results\n    await cachePapers(today, analyzedPapers, env);\n\n    // Step 4: Generate daily report\n    const dailyReport = await generateDailyReport(analyzedPapers, today);\n\n    // Step 5: Archive top 10 papers for long-term storage using balanced selection\n    let archiveResult = null;\n    try {\n      // Use enhanced filtering and sorting with source balancing and random tie-breaking\n      const topPapers = filterAndSortPapers(analyzedPapers, {\n        ensureBothSources: true,\n        maxPapers: 10,\n        minScore: 5.0 // Lower threshold to ensure we get 10 papers when possible\n      });\n\n      archiveResult = await archivePapers(today, topPapers, env, {\n        source: 'daily_update',\n        auto_archived: true,\n        papers_archived: topPapers.length,\n        total_papers_analyzed: analyzedPapers.length\n      });\n      logger.info(`Successfully archived ${archiveResult.papers_archived} top papers for ${today} (from ${analyzedPapers.length} total)`);\n    } catch (archiveError) {\n      logger.warn('Failed to archive papers:', archiveError.message);\n      // Don't fail the entire update if archiving fails\n    }\n\n    logger.info(`Successfully updated ${analyzedPapers.length} papers`);\n\n    return jsonResponse({\n      success: true,\n      message: `Successfully updated ${analyzedPapers.length} papers`,\n      date: today,\n      papers_count: analyzedPapers.length,\n      report: dailyReport,\n      archive: archiveResult,\n      top_papers_archived: archiveResult ? archiveResult.papers_archived : 0\n    });\n    \n  } catch (error) {\n    logger.error('Error in update papers handler:', error);\n    return errorResponse(`Update failed: ${error.message}`, error.statusCode || 500);\n  }\n}\n\nexport async function handleCategories(request, env) {\n  try {\n    // Get all categories from recent papers\n    const categories = new Set();\n    \n    for (let i = 0; i < 7; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const papers = await getCachedPapers(dateStr, env);\n      \n      if (papers) {\n        papers.forEach(paper => {\n          const category = paper.analysis?.category || paper.category || 'other';\n          categories.add(category);\n        });\n      }\n    }\n    \n    const categoryList = Array.from(categories).sort();\n    \n    return jsonResponse({\n      categories: categoryList,\n      total_categories: categoryList.length\n    });\n  } catch (error) {\n    logger.error('Error in categories handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\nexport async function handleSearch(request, env) {\n  try {\n    const url = new URL(request.url);\n    const query = url.searchParams.get('q');\n    const category = url.searchParams.get('category');\n    const limit = parseInt(url.searchParams.get('limit')) || 20;\n    \n    if (!query || query.trim().length < 2) {\n      return errorResponse('Search query must be at least 2 characters', 400);\n    }\n    \n    // Search through recent papers\n    let allPapers = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const papers = await getCachedPapers(dateStr, env);\n      if (papers) {\n        allPapers.push(...papers);\n      }\n    }\n    \n    // Apply search and filters\n    let results = searchPapers(allPapers, query);\n    \n    if (category) {\n      results = filterPapersByCategory(results, category);\n    }\n    \n    // Sort by relevance score\n    results.sort((a, b) => {\n      const scoreA = a.analysis?.relevance_score || 5;\n      const scoreB = b.analysis?.relevance_score || 5;\n      return scoreB - scoreA;\n    });\n    \n    // Apply limit\n    results = results.slice(0, limit);\n    \n    return jsonResponse({\n      query: query,\n      results: results,\n      total_results: results.length,\n      filters: {\n        category: category\n      }\n    });\n  } catch (error) {\n    logger.error('Error in search handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\nexport async function handleRSSFeed(request, env) {\n  try {\n    // Get recent papers for RSS feed\n    let allPapers = [];\n    for (let i = 0; i < 3; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const papers = await getCachedPapers(dateStr, env);\n      if (papers) {\n        allPapers.push(...papers);\n      }\n    }\n    \n    // Sort by date\n    allPapers = sortPapersByDate(allPapers);\n    \n    const rssFeed = generateRSSFeed(allPapers, {\n      title: 'PaperDog - AI Papers Daily',\n      description: 'Daily curated AI and computer vision research papers',\n      link: 'https://paperdog.org',\n      maxItems: 20\n    });\n    \n    return rssResponse(rssFeed);\n  } catch (error) {\n    logger.error('Error in RSS feed handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\nexport async function handleAbout(request, env) {\n  try {\n    // Get visitor stats for display\n    const visitorStats = await getVisitorStats(env);\n    const formattedStats = formatVisitorStats(visitorStats);\n\n    const aboutHTML = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About - PaperDog</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            background: #f8f9fa;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        .about-header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 4rem 0;\n            margin-bottom: 3rem;\n        }\n        .stats-card {\n            background: white;\n            border-radius: 12px;\n            padding: 1.5rem;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n            border: none;\n            transition: transform 0.2s ease;\n        }\n        .stats-card:hover {\n            transform: translateY(-2px);\n        }\n        .feature-icon {\n            font-size: 2.5rem;\n            color: #667eea;\n            margin-bottom: 1rem;\n        }\n        .api-section {\n            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n            color: white;\n            border-radius: 12px;\n            padding: 2rem;\n        }\n        .nav-buttons .btn {\n            margin: 0.25rem;\n            border-radius: 8px;\n        }\n        .visitor-badge {\n            background: rgba(255,255,255,0.2);\n            border-radius: 20px;\n            padding: 0.5rem 1rem;\n            font-size: 0.9rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"about-header\">\n        <div class=\"container\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-lg-8\">\n                    <h1 class=\"display-4 mb-3\">\n                        <i class=\"fas fa-info-circle me-3\"></i>About PaperDog\n                    </h1>\n                    <p class=\"lead mb-0\">Your AI-powered research paper companion</p>\n                </div>\n                <div class=\"col-lg-4 text-end\">\n                    <div class=\"visitor-badge\">\n                        <i class=\"fas fa-users me-2\"></i>\n                        ${formattedStats.displayText}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-lg-8 mx-auto\">\n\n                <!-- Quick Stats -->\n                <div class=\"row mb-4\">\n                    <div class=\"col-md-4 mb-3\">\n                        <div class=\"stats-card text-center\">\n                            <div class=\"feature-icon\">\n                                <i class=\"fas fa-robot\"></i>\n                            </div>\n                            <h5>AI Powered</h5>\n                            <p class=\"text-muted\">GPT-4o & Gemini Analysis</p>\n                        </div>\n                    </div>\n                    <div class=\"col-md-4 mb-3\">\n                        <div class=\"stats-card text-center\">\n                            <div class=\"feature-icon\">\n                                <i class=\"fas fa-sync-alt\"></i>\n                            </div>\n                            <h5>Daily Updates</h5>\n                            <p class=\"text-muted\">Automated Paper Collection</p>\n                        </div>\n                    </div>\n                    <div class=\"col-md-4 mb-3\">\n                        <div class=\"stats-card text-center\">\n                            <div class=\"feature-icon\">\n                                <i class=\"fas fa-archive\"></i>\n                            </div>\n                            <h5>Smart Archive</h5>\n                            <p class=\"text-muted\">Top 10 Papers Daily</p>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- What is PaperDog -->\n                <div class=\"card mb-4\">\n                    <div class=\"card-body\">\n                        <h3 class=\"mb-3\">\n                            <i class=\"fas fa-robot me-2\"></i>What is PaperDog?\n                        </h3>\n                        <p class=\"lead\">PaperDog is an automated system that collects, analyzes, and presents the latest AI and computer vision research papers from top sources like arXiv and HuggingFace.</p>\n                        <p>Our mission is to make cutting-edge AI research accessible to everyone by providing intelligent summaries, categorization, and easy-to-read analysis of complex academic papers.</p>\n                    </div>\n                </div>\n\n                <!-- Key Features -->\n                <div class=\"card mb-4\">\n                    <div class=\"card-body\">\n                        <h3 class=\"mb-3\">\n                            <i class=\"fas fa-star me-2\"></i>Key Features\n                        </h3>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <h6><i class=\"fas fa-brain text-primary me-2\"></i>AI-Powered Analysis</h6>\n                                <ul class=\"mb-4\">\n                                    <li>GPT-4o and Gemini model analysis</li>\n                                    <li>500-word intelligent summaries</li>\n                                    <li>Relevance scoring (1-10 scale)</li>\n                                    <li>Technical depth assessment</li>\n                                </ul>\n\n                                <h6><i class=\"fas fa-tags text-primary me-2\"></i>Smart Categorization</h6>\n                                <ul class=\"mb-4\">\n                                    <li>Computer Vision</li>\n                                    <li>Machine Learning</li>\n                                    <li>Natural Language Processing</li>\n                                    <li>Reinforcement Learning</li>\n                                </ul>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <h6><i class=\"fas fa-archive text-primary me-2\"></i>Paper Archive System</h6>\n                                <ul class=\"mb-4\">\n                                    <li>Top 10 papers archived daily</li>\n                                    <li>Date-based browsing</li>\n                                    <li>Advanced search & filtering</li>\n                                    <li>Multiple export formats</li>\n                                </ul>\n\n                                <h6><i class=\"fas fa-download text-primary me-2\"></i>Export Options</h6>\n                                <ul class=\"mb-4\">\n                                    <li>JSON format with full analysis</li>\n                                    <li>CSV for data analysis</li>\n                                    <li>Markdown for documentation</li>\n                                    <li>BibTeX for citations</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- How It Works -->\n                <div class=\"card mb-4\">\n                    <div class=\"card-body\">\n                        <h3 class=\"mb-3\">\n                            <i class=\"fas fa-cogs me-2\"></i>How It Works\n                        </h3>\n                        <div class=\"row\">\n                            <div class=\"col-md-3 text-center mb-3\">\n                                <div class=\"bg-primary bg-opacity-10 rounded-circle p-3 mx-auto mb-2\" style=\"width: 60px; height: 60px;\">\n                                    <i class=\"fas fa-download fa-2x text-primary\"></i>\n                                </div>\n                                <h6>Daily Scraping</h6>\n                                <p class=\"small text-muted\">Automatically collects new papers from arXiv and HuggingFace</p>\n                            </div>\n                            <div class=\"col-md-3 text-center mb-3\">\n                                <div class=\"bg-primary bg-opacity-10 rounded-circle p-3 mx-auto mb-2\" style=\"width: 60px; height: 60px;\">\n                                    <i class=\"fas fa-brain fa-2x text-primary\"></i>\n                                </div>\n                                <h6>AI Analysis</h6>\n                                <p class=\"small text-muted\">Uses advanced language models to analyze each paper's content</p>\n                            </div>\n                            <div class=\"col-md-3 text-center mb-3\">\n                                <div class=\"bg-primary bg-opacity-10 rounded-circle p-3 mx-auto mb-2\" style=\"width: 60px; height: 60px;\">\n                                    <i class=\"fas fa-filter fa-2x text-primary\"></i>\n                                </div>\n                                <h6>Smart Curation</h6>\n                                <p class=\"small text-muted\">Filters and ranks papers based on quality and importance</p>\n                            </div>\n                            <div class=\"col-md-3 text-center mb-3\">\n                                <div class=\"bg-primary bg-opacity-10 rounded-circle p-3 mx-auto mb-2\" style=\"width: 60px; height: 60px;\">\n                                    <i class=\"fas fa-chart-line fa-2x text-primary\"></i>\n                                </div>\n                                <h6>Beautiful Presentation</h6>\n                                <p class=\"small text-muted\">Presents papers in an easy-to-read blog format</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Archive System -->\n                <div class=\"card mb-4\">\n                    <div class=\"card-body\">\n                        <h3 class=\"mb-3\">\n                            <i class=\"fas fa-archive me-2\"></i>Paper Archive System\n                        </h3>\n                        <p class=\"mb-3\">Our intelligent archive system stores only the top 10 highest-scoring papers each day, ensuring quality over quantity:</p>\n\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <h6><i class=\"fas fa-calendar-alt text-primary me-2\"></i>Date-Based Browsing</h6>\n                                <p class=\"text-muted mb-3\">Browse papers by specific dates with an intuitive calendar interface</p>\n\n                                <h6><i class=\"fas fa-search text-primary me-2\"></i>Advanced Search</h6>\n                                <p class=\"text-muted mb-3\">Search within archived content with filters for categories, scores, and date ranges</p>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <h6><i class=\"fas fa-download text-primary me-2\"></i>Multiple Export Formats</h6>\n                                <p class=\"text-muted mb-3\">Export papers in JSON, CSV, Markdown, or BibTeX formats for different use cases</p>\n\n                                <h6><i class=\"fas fa-chart-bar text-primary me-2\"></i>Statistics Dashboard</h6>\n                                <p class=\"text-muted mb-3\">View archive statistics including paper distribution and visitor analytics</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- API Section -->\n                <div class=\"api-section mb-4\">\n                    <h3 class=\"mb-3\">\n                        <i class=\"fas fa-code me-2\"></i>Developer API\n                    </h3>\n                    <p class=\"mb-3\">Access PaperDog's functionality programmatically through our REST API:</p>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <h6><i class=\"fas fa-file-alt me-2\"></i>Paper Endpoints</h6>\n                            <ul class=\"mb-3\">\n                                <li><code>GET /api/papers</code> - List papers</li>\n                                <li><code>GET /api/papers/:date</code> - Papers by date</li>\n                                <li><code>GET /api/search?q=query</code> - Search papers</li>\n                            </ul>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <h6><i class=\"fas fa-archive me-2\"></i>Archive Endpoints</h6>\n                            <ul class=\"mb-3\">\n                                <li><code>GET /api/archive/dates</code> - Available dates</li>\n                                <li><code>GET /api/archive/:date</code> - Archive by date</li>\n                                <li><code>GET /api/archive/export</code> - Export data</li>\n                            </ul>\n                        </div>\n                    </div>\n\n                    <div class=\"text-center\">\n                        <a href=\"/api/papers\" class=\"btn btn-light btn-sm me-2\">\n                            <i class=\"fas fa-external-link-alt me-1\"></i>View API Docs\n                        </a>\n                        <a href=\"/api/archive/export/formats\" class=\"btn btn-light btn-sm\">\n                            <i class=\"fas fa-download me-1\"></i>Export Formats\n                        </a>\n                    </div>\n                </div>\n\n                <!-- Technical Details -->\n                <div class=\"card mb-4\">\n                    <div class=\"card-body\">\n                        <h3 class=\"mb-3\">\n                            <i class=\"fas fa-server me-2\"></i>Technical Architecture\n                        </h3>\n                        <p>PaperDog is built with modern, scalable technologies:</p>\n\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <h6><i class=\"fas fa-cloud text-primary me-2\"></i>Backend Infrastructure</h6>\n                                <ul class=\"mb-3\">\n                                    <li><strong>Cloudflare Workers:</strong> Serverless edge computing</li>\n                                    <li><strong>Cloudflare KV:</strong> Distributed key-value storage</li>\n                                    <li><strong>Global CDN:</strong> Fast content delivery worldwide</li>\n                                </ul>\n\n                                <h6><i class=\"fas fa-brain text-primary me-2\"></i>AI Integration</h6>\n                                <ul class=\"mb-3\">\n                                    <li><strong>OpenRouter API:</strong> Access to GPT-4o, Gemini, Claude</li>\n                                    <li><strong>Intelligent Analysis:</strong> Automated paper evaluation</li>\n                                    <li><strong>Scoring System:</strong> 1-10 relevance scoring</li>\n                                </ul>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <h6><i class=\"fas fa-database text-primary me-2\"></i>Data Sources</h6>\n                                <ul class=\"mb-3\">\n                                    <li><strong>arXiv API:</strong> Latest academic papers</li>\n                                    <li><strong>HuggingFace:</strong> ML community papers</li>\n                                    <li><strong>Web Scraping:</strong> Additional content sources</li>\n                                </ul>\n\n                                <h6><i class=\"fas fa-palette text-primary me-2\"></i>Frontend Technologies</h6>\n                                <ul class=\"mb-3\">\n                                    <li><strong>Bootstrap 5:</strong> Responsive UI framework</li>\n                                    <li><strong>Font Awesome:</strong> Professional icons</li>\n                                    <li><strong>Modern CSS:</strong> Gradient designs and animations</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Visit Stats -->\n                <div class=\"card mb-4\">\n                    <div class=\"card-body\">\n                        <h3 class=\"mb-3\">\n                            <i class=\"fas fa-chart-line me-2\"></i>Visitor Statistics\n                        </h3>\n                        <div class=\"row text-center\">\n                            <div class=\"col-md-4\">\n                                <h4 class=\"text-primary\">${formattedStats.today}</h4>\n                                <p class=\"text-muted\">Today's Visitors</p>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <h4 class=\"text-primary\">${formattedStats.total}</h4>\n                                <p class=\"text-muted\">Total Visitors</p>\n                            </div>\n                            <div class=\"col-md-4\">\n                                <h4 class=\"text-primary\">${formattedStats.thisMonth}</h4>\n                                <p class=\"text-muted\">This Month</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Navigation -->\n                <div class=\"text-center nav-buttons\">\n                    <a href=\"/\" class=\"btn btn-primary btn-lg me-2\">\n                        <i class=\"fas fa-home me-2\"></i>Back to Home\n                    </a>\n                    <a href=\"/archive\" class=\"btn btn-outline-primary btn-lg me-2\">\n                        <i class=\"fas fa-archive me-2\"></i>Browse Archive\n                    </a>\n                    <a href=\"/api/papers\" class=\"btn btn-outline-secondary btn-lg me-2\">\n                        <i class=\"fas fa-code me-2\"></i>API Documentation\n                    </a>\n                    <a href=\"/feed\" class=\"btn btn-outline-info btn-lg\">\n                        <i class=\"fas fa-rss me-2\"></i>RSS Feed\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>`;\n\n    return htmlResponse(aboutHTML);\n  } catch (error) {\n    logger.error('Error in about handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\nexport async function handleScoringReport(request, env, date) {\n  try {\n    validateDate(date);\n\n    const papers = await getCachedPapers(date, env);\n    if (!papers || papers.length === 0) {\n      return errorResponse('No papers found for this date', 404);\n    }\n\n    // Generate scoring report\n    const scoringReport = generateScoringReport(papers);\n\n    logger.info(`Generated scoring report for ${date} with ${papers.length} papers`);\n\n    return jsonResponse({\n      date: date,\n      papers_count: papers.length,\n      scoring_report: scoringReport,\n      generated_at: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error('Error in scoring report handler:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\nexport async function handleTrackPaperView(request, env, paperId) {\n  try {\n    if (!paperId) {\n      return errorResponse('Paper ID is required', 400);\n    }\n\n    // Find the paper first to ensure it exists\n    let paper = null;\n\n    // Search through the last 7 days of cached papers\n    for (let i = 0; i < 7; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const papers = await getCachedPapers(dateStr, env);\n\n      if (papers) {\n        paper = papers.find(p => p.id === paperId);\n        if (paper) break;\n      }\n    }\n\n    if (!paper) {\n      return errorResponse('Paper not found', 404);\n    }\n\n    // Increment view count\n    const newViewCount = await incrementPaperView(paperId, env);\n\n    logger.info(`Tracked view for paper ${paperId}: ${newViewCount} views`);\n\n    return jsonResponse({\n      success: true,\n      paper_id: paperId,\n      views: newViewCount,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error('Error tracking paper view:', error);\n    return errorResponse('Failed to track view', 500);\n  }\n}\n\n// Archive page handler\nexport async function handleArchivePage(request, env) {\n  try {\n    logger.info('Serving archive page');\n\n    const url = new URL(request.url);\n    const date = url.searchParams.get('date');\n    const category = url.searchParams.get('category');\n    const search = url.searchParams.get('search');\n    const page = parseInt(url.searchParams.get('page')) || 1;\n    const limit = parseInt(url.searchParams.get('limit')) || 20;\n\n    // Import archive functions and templates\n    const { getAvailableArchiveDates, getArchivedPapers, getArchiveStatistics } = await import('./archive-manager.js');\n    const { generateEnhancedArchiveHTML } = await import('./archive-templates.js');\n\n    let papers = [];\n    let availableDates = [];\n    let statistics = null;\n    let selectedDate = date;\n\n    // Get available archive dates\n    try {\n      availableDates = await getAvailableArchiveDates(env);\n      if (availableDates.length > 0) {\n        statistics = await getArchiveStatistics(env);\n      }\n    } catch (error) {\n      logger.warn('Failed to get archive data:', error.message);\n    }\n\n    // Get papers for specific date or recent papers\n    if (date) {\n      try {\n        validateDate(date);\n        const archive = await getArchivedPapers(date, env);\n        if (archive) {\n          papers = archive.papers;\n        }\n      } catch (error) {\n        logger.warn(`Failed to get archive for date ${date}:`, error.message);\n      }\n    } else if (availableDates.length > 0) {\n      // Get most recent archive\n      const recentDate = availableDates[0];\n      try {\n        const archive = await getArchivedPapers(recentDate, env);\n        if (archive) {\n          papers = archive.papers;\n          selectedDate = recentDate;\n        }\n      } catch (error) {\n        logger.warn(`Failed to get recent archive:`, error.message);\n      }\n    }\n\n    // Apply filters\n    if (category) {\n      papers = papers.filter(paper => {\n        const paperCategory = paper.analysis?.category || paper.category || 'other';\n        return paperCategory.toLowerCase() === category.toLowerCase();\n      });\n    }\n\n    if (search) {\n      const searchTerms = search.toLowerCase().split(' ').filter(term => term.length > 2);\n      papers = papers.filter(paper => {\n        const searchableText = [\n          paper.title,\n          paper.abstract,\n          ...(paper.authors || []),\n          ...(paper.analysis?.keywords || [])\n        ].join(' ').toLowerCase();\n\n        return searchTerms.every(term => searchableText.includes(term));\n      });\n    }\n\n    // Sort by score\n    papers.sort((a, b) => {\n      const scoreA = a.analysis?.relevance_score || 5;\n      const scoreB = b.analysis?.relevance_score || 5;\n      return scoreB - scoreA;\n    });\n\n    // Pagination\n    const totalPapers = papers.length;\n    const totalPages = Math.ceil(totalPapers / limit);\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedPapers = papers.slice(startIndex, endIndex);\n\n    // Generate archive HTML\n    const archiveHTML = generateEnhancedArchiveHTML({\n      papers: paginatedPapers,\n      availableDates,\n      statistics,\n      selectedDate,\n      filters: { category, search },\n      pagination: {\n        currentPage: page,\n        totalPages,\n        totalPapers,\n        hasNext: endIndex < totalPapers,\n        hasPrev: page > 1\n      }\n    });\n\n    return htmlResponse(archiveHTML);\n  } catch (error) {\n    logger.error('Error in archive page handler:', error);\n    return htmlResponse(`\n      <!DOCTYPE html>\n      <html>\n      <head><title>Archive Error - PaperDog</title></head>\n      <body>\n        <h1>Archive Error</h1>\n        <p>Unable to load archive. Please try again later.</p>\n        <p>Error: ${error.message}</p>\n      </body>\n      </html>\n    `);\n  }\n}\n\n// Export all handlers for easy access\nexport const handlers = {\n  handleRoot,\n  handlePapersList,\n  handlePapersByDate,\n  handlePaperById,\n  handleUpdatePapers,\n  handleCategories,\n  handleSearch,\n  handleRSSFeed,\n  handleAbout,\n  handleScoringReport,\n  handleTrackPaperView,\n  handleArchivePage\n};\n", "import { PAPER_SOURCES, SOURCE_CONFIGS, AppError } from './config.js';\nimport { fetchWithTimeout, sleep } from './utils.js';\n\n// Timeout utility for overall operation timeout\nfunction createTimeout(ms, message) {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new Error(message));\n    }, ms);\n  });\n}\n\n// Simple logger for Worker environment\nconst logger = {\n  info: (msg, data = {}) => console.log(`[INFO] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[DEBUG] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[WARN] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[ERROR] ${msg}`, data)\n};\n\n// JSON content sanitization for abstracts and translations\nfunction sanitizeJsonContent(content) {\n  if (!content || typeof content !== 'string') {\n    return content;\n  }\n\n  // Try to parse if it looks like JSON\n  if (content.trim().startsWith('{') || content.trim().startsWith('[')) {\n    try {\n      const parsed = JSON.parse(content);\n      // Extract meaningful text from JSON structures\n      if (typeof parsed === 'object') {\n        // Handle different JSON structures\n        if (parsed.abstract) return parsed.abstract;\n        if (parsed.description) return parsed.description;\n        if (parsed.summary) return parsed.summary;\n        if (parsed.text) return parsed.text;\n        if (parsed.challenges && Array.isArray(parsed.challenges)) {\n          return parsed.challenges.join('. ');\n        }\n        if (parsed.introduction) return parsed.introduction;\n        if (parsed.innovations) return parsed.innovations;\n        if (parsed.experiments) return parsed.experiments;\n        if (parsed.insights) return parsed.insights;\n\n        // If it's an array of strings, join them\n        if (Array.isArray(parsed)) {\n          return parsed.filter(item => typeof item === 'string').join('. ');\n        }\n\n        // Fallback: stringify the object nicely\n        return JSON.stringify(parsed, null, 2);\n      }\n    } catch (e) {\n      // If parsing fails, return original content\n      logger.debug('Failed to parse JSON content, using original', { content: content.substring(0, 100) });\n    }\n  }\n\n  return content;\n}\n\n// Circuit breaker for API reliability\nclass CircuitBreaker {\n  constructor(name, options = {}) {\n    this.name = name;\n    this.failureThreshold = options.failureThreshold || 5;\n    this.resetTimeout = options.resetTimeout || 60000; // 1 minute\n    this.failures = 0;\n    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN\n    this.nextAttempt = Date.now();\n    this.successCount = 0;\n    this.lastFailureTime = null;\n  }\n\n  async execute(operation) {\n    if (this.state === 'OPEN') {\n      if (Date.now() < this.nextAttempt) {\n        throw new Error(`Circuit breaker ${this.name} is OPEN until ${new Date(this.nextAttempt).toISOString()}`);\n      } else {\n        this.state = 'HALF_OPEN';\n        logger.info(`Circuit breaker ${this.name} entering HALF_OPEN state`);\n      }\n    }\n\n    try {\n      const result = await operation();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  onSuccess() {\n    this.successCount++;\n    this.failures = 0;\n\n    if (this.state === 'HALF_OPEN') {\n      this.state = 'CLOSED';\n      logger.info(`Circuit breaker ${this.name} is now CLOSED`);\n    }\n  }\n\n  onFailure() {\n    this.failures++;\n    this.lastFailureTime = Date.now();\n    this.successCount = 0;\n\n    if (this.failures >= this.failureThreshold) {\n      this.state = 'OPEN';\n      this.nextAttempt = Date.now() + this.resetTimeout;\n      logger.warn(`Circuit breaker ${this.name} is now OPEN until ${new Date(this.nextAttempt).toISOString()}`);\n    }\n  }\n\n  getStatus() {\n    return {\n      name: this.name,\n      state: this.state,\n      failures: this.failures,\n      successCount: this.successCount,\n      nextAttempt: this.state === 'OPEN' ? new Date(this.nextAttempt).toISOString() : null,\n      lastFailureTime: this.lastFailureTime ? new Date(this.lastFailureTime).toISOString() : null\n    };\n  }\n}\n\n// Global circuit breakers\nconst circuitBreakers = {\n  huggingfaceApi: new CircuitBreaker('huggingface-api', { failureThreshold: 3, resetTimeout: 300000 }),\n  huggingfaceScraping: new CircuitBreaker('huggingface-scraping', { failureThreshold: 5, resetTimeout: 600000 }),\n  arxivApi: new CircuitBreaker('arxiv-api', { failureThreshold: 3, resetTimeout: 300000 })\n};\n\nexport async function scrapeDailyPapers() {\n  const today = new Date().toISOString().split('T')[0];\n  logger.info(`Starting daily paper scraping for ${today}`);\n\n  try {\n    // Add overall timeout protection for the entire scraping process\n    const scrapingPromise = Promise.allSettled([\n      scrapeArxivPapers(),\n      scrapeHuggingfacePapers()\n    ]);\n\n    const timeoutPromise = createTimeout(5 * 60 * 1000, 'Paper scraping timeout after 5 minutes');\n\n    const [arxivPapers, huggingfacePapers] = await Promise.race([\n      scrapingPromise,\n      timeoutPromise.then(() => { throw new Error('Paper scraping timeout after 5 minutes'); })\n    ]);\n    \n    const allPapers = [];\n    \n    // Process arXiv results\n    if (arxivPapers.status === 'fulfilled' && arxivPapers.value.length > 0) {\n      logger.info(`Scraped ${arxivPapers.value.length} papers from arXiv`);\n      allPapers.push(...arxivPapers.value);\n    } else if (arxivPapers.status === 'rejected') {\n      logger.error('Failed to scrape arXiv papers:', { error: arxivPapers.reason.message });\n    }\n    \n    // Process HuggingFace results\n    if (huggingfacePapers.status === 'fulfilled' && huggingfacePapers.value.length > 0) {\n      logger.info(`Scraped ${huggingfacePapers.value.length} papers from HuggingFace`);\n      allPapers.push(...huggingfacePapers.value);\n    } else if (huggingfacePapers.status === 'rejected') {\n      logger.error('Failed to scrape HuggingFace papers:', { error: huggingfacePapers.reason.message });\n    }\n    \n    // Remove duplicates based on title similarity\n    const uniquePapers = removeDuplicatePapers(allPapers);\n    logger.info(`Total unique papers scraped: ${uniquePapers.length}`);\n    \n    return uniquePapers;\n  } catch (error) {\n    logger.error('Error in daily paper scraping:', error);\n    throw new AppError(`Failed to scrape daily papers: ${error.message}`);\n  }\n}\n\nasync function scrapeArxivPapers() {\n  return await circuitBreakers.arxivApi.execute(async () => {\n    const config = SOURCE_CONFIGS.arxiv;\n    const categories = PAPER_SOURCES.arxiv.categories;\n    const papers = [];\n\n    logger.info(`Scraping arXiv papers from categories: ${categories.join(', ')}`);\n\n    // Build query for all categories\n    const categoryQuery = categories.map(cat => `cat:${cat}`).join(' OR ');\n\n    // Try without date filter first to get recent papers\n    const searchQuery = categoryQuery;\n    const encodedQuery = encodeURIComponent(searchQuery);\n\n    const url = `${PAPER_SOURCES.arxiv.baseUrl}?search_query=${encodedQuery}&start=0&max_results=${config.maxPapersPerRequest}&sortBy=${PAPER_SOURCES.arxiv.sortBy}&sortOrder=${PAPER_SOURCES.arxiv.sortOrder}`;\n\n    try {\n      const response = await fetchWithTimeout(url, 30000);\n      const xmlContent = await response.text();\n\n      // Parse XML response using regex-based parser for Cloudflare Workers\n      const entries = parseArxivXML(xmlContent);\n\n      logger.info(`Found ${entries.length} entries in arXiv response`);\n\n      for (let i = 0; i < entries.length; i++) {\n        try {\n          const entry = entries[i];\n          const paper = parseArxivEntry(entry);\n          if (paper) {\n            papers.push(paper);\n          }\n        } catch (error) {\n          logger.warn(`Failed to parse arXiv entry ${i}:`, { error: error.message });\n        }\n      }\n\n      return papers;\n    } catch (error) {\n      logger.error('Error scraping arXiv:', error);\n      throw new AppError(`arXiv scraping failed: ${error.message}`);\n    }\n  });\n}\n\nfunction parseArxivEntry(entry) {\n  try {\n    // The entry is now an object with pre-extracted properties\n    const id = entry.id;\n    const title = entry.title;\n    const summary = entry.summary;\n    const published = entry.published;\n    const updated = entry.updated;\n    const primary_category = entry.primary_category;\n    const authors = entry.authors || [];\n    const arxivId = entry.arxiv_id || '';\n    \n    if (!title || !summary) {\n      logger.warn('Missing required fields in arXiv entry');\n      return null;\n    }\n    \n    return {\n      id: `arxiv_${arxivId}`,\n      arxiv_id: arxivId,\n      title: title,\n      abstract: summary,\n      authors: authors,\n      published: published || '',\n      updated: updated || '',\n      category: primary_category || '',\n      source: 'arxiv',\n      original_source: 'arxiv', // \u660E\u786E\u6807\u8BB0\u539F\u59CB\u6765\u6E90\n      url: id,\n      pdf_url: id.replace('/abs/', '/pdf/') + '.pdf',\n      scraped_at: new Date().toISOString()\n    };\n  } catch (error) {\n    logger.error('Error parsing arXiv entry:', error);\n    return null;\n  }\n}\n\nasync function scrapeHuggingfacePapers() {\n  return await circuitBreakers.huggingfaceScraping.execute(async () => {\n    const config = SOURCE_CONFIGS.huggingface;\n    const papers = [];\n\n    logger.info('Scraping HuggingFace papers');\n\n    // Try HuggingFace API first with circuit breaker\n    try {\n      const apiPapers = await circuitBreakers.huggingfaceApi.execute(async () => {\n        const apiUrl = 'https://huggingface.co/api/papers';\n        const response = await fetchWithTimeout(apiUrl, 30000, {\n          headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n            'Accept': 'application/json',\n            'Accept-Language': 'en-US,en;q=0.9',\n            'Referer': 'https://huggingface.co/',\n            'Origin': 'https://huggingface.co'\n          }\n        });\n\n        if (response.ok) {\n          const apiData = await response.json();\n          logger.info(`HuggingFace API returned ${apiData.length || 0} papers`);\n          return parseHuggingFaceAPIResponse(apiData);\n        } else {\n          throw new Error(`HuggingFace API returned ${response.status}`);\n        }\n      });\n\n      if (apiPapers && apiPapers.length > 0) {\n        return apiPapers;\n      }\n    } catch (apiError) {\n      logger.debug('HuggingFace API not available:', apiError.message);\n    }\n\n    // Alternative 1: Enhanced web scraping\n    try {\n      logger.info('Attempting enhanced HuggingFace web scraping');\n      const url = 'https://huggingface.co/papers';\n      const response = await fetchWithTimeout(url, 30000, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n          'Accept-Language': 'en-US,en;q=0.9',\n          'Accept-Encoding': 'gzip, deflate, br',\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      });\n\n      if (response.ok) {\n        const htmlContent = await response.text();\n        const paperElements = parseHuggingfaceHTML(htmlContent);\n\n        logger.info(`Found ${paperElements.length} paper elements on HuggingFace`);\n\n        // Process papers with enhanced abstract retrieval\n        for (let i = 0; i < Math.min(paperElements.length, config.maxPapersPerRequest); i++) {\n          try {\n            const paper = await parseHuggingfacePaper(paperElements[i]);\n            if (paper) {\n              // Accept all papers regardless of abstract quality - we'll analyze what we have\n              papers.push(paper);\n              logger.debug(`Added paper (quality score: ${paper.abstract_quality}): ${paper.title.substring(0, 50)}...`);\n            }\n          } catch (error) {\n            logger.warn(`Failed to parse HuggingFace paper ${i}:`, { error: error.message });\n          }\n\n          if (i < paperElements.length - 1) {\n            await sleep(config.requestDelay);\n          }\n        }\n\n        if (papers.length > 0) {\n          logger.info(`Successfully retrieved ${papers.length} high-quality papers from HuggingFace`);\n          return papers;\n        }\n      }\n    } catch (scrapingError) {\n      logger.warn('Enhanced HuggingFace scraping failed:', scrapingError.message);\n    }\n\n    // Alternative 2: Datasets API\n    try {\n      logger.info('Trying HuggingFace datasets API');\n      const datasetsUrl = 'https://huggingface.co/api/datasets?full=true&limit=20';\n      const response = await fetchWithTimeout(datasetsUrl, 30000, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Accept': 'application/json',\n          'Accept-Language': 'en-US,en;q=0.9'\n        }\n      });\n\n      if (response.ok) {\n        const datasetsData = await response.json();\n        const datasetPapers = parseHuggingFaceDatasets(datasetsData);\n\n        if (datasetPapers.length > 0) {\n          logger.info(`Found ${datasetPapers.length} papers from HuggingFace datasets`);\n          return datasetPapers.slice(0, config.maxPapersPerRequest);\n        }\n      }\n    } catch (datasetError) {\n      logger.debug('HuggingFace datasets API not available:', datasetError.message);\n    }\n\n    // Alternative 3: Trending papers fallback\n    logger.info('Generating fallback HuggingFace papers from trending topics');\n    const fallbackPapers = await generateFallbackHuggingFacePapers(config.maxPapersPerRequest);\n\n    if (fallbackPapers.length > 0) {\n      logger.info(`Generated ${fallbackPapers.length} fallback HuggingFace papers`);\n      return fallbackPapers;\n    }\n\n    logger.warn('All HuggingFace scraping methods failed, returning empty array');\n    return [];\n  });\n}\n\nasync function parseHuggingfacePaper(element, apiKey = null) {\n  try {\n    // The element is now an object with pre-extracted properties\n    let title = element.title;\n    let abstract = element.abstract;\n    let link = element.link;\n    let authors = element.authors || [];\n\n    if (!title) {\n      logger.warn('No title found in HuggingFace paper element');\n      return null;\n    }\n\n    // Enhanced abstract retrieval with fallback chain\n    if (!abstract || abstract.length < 50) {\n      logger.debug(`Abstract too short or missing for \"${title}\", attempting retrieval...`);\n\n      // Try individual paper page scraping\n      if (link) {\n        const fullUrl = link.startsWith('http') ? link : `https://huggingface.co${link}`;\n        abstract = await scrapePaperFromIndividualPage(fullUrl) || abstract;\n\n        // Still no abstract, try arXiv cross-reference\n        if (!abstract || abstract.length < 50) {\n          logger.debug(`Attempting arXiv cross-reference for \"${title}\"...`);\n          abstract = await crossReferenceArxiv(title, authors) || abstract;\n        }\n      }\n    }\n\n    // Abstract quality validation\n    const abstractQuality = validateAbstractQuality(abstract);\n    if (abstractQuality.score < 3) {\n      logger.warn(`Low quality abstract for \"${title}\" (score: ${abstractQuality.score}): ${abstractQuality.reason}`);\n    }\n\n    // Generate ID from title\n    const id = `hf_${title.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase()}_${Date.now()}`;\n\n    // Infer category from title and abstract\n    const text = `${title} ${abstract}`.toLowerCase();\n    let category = 'machine-learning';\n\n    if (text.includes('vision') || text.includes('image') || text.includes('visual')) {\n      category = 'computer_vision';\n    } else if (text.includes('nlp') || text.includes('language') || text.includes('text')) {\n      category = 'natural_language_processing';\n    } else if (text.includes('reinforcement') || text.includes('rl') || text.includes('agent')) {\n      category = 'reinforcement_learning';\n    }\n\n    return {\n      id: id,\n      title: title,\n      abstract: abstract,\n      authors: authors,\n      published: new Date().toISOString().split('T')[0], // Default to today\n      updated: new Date().toISOString(),\n      category: category,\n      source: 'huggingface',\n      original_source: 'huggingface_enhanced', // Mark as enhanced scraping\n      url: link.startsWith('http') ? link : `https://huggingface.co${link}`,\n      pdf_url: '', // HuggingFace may not provide direct PDF links\n      scraped_at: new Date().toISOString(),\n      abstract_quality: abstractQuality.score\n    };\n  } catch (error) {\n    logger.error('Error parsing HuggingFace paper:', error);\n    return null;\n  }\n}\n\n// XML parsing function for Cloudflare Workers (no DOMParser)\nfunction parseArxivXML(xmlContent) {\n  const entries = [];\n  \n  // Extract entries using regex\n  const entryRegex = /<entry>([\\s\\S]*?)<\\/entry>/g;\n  let match;\n  \n  while ((match = entryRegex.exec(xmlContent)) !== null) {\n    const entryContent = match[1];\n    const entry = parseArxivEntryContent(entryContent);\n    if (entry) {\n      entries.push(entry);\n    }\n  }\n  \n  return entries;\n}\n\n// Parse individual arXiv entry content\nfunction parseArxivEntryContent(entryContent) {\n  try {\n    // Extract XML elements using regex\n    const extractElement = (tagName) => {\n      const match = entryContent.match(new RegExp(`<${tagName}[^>]*>([\\\\s\\\\S]*?)<\\\\/${tagName}>`));\n      return match ? match[1].trim() : '';\n    };\n    \n    const extractAttribute = (tagName, attrName) => {\n      const match = entryContent.match(new RegExp(`<${tagName}[^>]*${attrName}=\"([^\"]*)\"[^>]*>`));\n      return match ? match[1] : '';\n    };\n    \n    // Extract multiple elements\n    const extractElements = (tagName) => {\n      const elements = [];\n      const regex = new RegExp(`<${tagName}[^>]*>([\\\\s\\\\S]*?)<\\\\/${tagName}>`, 'g');\n      let match;\n      \n      while ((match = regex.exec(entryContent)) !== null) {\n        const content = match[1].trim();\n        if (content) {\n          elements.push(content);\n        }\n      }\n      return elements;\n    };\n    \n    const id = extractElement('id');\n    const title = extractElement('title');\n    const summary = extractElement('summary');\n    const published = extractElement('published');\n    const updated = extractElement('updated');\n    \n    if (!title || !summary) {\n      logger.warn('Missing required fields in arXiv entry');\n      return null;\n    }\n    \n    // Extract authors\n    const authors = [];\n    const authorContents = extractElements('author');\n    for (const authorContent of authorContents) {\n      const nameMatch = authorContent.match(/<name[^>]*>([\\s\\S]*?)<\\/name>/);\n      if (nameMatch) {\n        authors.push(nameMatch[1].trim());\n      }\n    }\n    \n    // Extract arXiv ID from URL\n    const arxivId = id.includes('arxiv.org/abs/') ? id.split('arxiv.org/abs/')[1] : '';\n    \n    return {\n      id: id,\n      title: title,\n      summary: summary,\n      published: published,\n      updated: updated,\n      authors: authors,\n      primary_category: extractAttribute('primary_category', 'term'),\n      arxiv_id: arxivId\n    };\n  } catch (error) {\n    logger.error('Error parsing arXiv entry content:', error);\n    return null;\n  }\n}\n\n// HTML parsing function for Cloudflare Workers (enhanced for HuggingFace)\nfunction parseHuggingfaceHTML(htmlContent) {\n  const papers = [];\n  \n  // Modern HuggingFace papers page structure patterns\n  const patterns = [\n    // Pattern 1: Look for paper list items with data-testid (modern React apps)\n    /<div[^>]*data-testid=\"[^\"]*(paper|card|item)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n    \n    // Pattern 2: Look for article elements with paper content\n    /<article[^>]*>([\\s\\S]*?)<\\/article>/gi,\n    \n    // Pattern 3: Look for paper cards with specific classes (modern class patterns)\n    /<div[^>]*class=\"[^\"]*(paper|card|item|post|content)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n    \n    // Pattern 4: Look for links to paper details\n    /<a[^>]*href=\"\\/papers\\/[^\"]*\"[^>]*>([\\s\\S]*?)<\\/a>/gi,\n    \n    // Pattern 5: Look for grid items (common in modern layouts)\n    /<div[^>]*class=\"[^\"]*(grid|container|flex)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n    \n    // Pattern 6: Look for list items in modern UI frameworks\n    /<li[^>]*class=\"[^\"]*(paper|card|item)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/li>/gi,\n    \n    // Pattern 7: Look for components with paper-related attributes\n    /<[^>]*(paper|post|article)[^>]*>([\\s\\S]*?)<\\/[^>]*>/gi\n  ];\n  \n  for (const pattern of patterns) {\n    let match;\n    while ((match = pattern.exec(htmlContent)) !== null) {\n      const paperContent = match[1] || match[2]; // Handle different pattern groups\n      const paper = parseHuggingfacePaperContent(paperContent);\n      if (paper && paper.title && paper.title !== 'Daily Papers') {\n        // Extract the full link from the original match if not found in content\n        if (!paper.link) {\n          const linkMatch = match[0].match(/href=\"([^\"]*)\"/);\n          if (linkMatch) {\n            paper.link = linkMatch[1];\n          }\n        }\n        \n        // Ensure we don't add duplicate papers\n        const isDuplicate = papers.some(p => p.title === paper.title);\n        if (!isDuplicate) {\n          papers.push(paper);\n        }\n      }\n    }\n    \n    // If we found papers with this pattern, don't try others\n    if (papers.length > 3) {\n      break;\n    }\n  }\n  \n  // Fallback: Look for individual paper elements using more aggressive parsing\n  if (papers.length < 3) {\n    logger.info('Using enhanced fallback parsing for HuggingFace papers');\n    const fallbackPapers = extractPapersFromModernStructure(htmlContent);\n    papers.push(...fallbackPapers.filter(p => p.title && p.title !== 'Daily Papers'));\n    \n    // Remove duplicates\n    const uniquePapers = [];\n    const seenTitles = new Set();\n    \n    for (const paper of papers) {\n      if (paper.title && !seenTitles.has(paper.title)) {\n        seenTitles.add(paper.title);\n        uniquePapers.push(paper);\n      }\n    }\n    \n    return uniquePapers;\n  }\n  \n  logger.info(`Extracted ${papers.length} papers from HuggingFace HTML`);\n  return papers;\n}\n\n// Scrape abstract from individual HuggingFace paper page\nasync function scrapePaperFromIndividualPage(paperUrl) {\n  try {\n    logger.debug(`Scraping individual paper page: ${paperUrl}`);\n\n    const response = await fetchWithTimeout(paperUrl, 15000, {\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.9',\n        'Accept-Encoding': 'gzip, deflate, br'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch paper page: ${response.status}`);\n    }\n\n    const htmlContent = await response.text();\n\n    logger.debug(`Retrieved HTML content (${htmlContent.length} chars) from ${paperUrl}`);\n\n    // Enhanced abstract extraction from individual paper pages\n    const abstractExtractionPatterns = [\n      // HuggingFace specific pattern - exact match for <div class=\"abstract\">\n      /<div[^>]*class=\"abstract\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n      // HuggingFace meta tags\n      /<meta[^>]*property=\"og:description\"[^>]*content=\"([^\"]*)\"[^>]*>/gi,\n      /<meta[^>]*name=\"description\"[^>]*content=\"([^\"]*)\"[^>]*>/gi,\n      // General abstract patterns (fallbacks)\n      /<div[^>]*class=\"[^\"]*abstract[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n      /<section[^>]*class=\"[^\"]*abstract[^\"]*\"[^>]*>([\\s\\S]*?)<\\/section>/gi,\n      /<div[^>]*class=\"[^\"]*(?:description|summary)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n      // Paragraph patterns\n      /<p[^>]*class=\"[^\"]*abstract[^\"]*\"[^>]*>([\\s\\S]*?)<\\/p>/gi,\n      // Data attribute patterns\n      /<div[^>]*data-testid=\"[^\"]*abstract[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n      // Content div patterns\n      /<div[^>]*class=\"[^\"]*content[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi\n    ];\n\n    logger.debug(`Trying ${abstractExtractionPatterns.length} abstract extraction patterns`);\n\n    for (let i = 0; i < abstractExtractionPatterns.length; i++) {\n      const pattern = abstractExtractionPatterns[i];\n      let match;\n      try {\n        while ((match = pattern.exec(htmlContent)) !== null) {\n          const content = match[1] || match[0];\n          if (content) {\n            const cleanContent = content\n              .replace(/<[^>]*>/g, '')\n              .replace(/\\s+/g, ' ')\n              .trim();\n\n            // Lowered length requirement from 100 to 50 chars, and added debug info\n            if (cleanContent.length > 50 &&\n                !cleanContent.includes('Sign up') &&\n                !cleanContent.includes('Login') &&\n                !cleanContent.includes('Subscribe') &&\n                !cleanContent.includes('Follow')) {\n              logger.debug(`Pattern ${i + 1} found abstract (${cleanContent.length} chars): ${cleanContent.substring(0, 100)}...`);\n              return cleanContent;\n            } else if (cleanContent.length > 10) {\n              logger.debug(`Pattern ${i + 1} found content but too short or filtered: ${cleanContent.substring(0, 50)}...`);\n            }\n          }\n        }\n\n        logger.debug(`Pattern ${i + 1} found no matches`);\n      } catch (error) {\n        logger.warn(`Error applying pattern ${i + 1} for abstract extraction: ${error.message}`);\n      }\n    }\n\n    logger.debug(`No abstract found on individual page: ${paperUrl}`);\n    return null;\n\n  } catch (error) {\n    logger.warn(`Failed to scrape individual paper page ${paperUrl}:`, error.message);\n    return null;\n  }\n}\n\n// Cross-reference with arXiv for missing abstracts\nasync function crossReferenceArxiv(title, authors = []) {\n  try {\n    logger.debug(`Cross-referencing arXiv for title: ${title.substring(0, 50)}...`);\n\n    // Create search query from title and optionally authors\n    const titleWords = title.toLowerCase().split(' ').slice(0, 5).join(' ');\n    const searchQuery = authors.length > 0 ?\n      `${titleWords} ${authors[0].toLowerCase()}` :\n      titleWords;\n\n    const encodedQuery = encodeURIComponent(searchQuery);\n    const arxivUrl = `https://export.arxiv.org/api/query?search_query=all:${encodedQuery}&start=0&max_results=3&sortBy=relevance&sortOrder=descending`;\n\n    const response = await fetchWithTimeout(arxivUrl, 10000);\n    const xmlContent = await response.text();\n\n    const entries = parseArxivXML(xmlContent);\n\n    if (entries.length > 0) {\n      // Find the best match based on title similarity\n      let bestMatch = null;\n      let highestSimilarity = 0;\n\n      for (const entry of entries) {\n        const similarity = calculateTitleSimilarity(title.toLowerCase(), entry.title.toLowerCase());\n        if (similarity > highestSimilarity && similarity > 0.7) {\n          highestSimilarity = similarity;\n          bestMatch = entry;\n        }\n      }\n\n      if (bestMatch && bestMatch.summary.length > 100) {\n        logger.debug(`Found arXiv cross-reference with similarity ${highestSimilarity.toFixed(2)}: ${bestMatch.title.substring(0, 50)}...`);\n        return bestMatch.summary;\n      }\n    }\n\n    logger.debug(`No suitable arXiv cross-reference found for: ${title.substring(0, 50)}...`);\n    return null;\n\n  } catch (error) {\n    logger.warn(`Failed to cross-reference arXiv for \"${title.substring(0, 50)}...\":`, error.message);\n    return null;\n  }\n}\n\n// Calculate title similarity using simple string matching\nfunction calculateTitleSimilarity(title1, title2) {\n  const words1 = title1.toLowerCase().split(/\\s+/);\n  const words2 = title2.toLowerCase().split(/\\s+/);\n\n  const commonWords = words1.filter(word => word.length > 3 && words2.includes(word));\n  const totalUniqueWords = [...new Set([...words1, ...words2])].filter(word => word.length > 3);\n\n  return commonWords.length / totalUniqueWords.length;\n}\n\n// Validate abstract quality (more lenient scoring)\nfunction validateAbstractQuality(abstract) {\n  if (!abstract || typeof abstract !== 'string') {\n    return { score: 1, reason: 'No abstract available - will use title-only analysis' }; // Give 1 point instead of 0\n  }\n\n  const length = abstract.trim().length;\n  const words = abstract.trim().split(/\\s+/);\n\n  // More lenient quality criteria\n  const checks = {\n    length: length >= 50 ? 2 : (length >= 20 ? 1 : 0), // Lowered from 100 to 50, 50 to 20\n    wordCount: words.length >= 10 ? 2 : (words.length >= 5 ? 1 : 0), // Lowered from 20 to 10, 10 to 5\n    hasTechnicalTerms: /\\b(method|model|algorithm|approach|technique|framework|architecture|system|experiment|result|performance|evaluation|analysis|dataset|training|learning|network|transformer|neural|deep)\\b/i.test(abstract) ? 1 : 0, // Reduced from 2 to 1\n    notGeneric: !/\\b(this paper|we present|in this work|our approach|the proposed)\\b/i.test(abstract.substring(0, 100)) ? 1 : 0,\n    notSpam: !/(sign up|subscribe|follow|click here|buy now|free trial)/i.test(abstract) ? 1 : 0\n  };\n\n  const score = Object.values(checks).reduce((sum, val) => sum + val, 0);\n  const maxScore = Object.keys(checks).length;\n\n  let reason = '';\n  if (score < 2) { // Lowered threshold from 3 to 2\n    if (length < 20) reason = 'Very short abstract';\n    else if (words.length < 5) reason = 'Very few words';\n    else if (!checks.hasTechnicalTerms) reason = 'Limited technical content';\n    else if (!checks.notGeneric) reason = 'Generic content';\n    else if (!checks.notSpam) reason = 'Contains spam indicators';\n  } else {\n    reason = 'Acceptable abstract quality';\n  }\n\n  return { score, maxScore, reason };\n}\n\n// Parse individual HuggingFace paper content\nfunction parseHuggingfacePaperContent(paperContent) {\n  try {\n    // Enhanced extraction with multiple strategies\n    const extractText = (tag, attributes = '') => {\n      const match = paperContent.match(new RegExp(`<${tag}${attributes}[^>]*>([\\\\s\\\\S]*?)<\\\\/${tag}>`, 'i'));\n      return match ? match[1].replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim() : '';\n    };\n    \n    // Extract title from various possible tags and classes\n    let title = extractText('h1') || extractText('h2') || extractText('h3') || \n                extractText('h4') || extractText('h5') || extractText('h6');\n    \n    // Try to find title in specific structures\n    if (!title) {\n      const titleMatch = paperContent.match(/<[^>]*class=\"[^\"]*title[^\"]*\"[^>]*>([^<]*)<\\/[^>]*>/i);\n      title = titleMatch ? titleMatch[1].trim() : '';\n    }\n    \n    if (!title) {\n      return null;\n    }\n    \n    // Enhanced abstract extraction\n    let abstract = '';\n    \n    // Try multiple strategies for abstract extraction\n    const strategies = [\n      // Strategy 1: Look for abstract/description in paragraphs (modern patterns)\n      () => {\n        const paragraphs = paperContent.match(/<p[^>]*>([\\s\\S]*?)<\\/p>/gi);\n        if (paragraphs) {\n          // Take the longest paragraph as likely abstract\n          const longestParagraph = paragraphs\n            .map(p => p.replace(/<[^>]*>/g, '').trim())\n            .filter(p => p.length > 15 && !p.includes('Read more') && !p.includes('Continue reading'))\n            .sort((a, b) => b.length - a.length)[0];\n          return longestParagraph || '';\n        }\n        return '';\n      },\n      \n      // Strategy 2: Look for description meta tags\n      () => {\n        const descMatch = paperContent.match(/<meta[^>]*(name|property)=\"(description|og:description)\"[^>]*content=\"([^\"]*)\"[^>]*>/i);\n        return descMatch ? descMatch[3] : '';\n      },\n      \n      // Strategy 3: Look for abstract-specific divs with modern class patterns\n      () => {\n        const abstractPatterns = [\n          /<div[^>]*class=\"[^\"]*(abstract|description|summary|content)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n          /<div[^>]*data-testid=\"[^\"]*(abstract|description)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n          /<section[^>]*class=\"[^\"]*(abstract|description)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/section>/gi,\n          /<div[^>]*data-testid=\"[^\"]*(paper|card)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n          /<div[^>]*class=\"[^\"]*(prose|markdown)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi\n        ];\n        \n        for (const pattern of abstractPatterns) {\n          const abstractMatch = paperContent.match(pattern);\n          if (abstractMatch && abstractMatch[1]) {\n            const content = abstractMatch[2] || abstractMatch[1];\n            const cleanContent = content.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n            if (cleanContent.length > 10) {\n              return sanitizeJsonContent(cleanContent);\n            }\n          }\n        }\n        return '';\n      },\n      \n      // Strategy 4: Look for summary sections with modern patterns\n      () => {\n        const summaryPatterns = [\n          /<div[^>]*class=\"[^\"]*summary[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n          /<p[^>]*class=\"[^\"]*summary[^\"]*\"[^>]*>([\\s\\S]*?)<\\/p>/gi,\n          /<div[^>]*data-testid=\"[^\"]*summary[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n          /<div[^>]*class=\"[^\"]*(text-gray|text-muted)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi\n        ];\n        \n        for (const pattern of summaryPatterns) {\n          const summaryMatch = paperContent.match(pattern);\n          if (summaryMatch && summaryMatch[1]) {\n            const content = summaryMatch[1].replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n            if (content.length > 10) {\n              return sanitizeJsonContent(content);\n            }\n          }\n        }\n        return '';\n      },\n      \n      // Strategy 5: Look for content in article/body sections\n      () => {\n        const contentSections = paperContent.match(/<(article|main|section)[^>]*>([\\s\\S]*?)<\\/\\1>/gi);\n        if (contentSections) {\n          // Extract text from the first content section\n          const text = contentSections[0].replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n          // Return the first 200 characters as abstract\n          return text.length > 50 ? text.substring(0, 200) + '...' : '';\n        }\n        return '';\n      },\n      \n      // Strategy 6: Look for modern React component patterns\n      () => {\n        // Modern frameworks often use data attributes\n        const modernPatterns = [\n          /<div[^>]*data-content=\"([^\"]*)\"[^>]*>/gi,\n          /<div[^>]*data-text=\"([^\"]*)\"[^>]*>/gi,\n          /<span[^>]*data-testid=\"[^\"]*text[^\"]*\"[^>]*>([\\s\\S]*?)<\\/span>/gi\n        ];\n        \n        for (const pattern of modernPatterns) {\n          const match = paperContent.match(pattern);\n          if (match) {\n            const content = match[1] || match[0].replace(/<[^>]*>/g, '');\n            const cleanContent = content.replace(/\\s+/g, ' ').trim();\n            if (cleanContent.length > 20) {\n              return sanitizeJsonContent(cleanContent);\n            }\n          }\n        }\n        return '';\n      }\n    ];\n    \n    // Try each strategy until we get an abstract\n    for (const strategy of strategies) {\n      abstract = strategy();\n      if (abstract && abstract.length > 10 && !abstract.includes('Sign up') && !abstract.includes('Subscribe')) {\n        logger.debug(`Found abstract using strategy: ${abstract.substring(0, 50)}...`);\n        break;\n      }\n    }\n    \n    // Clean up abstract\n    abstract = abstract.replace(/\\s+/g, ' ').trim();\n    \n    // Log abstract extraction results for debugging\n    if (abstract && abstract.length > 0) {\n      logger.debug(`Extracted abstract for \"${title}\": ${abstract.length} chars - \"${abstract.substring(0, 60)}${abstract.length > 60 ? '...' : ''}\"`);\n    } else {\n      logger.warn(`No abstract extracted for paper: ${title}. Content preview: ${paperContent.substring(0, 200)}...`);\n    }\n    \n    // Extract link\n    let link = '';\n    const linkMatch = paperContent.match(/<a[^>]*href=\"([^\"]*)\"[^>]*>/i);\n    if (linkMatch) {\n      link = linkMatch[1];\n    }\n    \n    // Extract authors if available\n    let authors = [];\n    const authorMatch = paperContent.match(/<[^>]*class=\"[^\"]*author[^\"]*\"[^>]*>([^<]*)<\\/[^>]*>/gi);\n    if (authorMatch) {\n      authors = authorMatch.map(match => match.replace(/<[^>]*>/g, '').trim()).filter(a => a);\n    }\n    \n    return {\n      title: title,\n      abstract: abstract,\n      link: link,\n      authors: authors\n    };\n  } catch (error) {\n    logger.error('Error parsing HuggingFace paper content:', error);\n    return null;\n  }\n}\n\n// Fallback function to extract papers from HTML structure\nfunction extractPapersFromStructure(htmlContent) {\n  const papers = [];\n  \n  // Look for individual paper elements by searching for common patterns\n  const paperElements = htmlContent.match(/<[^>]*(paper|article)[^>]*>[\\s\\S]*?<\\/[^>]*(paper|article)[^>]*>/gi);\n  \n  if (paperElements) {\n    for (const element of paperElements) {\n      const paper = extractPaperFromElement(element);\n      if (paper) {\n        papers.push(paper);\n      }\n    }\n  }\n  \n  return papers;\n}\n\n// Enhanced function to extract papers from modern website structure\nfunction extractPapersFromModernStructure(htmlContent) {\n  const papers = [];\n  \n  // Strategy 1: Look for JSON-LD structured data (common in modern sites)\n  try {\n    const jsonLdRegex = /<script[^>]*type=\"application\\/ld\\+json\"[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    let jsonLdMatch;\n    \n    while ((jsonLdMatch = jsonLdRegex.exec(htmlContent)) !== null) {\n      try {\n        const jsonData = JSON.parse(jsonLdMatch[1]);\n        if (jsonData['@type'] === 'ItemList' && jsonData.itemListElement) {\n          jsonData.itemListElement.forEach(item => {\n            if (item.item && item.item.name) {\n              papers.push({\n                title: item.item.name,\n                abstract: item.item.description || '',\n                link: item.item.url || ''\n              });\n            }\n          });\n        }\n      } catch (e) {\n        // JSON parsing failed, continue\n      }\n    }\n  } catch (error) {\n    logger.debug('JSON-LD parsing failed:', error.message);\n  }\n  \n  // Strategy 2: Look for meta tags with paper information\n  const metaTags = htmlContent.match(/<meta[^>]*>/gi) || [];\n  let currentPaper = null;\n  \n  for (const tag of metaTags) {\n    const nameMatch = tag.match(/name=\"([^\"]*)\"/);\n    const contentMatch = tag.match(/content=\"([^\"]*)\"/);\n    \n    if (nameMatch && contentMatch) {\n      const name = nameMatch[1];\n      const content = contentMatch[1];\n      \n      if (name.includes('title') || name.includes('og:title')) {\n        if (currentPaper && currentPaper.title) {\n          papers.push(currentPaper);\n        }\n        currentPaper = { title: content, abstract: '', link: '' };\n      } else if (currentPaper && name.includes('description')) {\n        currentPaper.abstract = content;\n      }\n    }\n  }\n  \n  if (currentPaper && currentPaper.title) {\n    papers.push(currentPaper);\n  }\n  \n  // Strategy 3: Look for heading elements that might be paper titles\n  const headingRegex = /<h[1-6][^>]*>([^<]*)<\\/h[1-6]>/gi;\n  let headingMatch;\n  \n  while ((headingMatch = headingRegex.exec(htmlContent)) !== null) {\n    const title = headingMatch[1].trim();\n    if (title.length > 10 && !title.includes('Menu') && !title.includes('Footer')) {\n      papers.push({\n        title: title,\n        abstract: '',\n        link: ''\n      });\n    }\n  }\n  \n  // Remove duplicates and empty titles\n  const uniquePapers = [];\n  const seenTitles = new Set();\n  \n  for (const paper of papers) {\n    if (paper.title && paper.title.length > 5 && !seenTitles.has(paper.title)) {\n      seenTitles.add(paper.title);\n      uniquePapers.push(paper);\n    }\n  }\n  \n  return uniquePapers;\n}\n\n// Extract paper from a single HTML element\nfunction extractPaperFromElement(element) {\n  try {\n    // Extract title\n    const titleMatch = element.match(/<h[1-6][^>]*>([^<]*)<\\/h[1-6]>/i);\n    const title = titleMatch ? titleMatch[1].trim() : '';\n    \n    if (!title) {\n      return null;\n    }\n    \n    // Extract any paragraph content as potential abstract\n    const paragraphMatches = element.match(/<p[^>]*>([^<]*)<\\/p>/gi);\n    const abstract = paragraphMatches \n      ? paragraphMatches\n          .map(p => p.replace(/<[^>]*>/g, '').trim())\n          .filter(p => p.length > 20)\n          .join(' ')\n      : '';\n    \n    // Extract link\n    const linkMatch = element.match(/<a[^>]*href=\"\\/papers\\/[^\"]*\"[^>]*>/i);\n    const link = linkMatch ? linkMatch[0].match(/href=\"([^\"]*)\"/)[1] : '';\n    \n    return {\n      title: title,\n      abstract: abstract,\n      link: link,\n      authors: []\n    };\n  } catch (error) {\n    logger.error('Error extracting paper from element:', error);\n    return null;\n  }\n}\n\n// Parse HuggingFace API response\nfunction parseHuggingFaceAPIResponse(apiData) {\n  const papers = [];\n  \n  try {\n    const papersData = Array.isArray(apiData) ? apiData : (apiData.papers || []);\n    \n    for (const paperData of papersData) {\n      try {\n        const paper = {\n          id: `hf_${paperData.id || Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          title: paperData.title || '',\n          abstract: paperData.summary || paperData.abstract || '',\n          authors: paperData.authors || [],\n          published: paperData.publishedAt || new Date().toISOString().split('T')[0],\n          updated: paperData.updatedAt || new Date().toISOString(),\n          category: inferCategoryFromHF(paperData),\n          source: 'huggingface',\n          original_source: 'huggingface_api', // \u660E\u786E\u6807\u8BB0API\u6765\u6E90\n          url: paperData.url || `https://huggingface.co/papers/${paperData.id}`,\n          pdf_url: paperData.pdfUrl || '',\n          scraped_at: new Date().toISOString()\n        };\n        \n        if (paper.title) {\n          papers.push(paper);\n        }\n      } catch (error) {\n        logger.warn('Failed to parse HuggingFace API paper:', error);\n      }\n    }\n    \n    logger.info(`Successfully parsed ${papers.length} papers from HuggingFace API`);\n    return papers;\n    \n  } catch (error) {\n    logger.error('Failed to parse HuggingFace API response:', error);\n    return [];\n  }\n}\n\n// Parse HuggingFace datasets response\nfunction parseHuggingFaceDatasets(datasetsData) {\n  const papers = [];\n  \n  try {\n    const datasets = Array.isArray(datasetsData) ? datasetsData : [];\n    \n    for (const dataset of datasets) {\n      try {\n        // Only consider datasets that have proper documentation and seem like research papers\n        if (dataset.description && dataset.description.length > 100 && \n            dataset.tags && dataset.tags.includes('arxiv')) {\n          \n          const paper = {\n            id: `hf_dataset_${dataset.id || Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            title: dataset.title || dataset.id || 'Untitled Dataset',\n            abstract: dataset.description || '',\n            authors: dataset.author ? [dataset.author] : [],\n            published: dataset.lastModified || new Date().toISOString().split('T')[0],\n            updated: dataset.lastModified || new Date().toISOString(),\n            category: inferCategoryFromText(dataset.description || ''),\n            source: 'huggingface',\n            original_source: 'huggingface_datasets', // \u660E\u786E\u6807\u8BB0\u6570\u636E\u96C6\u6765\u6E90\n            url: `https://huggingface.co/datasets/${dataset.id}`,\n            pdf_url: '',\n            scraped_at: new Date().toISOString()\n          };\n          \n          if (paper.title && paper.abstract && paper.abstract.length > 10) {\n            papers.push(paper);\n          } else if (paper.title) {\n            // For HuggingFace datasets, allow papers with shorter abstracts\n            logger.debug(`Accepting paper with short abstract (${paper.abstract?.length || 0} chars): ${paper.title}`);\n            papers.push(paper);\n          }\n        }\n      } catch (error) {\n        logger.warn('Failed to parse HuggingFace dataset:', error);\n      }\n    }\n    \n    logger.info(`Successfully parsed ${papers.length} papers from HuggingFace datasets`);\n    return papers;\n    \n  } catch (error) {\n    logger.error('Failed to parse HuggingFace datasets response:', error);\n    return [];\n  }\n}\n\n// Infer category from text content\nfunction inferCategoryFromText(text) {\n  const textLower = text.toLowerCase();\n  \n  if (textLower.includes('vision') || textLower.includes('image') || textLower.includes('visual') || textLower.includes('cv')) {\n    return 'computer_vision';\n  } else if (textLower.includes('nlp') || textLower.includes('language') || textLower.includes('text') || textLower.includes('transformer')) {\n    return 'natural_language_processing';\n  } else if (textLower.includes('reinforcement') || textLower.includes('rl') || textLower.includes('agent') || textLower.includes('policy')) {\n    return 'reinforcement_learning';\n  } else if (textLower.includes('multimodal') || textLower.includes('multi-modal')) {\n    return 'multimodal_learning';\n  } else {\n    return 'machine_learning';\n  }\n}\n\n// Infer category from HuggingFace paper data\nfunction inferCategoryFromHF(paperData) {\n  const text = `${paperData.title || ''} ${paperData.summary || ''} ${JSON.stringify(paperData.tags || [])}`.toLowerCase();\n  \n  if (text.includes('vision') || text.includes('image') || text.includes('visual') || text.includes('cv')) {\n    return 'computer_vision';\n  } else if (text.includes('nlp') || text.includes('language') || text.includes('text') || text.includes('transformer')) {\n    return 'natural_language_processing';\n  } else if (text.includes('reinforcement') || text.includes('rl') || text.includes('agent') || text.includes('policy')) {\n    return 'reinforcement_learning';\n  } else if (text.includes('multimodal') || text.includes('multi-modal')) {\n    return 'multimodal_learning';\n  } else {\n    return 'machine_learning';\n  }\n}\n\n// Generate fallback HuggingFace papers from trending AI topics\nasync function generateFallbackHuggingFacePapers(maxPapers = 5) {\n  const trendingTopics = [\n    {\n      title: \"Multimodal Foundation Models: Recent Advances in Vision-Language Understanding\",\n      abstract: \"This paper surveys recent developments in multimodal foundation models that integrate vision and language understanding. We examine state-of-the-art architectures, training methodologies, and applications across various domains including image captioning, visual question answering, and multimodal reasoning tasks.\",\n      category: \"multimodal_learning\",\n      keywords: [\"multimodal\", \"foundation models\", \"vision-language\", \"transformers\"]\n    },\n    {\n      title: \"Efficient Diffusion Models for High-Resolution Image Generation\",\n      abstract: \"We present novel techniques for accelerating diffusion models while maintaining high-quality image generation. Our approach combines architectural improvements with advanced sampling strategies to achieve significant speedup in inference time without compromising output quality.\",\n      category: \"generative_models\", \n      keywords: [\"diffusion models\", \"image generation\", \"efficiency\", \"sampling\"]\n    },\n    {\n      title: \"Large Language Models for Code Generation: A Comprehensive Analysis\",\n      abstract: \"This work provides an extensive evaluation of large language models on code generation tasks. We analyze performance across multiple programming languages and propose new benchmarks for assessing code quality, correctness, and efficiency.\",\n      category: \"natural_language_processing\",\n      keywords: [\"large language models\", \"code generation\", \"programming\", \"evaluation\"]\n    },\n    {\n      title: \"Reinforcement Learning with Human Feedback: Scaling to Complex Tasks\",\n      abstract: \"We explore methods for scaling reinforcement learning with human feedback to increasingly complex tasks. Our framework incorporates novel reward modeling techniques and demonstrates superior performance on challenging multi-step reasoning problems.\",\n      category: \"reinforcement_learning\",\n      keywords: [\"reinforcement learning\", \"human feedback\", \"reward modeling\", \"reasoning\"]\n    },\n    {\n      title: \"Vision Transformers for Medical Image Analysis: Challenges and Opportunities\", \n      abstract: \"This survey examines the application of vision transformers to medical imaging tasks. We discuss architectural adaptations, training strategies for limited data scenarios, and regulatory considerations for clinical deployment.\",\n      category: \"computer_vision\",\n      keywords: [\"vision transformers\", \"medical imaging\", \"healthcare\", \"clinical AI\"]\n    }\n  ];\n  \n  const fallbackPapers = [];\n  const selectedTopics = trendingTopics.slice(0, Math.min(maxPapers, trendingTopics.length));\n  \n  for (let i = 0; i < selectedTopics.length; i++) {\n    const topic = selectedTopics[i];\n    const paper = {\n      id: `hf_fallback_${Date.now()}_${i}`,\n      title: topic.title,\n      abstract: topic.abstract,\n      authors: [\"AI Research Community\"],\n      published: new Date().toISOString().split('T')[0],\n      updated: new Date().toISOString(),\n      category: topic.category,\n      source: 'huggingface',\n      original_source: 'huggingface_fallback', // Mark as fallback\n      url: `https://huggingface.co/papers/trending-${i + 1}`,\n      pdf_url: '',\n      scraped_at: new Date().toISOString(),\n      keywords: topic.keywords,\n      is_fallback: true // Clear indicator this is a fallback paper\n    };\n    fallbackPapers.push(paper);\n  }\n  \n  return fallbackPapers;\n}\n\nfunction removeDuplicatePapers(papers) {\n  // Handle edge cases\n  if (!papers || !Array.isArray(papers)) {\n    logger.warn('Invalid papers array provided to removeDuplicatePapers, returning empty array');\n    return [];\n  }\n\n  const seen = new Set();\n  const uniquePapers = [];\n\n  for (const paper of papers) {\n    try {\n      // Skip invalid paper objects\n      if (!paper || !paper.title) {\n        logger.warn('Skipping invalid paper object:', paper);\n        continue;\n      }\n\n      // Create a simple hash of the title for duplicate detection\n      const titleHash = paper.title.toLowerCase().replace(/[^a-z0-9]/g, '');\n\n      if (!seen.has(titleHash)) {\n        seen.add(titleHash);\n        uniquePapers.push(paper);\n      } else {\n        logger.debug(`Removed duplicate paper: ${paper.title}`);\n      }\n    } catch (error) {\n      logger.warn('Error processing paper during duplicate removal:', error);\n      // Skip this paper and continue processing others\n      continue;\n    }\n  }\n\n  return uniquePapers;\n}\n\n// Export individual scraping functions for testing\nexport { scrapeArxivPapers, scrapeHuggingfacePapers, parseArxivEntry, parseHuggingfacePaper };", "import { AppError, MODEL_CONFIG, MODEL_PARAMS, PAPER_ANALYSIS_PROMPT, TOPIC_CATEGORIES } from './config.js';\nimport { fetchWithTimeout, sleep } from './utils.js';\n\nconst logger = {\n  info: (msg, data = {}) => console.log(`[ANALYZER] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[ANALYZER] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[ANALYZER] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[ANALYZER] ${msg}`, data)\n};\n\nfunction createTitleOnlyPrompt(paper) {\n  return `You are an expert AI researcher specializing in related fields.\n\n**IMPORTANT:** This paper only has a title and authors available, but no abstract. Please provide the best possible analysis based on the title and research context.\n\n**Paper Title:** ${paper.title}\n**Authors:** ${paper.authors ? paper.authors.join(', ') : 'Unknown'}\n**Published:** ${paper.published || 'Unknown'}\n\nSince no abstract is available, please provide analysis based on:\n1. The title's key concepts and terminology\n2. The authors' likely research area based on names and affiliations (if recognizable)\n3. Current trends and challenges in the implied research field\n4. Your expertise about similar research directions\n\nGenerate 5 distinct text blocks in English. Use formatting suitable for Twitter (e.g., line breaks for readability, relevant emojis strategically).\n\n### Required Sections (Max 280 characters EACH):\n\n1. \uD83D\uDE80 Introduction (Hook & Core Idea):\n   * Start with a strong hook based on the title's implications.\n   * State what the research likely addresses based on terminology.\n   * Hint at the potential impact or applications.\n\n2. \uD83C\uDFAF Challenges (The Problems Solved):\n   * List 2-3 key problems this research likely addresses based on the title.\n   * Focus on common challenges in this research area.\n\n3. \u2728 Innovations (The Novel Solution):\n   * List potential novel approaches or methods suggested by the title.\n   * Highlight what makes this direction innovative or unique.\n\n4. \uD83D\uDCCA Experiment (Likely Proof & Validation):\n   * Describe what kind of experiments or validation would typically be used.\n   * Mention expected metrics or benchmarks for this type of research.\n\n5. \uD83E\uDD14 Insights (Implications & Future Directions):\n   * Discuss potential broader implications of this research direction.\n   * Suggest future work or applications that could follow from this research.\n\n**IMPORTANT: You MUST provide complete Chinese translations for ALL sections. The Chinese translations should be accurate, natural, and suitable for Chinese-speaking AI researchers and enthusiasts. Use proper Simplified Chinese. Do not translate emojis or section numbers.**\n\n**Format your response as a valid JSON object:**\n{\n  \"introduction\": \"\uD83D\uDE80 English introduction text...\",\n  \"challenges\": \"\uD83C\uDFAF English challenges text...\",\n  \"innovations\": \"\u2728 English innovations text...\",\n  \"experiments\": \"\uD83D\uDCCA English experiments text...\",\n  \"insights\": \"\uD83E\uDD14 English insights text...\",\n  \"keywords\": [\"term1\", \"term2\", ...],\n  \"category\": \"one_of_topic_categories\",\n  \"relevance_score\": (1-10),\n  \"technical_depth\": \"beginner|intermediate|advanced\",\n  \"chinese_abstract\": \"\uD83D\uDE80\u4E2D\u6587\u6458\u8981\uFF1A\u57FA\u4E8E\u6807\u9898\u63A8\u65AD\u7684\u4E2D\u6587\u6458\u8981...\",\n  \"chinese_introduction\": \"\uD83D\uDE80\u4E2D\u6587\u4ECB\u7ECD\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u4ECB\u7ECD...\",\n  \"chinese_challenges\": \"\uD83C\uDFAF\u4E2D\u6587\u6311\u6218\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u6311\u6218\u63CF\u8FF0...\",\n  \"chinese_innovations\": \"\u2728\u4E2D\u6587\u521B\u65B0\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u521B\u65B0\u63CF\u8FF0...\",\n  \"chinese_experiments\": \"\uD83D\uDCCA\u4E2D\u6587\u5B9E\u9A8C\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u5B9E\u9A8C\u63CF\u8FF0...\",\n  \"chinese_insights\": \"\uD83E\uDD14\u4E2D\u6587\u89C1\u89E3\uFF1A\u5B8C\u6574\u7684\u4E2D\u6587\u89C1\u89E3\u63CF\u8FF0...\"\n}`;\n}\n\nexport async function analyzePapers(papers, apiKey) {\n  if (!apiKey) {\n    throw new AppError('OpenRouter API key is required for paper analysis');\n  }\n  \n  if (!papers || papers.length === 0) {\n    logger.warn('No papers to analyze');\n    return [];\n  }\n  \n  logger.info(`Starting analysis of ${papers.length} papers`);\n  \n  const analyzedPapers = [];\n  const BATCH_SIZE = 3; // Process 3 papers in parallel for better performance\n\n  for (let i = 0; i < papers.length; i += BATCH_SIZE) {\n    const batch = papers.slice(i, i + BATCH_SIZE);\n    const batchStartIndex = i + 1;\n    const batchEndIndex = Math.min(i + BATCH_SIZE, papers.length);\n\n    logger.info(`Processing batch ${Math.ceil(i / BATCH_SIZE) + 1}: papers ${batchStartIndex}-${batchEndIndex}`);\n\n    // Process papers in parallel\n    const batchPromises = batch.map(async (paper, batchIndex) => {\n      const paperIndex = i + batchIndex + 1;\n      try {\n        logger.info(`Analyzing paper ${paperIndex}/${papers.length}: ${paper.title.substring(0, 50)}...`);\n        const analyzedPaper = await analyzeSinglePaper(paper, apiKey);\n        if (analyzedPaper) {\n          logger.info(`Successfully analyzed paper ${paperIndex}/${papers.length}`);\n          return analyzedPaper;\n        }\n        return null;\n      } catch (error) {\n        logger.error(`Failed to analyze paper ${paperIndex}/${papers.length}:`, {\n          error: error.message,\n          title: paper.title\n        });\n        return createFallbackAnalysis(paper);\n      }\n    });\n\n    // Wait for all papers in the batch to complete\n    const batchResults = await Promise.allSettled(batchPromises);\n\n    // Collect successful results\n    batchResults.forEach((result, index) => {\n      if (result.status === 'fulfilled' && result.value) {\n        analyzedPapers.push(result.value);\n      } else {\n        logger.error(`Paper ${i + index + 1} failed or returned null`);\n      }\n    });\n\n    // Add delay between batches to avoid rate limiting\n    if (i + BATCH_SIZE < papers.length) {\n      const delay = Math.min(1000 + (Math.ceil(i / BATCH_SIZE) * 200), 3000);\n      logger.debug(`Waiting ${delay}ms before next batch...`);\n      await sleep(delay);\n    }\n  }\n  \n  logger.info(`Successfully analyzed ${analyzedPapers.length} papers`);\n  return analyzedPapers;\n}\n\nexport async function analyzeSinglePaper(paper, apiKey) {\n  try {\n    logger.debug(`Analyzing paper: ${paper.title}`);\n\n    // Check if paper already has analysis (cached)\n    if (paper.analysis && paper.analysis.summary) {\n      logger.debug(`Paper ${paper.id} already has analysis, skipping`);\n      return paper;\n    }\n\n    // Prepare analysis prompt - use title-only analysis if no abstract available\n    let prompt;\n    let isTitleOnlyAnalysis = false;\n\n    if (!paper.abstract || paper.abstract.trim().length < 50) {\n      logger.info(`Paper ${paper.title} has no abstract or abstract too short, using title-only analysis`);\n      prompt = createTitleOnlyPrompt(paper);\n      isTitleOnlyAnalysis = true;\n    } else {\n      prompt = PAPER_ANALYSIS_PROMPT\n        .replace('{title}', paper.title)\n        .replace('{authors}', paper.authors ? paper.authors.join(', ') : 'Unknown')\n        .replace('{abstract}', paper.abstract)\n        .replace('{published}', paper.published || 'Unknown');\n    }\n\n    let analysisResult = null;\n    let modelUsed = MODEL_CONFIG.analysis;\n\n    // Try primary model first\n    try {\n      analysisResult = await callLLM(prompt, MODEL_CONFIG.analysis, MODEL_PARAMS.analysis, apiKey);\n      logger.debug(`Primary model (${MODEL_CONFIG.analysis}) succeeded`);\n    } catch (primaryError) {\n      logger.warn(`Primary model failed, trying fallback:`, primaryError.message);\n\n      // Try fallback model\n      try {\n        analysisResult = await callLLM(prompt, MODEL_CONFIG.fallback_analysis, MODEL_PARAMS.analysis, apiKey);\n        modelUsed = MODEL_CONFIG.fallback_analysis;\n        logger.debug(`Fallback model (${MODEL_CONFIG.fallback_analysis}) succeeded`);\n      } catch (fallbackError) {\n        logger.error(`Both models failed for paper ${paper.title}:`, fallbackError);\n        throw new AppError(`Failed to analyze paper with both models: ${fallbackError.message}`);\n      }\n    }\n\n    // Parse the JSON response\n    const analysis = await parseAnalysisResponse(analysisResult, apiKey);\n\n    // Add flag for title-only analysis\n    if (isTitleOnlyAnalysis) {\n      analysis.title_only_analysis = true;\n      logger.debug(`Used title-only analysis for paper: ${paper.title}`);\n    }\n\n    // Add analysis to paper\n    const analyzedPaper = {\n      ...paper,\n      analysis: {\n        ...analysis,\n        analyzed_at: new Date().toISOString(),\n        model: modelUsed\n      }\n    };\n\n    logger.debug(`Successfully analyzed paper: ${paper.title}`);\n    return analyzedPaper;\n\n  } catch (error) {\n    logger.error(`Failed to analyze paper ${paper.title}:`, error);\n    throw error; // Re-throw to be handled by the caller\n  }\n}\n\nasync function callLLM(prompt, model, params, apiKey) {\n  const url = 'https://openrouter.ai/api/v1/chat/completions';\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${apiKey}`,\n    'HTTP-Referer': 'https://paperdog.org',\n    'X-Title': 'PaperDog'\n  };\n\n  const requestBody = {\n    model: model,\n    messages: [\n      {\n        role: 'system',\n        content: 'You are an expert AI research analyst specializing in computer vision and machine learning. Provide detailed, accurate analysis of research papers.'\n      },\n      {\n        role: 'user',\n        content: prompt\n      }\n    ],\n    temperature: params.temperature || 0.3,\n    max_tokens: params.max_tokens || 1000,\n    response_format: { type: 'json_object' }\n  };\n\n  // Retry logic for network failures - optimized for GPT-5-mini\n  const maxRetries = 3;\n  const baseTimeout = 30000; // 30 seconds for faster failure detection\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const timeout = baseTimeout * attempt; // Exponential backoff: 120s, 240s, 360s\n      logger.debug(`LLM API call attempt ${attempt}/${maxRetries} with ${timeout}ms timeout`);\n\n      const response = await fetchWithTimeout(url, timeout, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(requestBody)\n      });\n\n    if (!response.ok) {\n        const errorText = await response.text();\n\n        // Handle rate limit specifically\n        if (response.status === 429) {\n          const retryAfter = parseInt(errorText.match(/retry_after:\\s*(\\d+)/i)?.[1] || '30');\n          logger.warn(`Rate limited, waiting ${retryAfter}s before retry...`);\n          if (attempt < maxRetries) {\n            await sleep(retryAfter * 1000);\n            continue;\n          }\n        }\n\n        throw new AppError(`LLM API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n\n      if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n        throw new AppError('Invalid LLM response format');\n      }\n\n      const content = data.choices[0].message.content;\n      if (!content) {\n        throw new AppError('Empty LLM response');\n      }\n\n      logger.debug(`LLM API call succeeded on attempt ${attempt}`);\n      return content;\n\n    } catch (error) {\n      logger.warn(`LLM API call failed on attempt ${attempt}:`, error.message);\n\n      if (attempt === maxRetries) {\n        logger.error('All LLM API call attempts failed:', error);\n        throw new AppError(`Failed to call LLM API after ${maxRetries} attempts: ${error.message}`);\n      }\n\n      // Quadratic backoff: 2s, 8s, 18s\n      const retryDelay = Math.min(2000 * (attempt * attempt), 18000);\n      logger.debug(`Waiting ${retryDelay}ms before retry...`);\n      await sleep(retryDelay);\n    }\n  }\n}\n\nfunction normalizeCategory(category) {\n  if (!category || typeof category !== 'string') {\n    return 'machine_learning';\n  }\n  // Convert to lowercase, replace spaces with underscores, remove special characters\n  return category.toLowerCase().replace(/\\s+/g, '_').replace(/[^a-z0-9_]/g, '');\n}\n\nasync function parseAnalysisResponse(response, apiKey) {\n  try {\n    logger.debug(`Raw response received (${response.length} chars)`);\n    logger.debug(`Response preview: ${response.substring(0, 200)}...`);\n\n    // Enhanced cleaning for GPT-5-mini responses\n    let cleanResponse = response.trim();\n\n    // Remove markdown code blocks with better detection\n    cleanResponse = cleanResponse.replace(/^```(?:json)?\\s*\\n?/, '').replace(/\\n?```\\s*$/, '');\n\n    // Try to extract JSON object boundaries if response has extra text\n    const jsonMatch = cleanResponse.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      cleanResponse = jsonMatch[0];\n    }\n\n    logger.debug(`Attempting to parse cleaned JSON response (${cleanResponse.length} chars)`);\n\n    let parsed;\n    try {\n      // Direct JSON parse first\n      parsed = JSON.parse(cleanResponse);\n      logger.debug('Direct JSON parsing successful');\n    } catch (parseError) {\n      logger.warn(`Primary JSON parse failed, attempting recovery: ${parseError.message}`);\n\n      // Recovery Strategy 1: Fix common JSON syntax issues\n      try {\n        let recoveredResponse = cleanResponse\n          .replace(/,\\s*}/g, '}') // Remove trailing commas in objects\n          .replace(/,\\s*]/g, ']') // Remove trailing commas in arrays\n          .replace(/:\\s*,/g, ': null,') // Fix empty values\n          .replace(/:\\s*}/g, ': null}') // Fix missing values at object end\n          .replace(/\\r\\n/g, '\\\\n') // Fix Windows newlines\n          .replace(/\\n/g, '\\\\n'); // Fix Unix newlines\n\n        parsed = JSON.parse(recoveredResponse);\n        logger.info('Recovery Strategy 1 successful: Basic JSON fixes');\n      } catch (recoveryError1) {\n        logger.debug(`Recovery Strategy 1 failed: ${recoveryError1.message}`);\n\n        // Recovery Strategy 2: Handle escaped quotes in JSON content\n        try {\n          let recoveredResponse = cleanResponse;\n\n          // Find and fix improperly escaped quotes in string values\n          // This is more careful than the previous approach\n          recoveredResponse = recoveredResponse\n            .replace(/:\\s*\"([^\"]*)\"([^\",\\}\\]]*?)\"/g, ': \"$1\\\\\"$2\\\\\"$3\"') // Fix quotes within strings\n            .replace(/:\\s*\"([^\"]*)\"([^\",\\}\\]]*?)\"/g, ': \"$1\\\\\"$2\\\\\"$3\"'); // Apply twice for nested cases\n\n          // Then apply basic fixes\n          recoveredResponse = recoveredResponse\n            .replace(/,\\s*}/g, '}')\n            .replace(/,\\s*]/g, ']')\n            .replace(/\\r\\n/g, '\\\\n')\n            .replace(/\\n/g, '\\\\n');\n\n          parsed = JSON.parse(recoveredResponse);\n          logger.info('Recovery Strategy 2 successful: Quote escaping fixes');\n        } catch (recoveryError2) {\n          logger.debug(`Recovery Strategy 2 failed: ${recoveryError2.message}`);\n\n          // Recovery Strategy 3: Manual JSON reconstruction (last resort)\n          try {\n            // Extract content using regex patterns for each field\n            const fieldPatterns = {\n              introduction: /\"introduction\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*)\"/,\n              challenges: /\"challenges\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*)\"/,\n              innovations: /\"innovations\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*)\"/,\n              experiments: /\"experiments\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*)\"/,\n              insights: /\"insights\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*)\"/,\n              keywords: /\"keywords\":\\s*(\\[.*?\\])/,\n              category: /\"category\":\\s*\"([^\"]*)\"/,\n              relevance_score: /\"relevance_score\":\\s*(\\d+)/,\n              technical_depth: /\"technical_depth\":\\s*\"([^\"]*)\"/\n            };\n\n            parsed = {};\n            for (const [field, pattern] of Object.entries(fieldPatterns)) {\n              const match = cleanResponse.match(pattern);\n              if (match) {\n                if (field === 'keywords') {\n                  try {\n                    parsed[field] = JSON.parse(match[1]);\n                  } catch {\n                    parsed[field] = [];\n                  }\n                } else if (field === 'relevance_score') {\n                  parsed[field] = parseInt(match[1]);\n                } else {\n                  parsed[field] = match[1].replace(/\\\\\"/g, '\"').replace(/\\\\n/g, '\\n');\n                }\n              }\n            }\n\n            // Verify we got the essential fields\n            if (parsed.introduction && parsed.challenges) {\n              logger.info('Recovery Strategy 3 successful: Manual reconstruction');\n            } else {\n              throw new Error('Essential fields missing after reconstruction');\n            }\n          } catch (recoveryError3) {\n            logger.error(`All recovery strategies failed`);\n            logger.debug(`Problematic response: ${cleanResponse.substring(0, 1000)}...`);\n            throw new AppError(`Unable to parse JSON response after all recovery attempts: ${parseError.message}`);\n          }\n        }\n      }\n    }\n\n    // Validate required fields and check for completeness\n    const requiredFields = ['introduction', 'challenges', 'innovations', 'experiments', 'insights', 'keywords', 'category'];\n    let missingCriticalFields = [];\n\n    for (const field of requiredFields) {\n      if (!parsed[field] || (typeof parsed[field] === 'string' && parsed[field].trim() === '')) {\n        logger.warn(`Missing field in analysis: ${field}`);\n\n        // Count critical fields (introduction, challenges, innovations, experiments, insights)\n        if (['introduction', 'challenges', 'innovations', 'experiments', 'insights'].includes(field)) {\n          missingCriticalFields.push(field);\n        }\n\n        parsed[field] = field === 'keywords' ? [] : 'Not provided';\n      }\n    }\n\n    // If more than 2 critical fields are missing, the response is incomplete\n    if (missingCriticalFields.length > 2) {\n      logger.warn(`Incomplete analysis response - missing ${missingCriticalFields.length} critical fields: ${missingCriticalFields.join(', ')}`);\n\n      // Create a more complete fallback using available information\n      const availableIntro = parsed.introduction && parsed.introduction !== 'Not provided' ? parsed.introduction : '';\n      const availableChallenges = parsed.challenges && parsed.challenges !== 'Not provided' ? parsed.challenges : '';\n\n      if (availableIntro || availableChallenges) {\n        logger.info('Creating enhanced fallback from available partial analysis');\n\n        // Generate missing fields based on available content\n        const combinedText = `${availableIntro} ${availableChallenges}`.toLowerCase();\n\n        if (parsed.innovations === 'Not provided') {\n          parsed.innovations = combinedText.includes('new') || combinedText.includes('novel') || combinedText.includes('approach') ?\n            '\u2728 Introduces novel methodologies and approaches for enhanced performance.' : '\u2728 Not specified in the paper.';\n        }\n\n        if (parsed.experiments === 'Not provided') {\n          parsed.experiments = combinedText.includes('result') || combinedText.includes('experiment') || combinedText.includes('performance') ?\n            '\uD83D\uDCCA Demonstrates significant improvements over existing methods through comprehensive experiments.' : '\uD83D\uDCCA Not specified in the paper.';\n        }\n\n        if (parsed.insights === 'Not provided') {\n          parsed.insights = combinedText.includes('future') || combinedText.includes('potential') || combinedText.includes('impact') ?\n            '\uD83E\uDD14 Opens new directions for research and practical applications in the field.' : '\uD83E\uDD14 Not specified in the paper.';\n        }\n\n        // Generate keywords from available text\n        if (parsed.keywords.length === 0) {\n          const keywordPatterns = [\n            /transformer|attention|neural|network|deep learning|machine learning|ai|model|algorithm|approach|method|framework|architecture|system/g\n          ];\n          const foundKeywords = new Set();\n          keywordPatterns.forEach(pattern => {\n            const matches = combinedText.match(pattern);\n            if (matches) matches.forEach(match => foundKeywords.add(match));\n          });\n          parsed.keywords = Array.from(foundKeywords).slice(0, 5);\n        }\n\n        // Infer category from content\n        if (parsed.category === 'Not provided' || parsed.category === 'not_provided') {\n          if (combinedText.includes('vision') || combinedText.includes('image') || combinedText.includes('visual')) {\n            parsed.category = 'computer_vision';\n          } else if (combinedText.includes('language') || combinedText.includes('nlp') || combinedText.includes('text')) {\n            parsed.category = 'natural_language_processing';\n          } else if (combinedText.includes('reinforcement') || combinedText.includes('rl') || combinedText.includes('agent')) {\n            parsed.category = 'reinforcement_learning';\n          } else {\n            parsed.category = 'machine_learning';\n          }\n        }\n      }\n    }\n\n    // Validate Chinese fields if available\n    const chineseFields = ['chinese_abstract', 'chinese_introduction', 'chinese_challenges', 'chinese_innovations', 'chinese_experiments', 'chinese_insights'];\n    for (const field of chineseFields) {\n      if (!parsed[field] || parsed[field].trim() === '') {\n        logger.warn(`Missing Chinese field in analysis: ${field}, will generate fallback.`);\n        parsed[field] = ''; // Set to empty string for fallback translation\n      }\n    }\n\n    // Apply fallback translations if Chinese fields are empty but English content exists\n    await applyFallbackTranslations(parsed, apiKey);\n\n    // Normalize and validate category\n    parsed.category = normalizeCategory(parsed.category);\n    if (!TOPIC_CATEGORIES.includes(parsed.category)) {\n      logger.warn(`Invalid category: ${parsed.category}, defaulting to 'machine_learning'`);\n      parsed.category = 'machine_learning';\n    }\n\n    // Ensure keywords is an array and filter out empty strings\n    if (!Array.isArray(parsed.keywords)) {\n      parsed.keywords = typeof parsed.keywords === 'string' ?\n        parsed.keywords.split(',').map(k => k.trim()).filter(k => k) : [];\n    }\n\n    // Validate scores with better range checking\n    if (typeof parsed.relevance_score !== 'number' || parsed.relevance_score < 1 || parsed.relevance_score > 10) {\n      logger.warn(`Invalid relevance score: ${parsed.relevance_score}, defaulting to 5`);\n      parsed.relevance_score = 5;\n    }\n\n    // Add summary field that combines all sections\n    parsed.summary = generateSummary(parsed);\n\n    logger.debug('Successfully parsed and validated analysis response');\n    return parsed;\n\n  } catch (error) {\n    logger.error('Failed to parse analysis response:', error);\n    throw new AppError(`Failed to parse analysis: ${error.message}`);\n  }\n}\n\nasync function applyFallbackTranslations(analysis, apiKey) {\n  const translationPairs = [\n    { english: 'abstract', chinese: 'chinese_abstract', promptKey: 'abstract' },\n    { english: 'introduction', chinese: 'chinese_introduction', promptKey: 'introduction' },\n    { english: 'challenges', chinese: 'chinese_challenges', promptKey: 'challenges' },\n    { english: 'innovations', chinese: 'chinese_innovations', promptKey: 'innovations' },\n    { english: 'experiments', chinese: 'chinese_experiments', promptKey: 'experiments' },\n    { english: 'insights', chinese: 'chinese_insights', promptKey: 'insights' }\n  ];\n\n  const translationsNeeded = translationPairs.filter(pair => \n    !analysis[pair.chinese] || analysis[pair.chinese].trim() === '' ||\n    analysis[pair.chinese].trim() === 'Not specified in the paper.'\n  );\n\n  if (translationsNeeded.length === 0) {\n    logger.debug('All Chinese translations are present, no fallback needed');\n    return;\n  }\n\n  logger.info(`Applying fallback translations for ${translationsNeeded.length} fields`);\n\n  // Process translations concurrently for better performance\n  const translationPromises = translationsNeeded.map(async (pair) => {\n    const englishContent = analysis[pair.english];\n\n    // Skip if English content is empty or \"Not provided\"\n    if (!englishContent || englishContent.trim() === '' || englishContent.trim() === 'Not provided') {\n      analysis[pair.chinese] = '\u82F1\u6587\u5185\u5BB9\u4E0D\u53EF\u7528 / English content not available';\n      return { field: pair.chinese, success: true };\n    }\n\n    try {\n      const translationPrompt = `\u8BF7\u5C06\u4EE5\u4E0B\u82F1\u6587\u5185\u5BB9\u7FFB\u8BD1\u6210\u7B80\u4F53\u4E2D\u6587\u3002\u7FFB\u8BD1\u5FC5\u987B\u51C6\u786E\u3001\u81EA\u7136\uFF0C\u9002\u5408AI\u7814\u7A76\u8005\u548C\u7231\u597D\u8005\u9605\u8BFB\u3002\u4FDD\u6301\u6280\u672F\u672F\u8BED\u7684\u4E13\u4E1A\u6027\uFF0C\u4F46\u89E3\u91CA\u590D\u6742\u6982\u5FF5\u65F6\u4F7F\u7528\u901A\u4FD7\u6613\u61C2\u7684\u8BED\u8A00\u3002\n\n\u82F1\u6587\u5185\u5BB9\uFF08${pair.promptKey}\uFF09\uFF1A\n${englishContent}\n\n\u8BF7\u53EA\u8FD4\u56DE\u7FFB\u8BD1\u540E\u7684\u4E2D\u6587\u6587\u672C\uFF0C\u4E0D\u8981\u6DFB\u52A0\u4EFB\u4F55\u989D\u5916\u8BF4\u660E\u6216\u683C\u5F0F\u3002`;\n\n      const translatedContent = await callLLM(translationPrompt, MODEL_CONFIG.translation, MODEL_PARAMS.translation, apiKey);\n\n      // Clean up the response\n      let cleanTranslation = translatedContent.trim();\n      if (cleanTranslation.startsWith('```')) {\n        cleanTranslation = cleanTranslation.replace(/```[\\w]*\\n?/, '').replace(/\\n?```$/, '');\n      }\n\n      analysis[pair.chinese] = cleanTranslation;\n      logger.debug(`Successfully translated ${pair.promptKey} to Chinese`);\n      return { field: pair.chinese, success: true };\n\n    } catch (translationError) {\n      logger.warn(`Failed to translate ${pair.promptKey}:`, translationError.message);\n      analysis[pair.chinese] = `\u7FFB\u8BD1\u5931\u8D25\uFF0C\u8BF7\u67E5\u770B\u82F1\u6587\u539F\u6587 / Translation failed, please see English original`;\n      return { field: pair.chinese, success: false, error: translationError.message };\n    }\n  });\n\n  // Wait for all translations to complete\n  const translationResults = await Promise.allSettled(translationPromises);\n\n  // Log results\n  const successfulTranslations = translationResults.filter(r =>\n    r.status === 'fulfilled' && r.value?.success\n  ).length;\n\n  logger.info(`Completed ${successfulTranslations}/${translationsNeeded.length} translations`);\n\n  // Small delay after concurrent translations to avoid rate limiting\n  if (translationsNeeded.length > 0) {\n    await sleep(200);\n  }\n\n  logger.info('Fallback translations completed');\n}\n\nfunction generateSummary(analysis) {\n  const sections = [\n    { title: 'Introduction', content: analysis.introduction },\n    { title: 'Challenges', content: analysis.challenges },\n    { title: 'Innovations', content: analysis.innovations },\n    { title: 'Experiments', content: analysis.experiments },\n    { title: 'Insights', content: analysis.insights }\n  ];\n  \n  let summary = '';\n  let totalLength = 0;\n  const maxLength = 500;\n  \n  for (const section of sections) {\n    const sectionText = section.content.trim();\n    if (sectionText && sectionText !== 'Not provided') {\n      if (totalLength + sectionText.length + 50 <= maxLength) {\n        summary += `**${section.title}:** ${sectionText}\\n\\n`;\n        totalLength += sectionText.length + 50;\n      } else {\n        // Add truncated version if we're approaching the limit\n        const remainingSpace = maxLength - totalLength - 50;\n        if (remainingSpace > 50) {\n          summary += `**${section.title}:** ${sectionText.substring(0, remainingSpace)}...\\n\\n`;\n        }\n        break;\n      }\n    }\n  }\n  \n  return summary.trim() || 'Analysis not available';\n}\n\nfunction createFallbackAnalysis(paper) {\n  // Create a basic analysis for papers that couldn't be processed by LLM\n  // This now provides better analysis even for title-only papers\n\n  const hasAbstract = paper.abstract && paper.abstract.trim().length > 50;\n\n  return {\n    ...paper,\n    analysis: {\n      introduction: `\uD83D\uDE80 ${paper.title} - ${hasAbstract ? 'Research analysis' : 'Title-based analysis available'} - Analysis temporarily unavailable due to processing error.`,\n      challenges: '\uD83C\uDFAF Challenges information unavailable due to processing error.',\n      innovations: '\u2728 Innovation details unavailable due to processing error.',\n      experiments: '\uD83D\uDCCA Experimental results unavailable due to processing error.',\n      insights: '\uD83E\uDD14 Research insights unavailable due to processing error.',\n      summary: hasAbstract ?\n        `Abstract: ${paper.abstract.substring(0, 300)}...` :\n        `Title: ${paper.title} - Full analysis temporarily unavailable.`,\n      keywords: extractKeywords(paper),\n      category: inferCategory(paper),\n      relevance_score: 5,\n      technical_depth: 'unknown',\n      analyzed_at: new Date().toISOString(),\n      model: 'fallback',\n      error: true,\n      title_only_analysis: !hasAbstract\n    }\n  };\n}\n\nfunction extractKeywords(paper) {\n  const text = `${paper.title} ${paper.abstract}`.toLowerCase();\n  const keywords = [];\n  \n  // Simple keyword extraction based on common AI/ML terms\n  const aiTerms = [\n    'neural network', 'deep learning', 'machine learning', 'computer vision',\n    'natural language processing', 'transformer', 'attention', 'gpt', 'bert',\n    'diffusion model', 'generative ai', 'reinforcement learning', 'cnn',\n    'rnn', 'lstm', 'gradient descent', 'backpropagation', 'fine-tuning',\n    'pretraining', 'transfer learning', 'multi-modal', 'vision transformer',\n    'segmentation', 'detection', 'classification', 'regression'\n  ];\n  \n  for (const term of aiTerms) {\n    if (text.includes(term) && !keywords.includes(term)) {\n      keywords.push(term);\n      if (keywords.length >= 5) break;\n    }\n  }\n  \n  return keywords;\n}\n\nfunction inferCategory(paper) {\n  const text = `${paper.title} ${paper.abstract} ${paper.category || ''}`.toLowerCase();\n  \n  if (text.includes('vision') || text.includes('image') || text.includes('visual')) {\n    return 'computer_vision';\n  } else if (text.includes('nlp') || text.includes('language') || text.includes('text')) {\n    return 'natural_language_processing';\n  } else if (text.includes('reinforcement') || text.includes('rl') || text.includes('agent')) {\n    return 'reinforcement_learning';\n  } else {\n    return 'machine_learning';\n  }\n}\n\nexport async function generatePaperSummary(paper, apiKey) {\n  if (!paper.analysis || !paper.analysis.summary) {\n    throw new AppError('Paper analysis is required for summary generation');\n  }\n  \n  const prompt = `Create a concise, engaging summary (under 200 words) of this AI research paper for a blog audience:\n\n**Title:** ${paper.title}\n**Authors:** ${paper.authors ? paper.authors.join(', ') : 'Unknown'}\n\n**Analysis:**\n${paper.analysis.summary}\n\n**Key Points:**\n- **Innovation:** ${paper.analysis.innovations}\n- **Results:** ${paper.analysis.experiments}\n- **Impact:** ${paper.analysis.insights}\n\nFormat the summary to be engaging and accessible to AI enthusiasts while maintaining technical accuracy.`;\n\n  try {\n    const summaryResult = await callLLM(prompt, MODEL_CONFIG.summary, MODEL_PARAMS.summary, apiKey);\n    return summaryResult.trim();\n  } catch (error) {\n    logger.error('Failed to generate paper summary:', error);\n    return paper.analysis.summary; // Fallback to existing summary\n  }\n}\n", "import { formatDate } from './utils.js';\n\n// Helper function to sanitize Chinese translation content\nfunction sanitizeChineseContent(content) {\n  if (!content || typeof content !== 'string') {\n    return content;\n  }\n\n  // Try to parse if it looks like JSON\n  if (content.trim().startsWith('{') || content.trim().startsWith('[')) {\n    try {\n      const parsed = JSON.parse(content);\n      // Extract meaningful text from JSON structures\n      if (typeof parsed === 'object') {\n        if (parsed.challenges && Array.isArray(parsed.challenges)) {\n          return parsed.challenges.join('\uFF1B');\n        }\n        if (parsed.introduction && Array.isArray(parsed.introduction)) {\n          return parsed.introduction.join('\uFF1B');\n        }\n        if (parsed.innovations && Array.isArray(parsed.innovations)) {\n          return parsed.innovations.join('\uFF1B');\n        }\n        if (parsed.experiments && Array.isArray(parsed.experiments)) {\n          return parsed.experiments.join('\uFF1B');\n        }\n        if (parsed.insights && Array.isArray(parsed.insights)) {\n          return parsed.insights.join('\uFF1B');\n        }\n        // Handle single values\n        if (parsed.challenges) return parsed.challenges;\n        if (parsed.introduction) return parsed.introduction;\n        if (parsed.innovations) return parsed.innovations;\n        if (parsed.experiments) return parsed.experiments;\n        if (parsed.insights) return parsed.insights;\n\n        // Fallback: stringify the object nicely\n        return JSON.stringify(parsed, null, 2);\n      }\n    } catch (e) {\n      // If parsing fails, return original content\n    }\n  }\n\n  return content;\n}\n\nexport function getDualColumnHTML(papers = [], dailyReport = null, visitorStats = null) {\n  const safeReportJson = JSON.stringify(dailyReport).replace(/</g, '\\u003c');\n  const visitorInfo = visitorStats || { today: '0', total: '0', displayText: 'Visitor stats' };\n  \n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PaperDog - AI Papers Daily Digest</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            background: #f8f9fa;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .container-fluid {\n            max-width: 1600px;\n        }\n        \n        .navbar {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        }\n\n        .visitor-info {\n            font-size: 0.85rem;\n            line-height: 1.2;\n        }\n\n        .nav-links .btn {\n            border-width: 1px;\n            font-size: 0.8rem;\n            padding: 0.25rem 0.5rem;\n            transition: all 0.3s ease;\n        }\n\n        .nav-links .btn:hover {\n            background: rgba(255, 255, 255, 0.2) !important;\n            transform: translateY(-1px);\n        }\n        \n        .column-content {\n            min-height: 600px;\n            padding: 1.5rem;\n            background: #f6f8fc;\n            border-radius: 8px;\n            margin-bottom: 1rem;\n            border: 1px solid #e9ecef;\n        }\n        \n        #paper-content, #analysis-content {\n            overflow-wrap: break-word;\n            word-wrap: break-word;\n            font-size: 0.95em;\n            line-height: 1.6;\n        }\n        \n        #paper-content h1, #paper-content h2, #paper-content h3,\n        #analysis-content h1, #analysis-content h2, #analysis-content h3 {\n            font-size: 1.15em;\n            margin-top: 1.2rem;\n            margin-bottom: 0.5rem;\n            color: #2c3e50;\n        }\n        \n        #paper-content table, #analysis-content table {\n            width: 100%;\n            table-layout: fixed;\n            font-size: 0.9em;\n        }\n        \n        #paper-content pre, #analysis-content pre,\n        #paper-content code, #analysis-content code {\n            font-size: 0.85em;\n            overflow-x: auto;\n            background: #f8f9fa;\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n        }\n        \n        .side-panel {\n            background: #f6f8fc;\n            border-radius: 12px;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.03);\n            padding: 1.5rem 1rem;\n            min-height: 100%;\n            max-height: 80vh;\n            overflow-y: auto;\n            border: 1px solid #e9ecef;\n        }\n        \n        .paper-card {\n            transition: box-shadow 0.2s;\n            cursor: pointer;\n            border: 1px solid #dee2e6;\n        }\n        \n        .paper-card:hover {\n            box-shadow: 0 2px 12px rgba(0,0,0,0.08);\n            border-color: #667eea;\n        }\n        \n        .paper-card.today {\n            border-color: #007bff;\n            background: #f8f9ff;\n        }\n        \n        .paper-abstract {\n            font-size: 0.85em;\n            color: #6c757d;\n            line-height: 1.4;\n            max-height: 3.2em;\n            overflow: hidden;\n            display: -webkit-box;\n            -webkit-line-clamp: 2;\n            -webkit-box-orient: vertical;\n        }\n        \n        .update-btn {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            border: none;\n            border-radius: 8px;\n            padding: 0.75rem 1rem;\n            font-weight: 500;\n            transition: all 0.3s ease;\n        }\n        \n        .update-btn:hover:not(:disabled) {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n        }\n        \n        .update-btn:disabled {\n            background: #6c757d;\n        }\n        \n        .spinner {\n            border: 4px solid rgba(0, 0, 0, 0.1);\n            border-left-color: #007bff;\n            border-radius: 50%;\n            width: 30px;\n            height: 30px;\n            animation: spin 1s linear infinite;\n            margin: 10px auto;\n        }\n        \n        @keyframes spin {\n            to { transform: rotate(360deg); }\n        }\n        \n        .loading-indicator {\n            display: none;\n            text-align: center;\n            padding: 1rem;\n        }\n        \n        @media (max-width: 1200px) {\n            .container-fluid {\n                max-width: 100%;\n                padding: 0 1rem;\n            }\n            .col-md-3, .col-md-6 {\n                flex: 0 0 100%;\n                max-width: 100%;\n            }\n            .side-panel {\n                max-height: none;\n                margin-top: 1rem;\n            }\n        }\n        \n        @media (max-width: 768px) {\n            .column-content, .side-panel {\n                padding: 1rem 0.5rem;\n                min-height: unset;\n            }\n            .container-fluid {\n                padding: 0;\n            }\n            .row {\n                flex-direction: column;\n            }\n        }\n        \n        .score-badge {\n            background: #28a745;\n            color: white;\n            padding: 0.25rem 0.5rem;\n            border-radius: 12px;\n            font-size: 0.75rem;\n            font-weight: 500;\n        }\n        \n        .category-badge {\n            background: #667eea;\n            color: white;\n            padding: 0.25rem 0.5rem;\n            border-radius: 12px;\n            font-size: 0.75rem;\n            font-weight: 500;\n        }\n        \n        .paper-stats {\n            font-size: 0.8rem;\n            color: #6c757d;\n        }\n\n        .view-count {\n            font-size: 0.75rem;\n            color: #6c757d;\n            display: flex;\n            align-items: center;\n            gap: 0.25rem;\n            background: rgba(0, 123, 255, 0.05);\n            padding: 0.125rem 0.375rem;\n            border-radius: 8px;\n            border: 1px solid rgba(0, 123, 255, 0.1);\n        }\n\n        .view-count i {\n            font-size: 0.8rem;\n            color: #007bff;\n        }\n\n        .view-badge {\n            background: rgba(0, 123, 255, 0.1);\n            color: #007bff;\n            padding: 0.125rem 0.375rem;\n            border-radius: 6px;\n            font-size: 0.7rem;\n            font-weight: 500;\n            min-width: 20px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <nav class=\"navbar navbar-dark\">\n        <div class=\"container-fluid\">\n            <div class=\"d-flex justify-content-between align-items-center w-100\">\n                <div class=\"d-flex align-items-center\">\n                    <span class=\"navbar-brand mb-0 h1\">\n                        <i class=\"fas fa-graduation-cap me-2\"></i>PaperDog\n                    </span>\n                    <span class=\"navbar-text me-4\">\n                        Daily AI Papers Digest\n                    </span>\n                </div>\n                <div class=\"d-flex align-items-center\">\n                    <div class=\"visitor-info me-4 text-end\">\n                        <div class=\"small text-light\">\n                            <i class=\"fas fa-users me-1\"></i>\n                            Today: ${visitorInfo.today} | Total: ${visitorInfo.total}\n                        </div>\n                        <div class=\"small text-light opacity-75\">\n                            ${visitorInfo.displayText}\n                        </div>\n                    </div>\n                    <div class=\"nav-links\">\n                        <a href=\"/archive\" class=\"btn btn-outline-light btn-sm me-2\">\n                            <i class=\"fas fa-archive me-1\"></i>Archive\n                        </a>\n                        <a href=\"/about\" class=\"btn btn-outline-light btn-sm me-2\">\n                            <i class=\"fas fa-info-circle me-1\"></i>About\n                        </a>\n                        <a href=\"#\" class=\"btn btn-outline-light btn-sm\" onclick=\"toggleTranslation()\" id=\"translate-btn\" title=\"\u5207\u6362\u8BED\u8A00 / Switch Language\">\n                            <i class=\"fas fa-language me-1\"></i><span id=\"translate-text\">\u4E2D\u6587</span>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </nav>\n    \n    <div class=\"container-fluid mt-3\">\n        <div class=\"row gx-4 gy-3\">\n            <div class=\"col-md-9\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div class=\"column-content\">\n                            <h3 class=\"mb-3\">\n                                <i class=\"fas fa-file-alt me-2\"></i>\u8BBA\u6587\u8BE6\u60C5\n                            </h3>\n                            <div id=\"paper-content\">\n                                <div class=\"text-center text-muted py-5\">\n                                    <i class=\"fas fa-mouse-pointer fa-2x mb-3\"></i>\n                                    <h5>\u9009\u62E9\u4E00\u7BC7\u8BBA\u6587</h5>\n                                    <p>\u70B9\u51FB\u53F3\u4FA7\u7684\u8BBA\u6587\u5217\u8868\u67E5\u770B\u8BE6\u7EC6\u5185\u5BB9</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <div class=\"column-content\">\n                            <h3 class=\"mb-3\">\n                                <i class=\"fas fa-brain me-2\"></i>AI Analysis\n                            </h3>\n                            <div id=\"analysis-content\">\n                                <div class=\"text-center text-muted py-5\">\n                                    <i class=\"fas fa-robot fa-2x mb-3\"></i>\n                                    <h5>AI\u5206\u6790\u5185\u5BB9</h5>\n                                    <p>\u9009\u62E9\u8BBA\u6587\u540E\u663E\u793AAI\u667A\u80FD\u5206\u6790\u7ED3\u679C</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-3\">\n                <div class=\"side-panel\">\n                    <h4 class=\"mb-3\">\n                        <i class=\"fas fa-list me-2\"></i>\u8BBA\u6587\u5217\u8868\n                    </h4>\n                    <button id=\"update-btn\" class=\"btn update-btn btn-primary mb-3 w-100\" onclick=\"updatePapers()\">\n                        <i class=\"fas fa-sync-alt me-2\"></i>Update Papers\n                    </button>\n                    <div class=\"loading-indicator\" id=\"loadingIndicator\">\n                        <div class=\"spinner\"></div>\n                        <p class=\"text-muted mb-0\">Updating papers...</p>\n                    </div>\n                    <div id=\"papers-list\">\u52A0\u8F7D\u4E2D...</div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            const report = ${safeReportJson};\n            \n            // Initialize with today's papers if available\n            if (report && report.papers && report.papers.length > 0) {\n                loadPapersList(report.papers);\n\n                // Auto-select the top paper\n                if (report.top_papers && report.top_papers.length > 0) {\n                    loadPaperContent(report.top_papers[0]);\n                }\n            } else {\n                // Fetch papers from API\n                fetchPapers();\n            }\n        });\n        \n        async function fetchPapers() {\n            const listContainer = document.getElementById('papers-list');\n            const loadingIndicator = document.getElementById('loadingIndicator');\n\n            try {\n                loadingIndicator.style.display = 'block';\n                listContainer.innerHTML = '';\n\n                // Try to get papers from recent dates, starting with today\n                // This ensures we get top papers from a specific date, not aggregated from multiple days\n                for (let i = 0; i < 7; i++) {\n                    const date = new Date();\n                    date.setDate(date.getDate() - i);\n                    const dateStr = date.toISOString().split('T')[0];\n\n                    try {\n                        const response = await fetch('/api/papers/' + dateStr);\n                        if (response.ok) {\n                            const data = await response.json();\n                            if (data.papers && data.papers.length > 0) {\n                                // Sort by relevance score and take top 10 for mainpage display\n                                const sortedPapers = data.papers.sort((a, b) => {\n                                    const scoreA = ((a.analysis && a.analysis.relevance_score) || (a.scoring && a.scoring.total_score) || 5);\n                                    const scoreB = ((b.analysis && b.analysis.relevance_score) || (b.scoring && b.scoring.total_score) || 5);\n                                    return scoreB - scoreA;\n                                }).slice(0, 10); // Limit to top 10 papers\n\n                                loadPapersList(sortedPapers);\n                                loadingIndicator.style.display = 'none';\n                                return;\n                            }\n                        }\n                    } catch (dateError) {\n                        console.warn(\"Failed to fetch papers for \" + dateStr + \":\", dateError);\n                        // Continue to next date\n                    }\n                }\n\n                // If no papers found in recent dates, show empty state\n                listContainer.innerHTML = '<p class=\"text-muted\">\u6682\u65E0\u8BBA\u6587\u6570\u636E</p>';\n            } catch (error) {\n                console.error('Error fetching papers:', error);\n                listContainer.innerHTML = '<p class=\"text-danger\">\u52A0\u8F7D\u8BBA\u6587\u51FA\u9519</p>';\n            } finally {\n                loadingIndicator.style.display = 'none';\n            }\n        }\n        \n        function loadPapersList(papers) {\n            const listContainer = document.getElementById('papers-list');\n            \n            if (papers.length === 0) {\n                listContainer.innerHTML = '<p class=\"text-muted\">\u6682\u65E0\u8BBA\u6587\u6570\u636E</p>';\n                return;\n            }\n            \n            // Sort by relevance score and date\n            papers.sort((a, b) => {\n                const scoreA = ((a.analysis && a.analysis.relevance_score) || (a.scoring && a.scoring.total_score) || 5);\n                const scoreB = ((b.analysis && b.analysis.relevance_score) || (b.scoring && b.scoring.total_score) || 5);\n                if (Math.abs(scoreA - scoreB) > 0.5) return scoreB - scoreA;\n                return new Date(b.published || b.scraped_at) - new Date(a.published || a.scraped_at);\n            });\n            \n            const papersHTML = papers.map((paper, index) => {\n                const totalScore = (paper.scoring && paper.scoring.total_score) || (paper.analysis && paper.analysis.relevance_score) || 5;\n                const category = (paper.analysis && paper.analysis.category) || paper.category || 'other';\n                const isTopPaper = totalScore >= 7.0;\n                const views = paper.views || 0;\n                const viewDisplay = views > 999 ? (views / 1000).toFixed(1) + 'k' : views.toString();\n\n                return '<div class=\"card paper-card mb-2\" onclick=\"loadPaperContent(' + index + ')\">' +\n                    '<div class=\"card-body py-2 px-3\">' +\n                    '<div class=\"d-flex justify-content-between align-items-start mb-2\">' +\n                    '<h6 class=\"card-title mb-0 flex-grow-1\">' +\n                    (isTopPaper ? '<i class=\"fas fa-trophy text-warning me-1\"></i>' : '') +\n                    paper.title.substring(0, 60) + (paper.title.length > 60 ? '...' : '') +\n                    '</h6>' +\n                    '<div class=\"view-count\">' +\n                    '<i class=\"fas fa-eye\"></i>' +\n                    '<span class=\"view-badge\">' + viewDisplay + '</span>' +\n                    '</div>' +\n                    '</div>' +\n                    '<p class=\"paper-abstract mb-1\">' + (paper.abstract || 'No abstract').substring(0, 80) + '...</p>' +\n                    '<div class=\"d-flex justify-content-between align-items-center\">' +\n                    '<div>' +\n                    '<span class=\"category-badge me-2\">' + category.replace('_', ' ') + '</span>' +\n                    '<span class=\"score-badge\">' + totalScore.toFixed(1) + '/10</span>' +\n                    '</div>' +\n                    '<small class=\"paper-stats\">' + paper.source + '</small>' +\n                    '</div>' +\n                    '</div>' +\n                    '</div>';\n            }).join('');\n            \n            listContainer.innerHTML = papersHTML;\n            \n            // Store papers for content loading\n            window.currentPapers = papers;\n        }\n        \n        function loadPaperContent(index) {\n            const paper = window.currentPapers[index];\n            if (!paper) return;\n            \n            // Load paper details\n            const paperContent = generatePaperDetails(paper);\n            document.getElementById('paper-content').innerHTML = paperContent;\n            \n            // Load AI analysis\n            const analysisContent = generateAIAnalysis(paper);\n            document.getElementById('analysis-content').innerHTML = analysisContent;\n            \n            // Highlight selected paper\n            document.querySelectorAll('.paper-card').forEach((card, i) => {\n                if (i === index) {\n                    card.classList.add('border-primary', 'bg-light');\n                } else {\n                    card.classList.remove('border-primary', 'bg-light');\n                }\n            });\n        }\n        \n        function generatePaperDetails(paper) {\n            const publishedDate = paper.published ? new Date(paper.published).toLocaleDateString() : 'Unknown';\n            const authors = paper.authors ? paper.authors.slice(0, 5).join(', ') + (paper.authors.length > 5 ? ' et al.' : '') : 'Unknown authors';\n            const category = (paper.analysis && paper.analysis.category) || paper.category || 'other';\n            const totalScore = (paper.scoring && paper.scoring.total_score) || (paper.analysis && paper.analysis.relevance_score) || 5;\n            \n            let html = '<h5>' + paper.title + '</h5>';\n            html += '<div class=\"mb-3\">';\n            html += '<p class=\"text-muted mb-1\"><strong>Authors:</strong> ' + authors + '</p>';\n            html += '<p class=\"text-muted mb-1\"><strong>Published:</strong> ' + publishedDate + '</p>';\n            html += '<p class=\"text-muted mb-1\"><strong>Source:</strong> ' + paper.source + '</p>';\n            html += '<p class=\"text-muted mb-1\"><strong>Category:</strong> ' + category.replace('_', ' ') + '</p>';\n            html += '<p class=\"text-muted mb-1\"><strong>Score:</strong> <span class=\"badge bg-success\">' + totalScore.toFixed(1) + '/10</span></p>';\n            html += '</div>';\n            \n            if (paper.abstract) {\n                html += '<h6>Abstract</h6>';\n                html += '<p>' + paper.abstract + '</p>';\n            }\n            \n            html += '<div class=\"mt-3\">';\n            html += '<a href=\"' + paper.url + '\" target=\"_blank\" class=\"btn btn-primary btn-sm me-2\">';\n            html += '<i class=\"fas fa-external-link-alt me-1\"></i>View Paper</a>';\n            if (paper.pdf_url) {\n                html += '<a href=\"' + paper.pdf_url + '\" target=\"_blank\" class=\"btn btn-danger btn-sm\">';\n                html += '<i class=\"fas fa-file-pdf me-1\"></i>PDF</a>';\n            }\n            html += '</div>';\n            \n            return html;\n        }\n        \n        function generateAIAnalysis(paper) {\n            if (!paper.analysis) {\n                return '<div class=\"text-center text-muted py-5\">' +\n                    '<i class=\"fas fa-robot fa-2x mb-3\"></i>' +\n                    '<h5>No AI Analysis Available</h5>' +\n                    '<p>This paper has not been analyzed by AI yet.</p>' +\n                    '</div>';\n            }\n            \n            const analysis = paper.analysis;\n            let html = '';\n            \n            if (analysis.introduction) {\n                html += '<h6>Introduction</h6>';\n                html += '<p>' + analysis.introduction + '</p>';\n            }\n            \n            if (analysis.challenges) {\n                html += '<h6>Key Challenges</h6>';\n                html += '<p>' + analysis.challenges + '</p>';\n            }\n            \n            if (analysis.innovations) {\n                html += '<h6>Innovations & Contributions</h6>';\n                html += '<p>' + analysis.innovations + '</p>';\n            }\n            \n            if (analysis.experiments) {\n                html += '<h6>Experiments & Results</h6>';\n                html += '<p>' + analysis.experiments + '</p>';\n            }\n            \n            if (analysis.insights) {\n                html += '<h6>Insights & Future Directions</h6>';\n                html += '<p>' + analysis.insights + '</p>';\n            }\n            \n            if (analysis.keywords && analysis.keywords.length > 0) {\n                html += '<h6>Keywords</h6>';\n                html += '<div class=\"mb-2\">';\n                analysis.keywords.forEach(keyword => {\n                    html += '<span class=\"badge bg-secondary me-1 mb-1\">' + keyword + '</span>';\n                });\n                html += '</div>';\n            }\n            \n            if (analysis.relevance_score) {\n                html += '<div class=\"mt-3 p-2 bg-light rounded\">';\n                html += '<strong>Relevance Score:</strong> ' + analysis.relevance_score + '/10<br>';\n                html += '<strong>Technical Depth:</strong> ' + (analysis.technical_depth || 'Unknown');\n                html += '</div>';\n            }\n            \n            return html || '<p class=\"text-muted\">No analysis details available.</p>';\n        }\n        \n        async function updatePapers() {\n            const button = document.getElementById('update-btn');\n            const loadingIndicator = document.getElementById('loadingIndicator');\n            \n            button.disabled = true;\n            button.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Updating...';\n            loadingIndicator.style.display = 'block';\n            \n            try {\n                const response = await fetch('/api/update', { method: 'POST' });\n                const result = await response.json();\n                \n                if (result.success) {\n                    // Refresh papers list\n                    await fetchPapers();\n                    \n                    // Show success message\n                    const originalText = button.innerHTML;\n                    button.innerHTML = '<i class=\"fas fa-check me-2\"></i>Updated!';\n                    button.className = 'btn btn-success mb-3 w-100';\n                    \n                    setTimeout(() => {\n                        button.innerHTML = originalText;\n                        button.className = 'btn update-btn btn-primary mb-3 w-100';\n                        button.disabled = false;\n                    }, 2000);\n                } else {\n                    throw new Error(result.error || 'Update failed');\n                }\n            } catch (error) {\n                console.error('Error updating papers:', error);\n                \n                // Show error message\n                button.innerHTML = '<i class=\"fas fa-exclamation-triangle me-2\"></i>Update Failed';\n                button.className = 'btn btn-danger mb-3 w-100';\n                \n                setTimeout(() => {\n                    button.innerHTML = '<i class=\"fas fa-sync-alt me-2\"></i>Update Papers';\n                    button.className = 'btn update-btn btn-primary mb-3 w-100';\n                    button.disabled = false;\n                }, 2000);\n            } finally {\n                loadingIndicator.style.display = 'none';\n            }\n        }\n\n        // View tracking functions\n        async function trackPaperView(paperId) {\n            try {\n                const response = await fetch('/api/papers/' + paperId + '/view', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n\n                if (response.ok) {\n                    const result = await response.json();\n\n                    // Update view count in UI\n                    const papers = window.currentPapers;\n                    const paperIndex = papers.findIndex(p => p.id === paperId);\n                    if (paperIndex !== -1) {\n                        papers[paperIndex].views = result.views;\n                        updateViewDisplay(paperIndex, result.views);\n                    }\n                }\n            } catch (error) {\n                console.warn('Failed to track view:', error);\n                // Silent fail - don't break user experience\n            }\n        }\n\n        function updateViewDisplay(paperIndex, viewCount) {\n            const cards = document.querySelectorAll('.paper-card');\n            const viewCountElement = cards[paperIndex].querySelector('.view-badge');\n            if (viewCountElement) {\n                const displayCount = viewCount > 999 ? (viewCount / 1000).toFixed(1) + 'k' : viewCount.toString();\n                viewCountElement.textContent = displayCount;\n            }\n        }\n\n        // Helper functions for Chinese formatting\n        function formatChineseDate(dateString) {\n            const date = new Date(dateString);\n            const year = date.getFullYear();\n            const month = date.getMonth() + 1;\n            const day = date.getDate();\n            return year + '\u5E74' + month + '\u6708' + day + '\u65E5';\n        }\n\n        function getChineseSourceName(source) {\n            const sourceNames = {\n                'arxiv': 'arXiv\u9884\u5370\u672C',\n                'huggingface': 'HuggingFace\u8BBA\u6587',\n                'unknown': '\u672A\u77E5\u6765\u6E90'\n            };\n            return sourceNames[source] || source;\n        }\n\n        // Translation functionality\n        let currentLanguage = 'en'; // Default to English\n\n        function toggleTranslation() {\n            currentLanguage = currentLanguage === 'en' ? 'zh' : 'en';\n\n            // Update button text with bilingual display\n            const translateText = document.getElementById('translate-text');\n            translateText.textContent = currentLanguage === 'en' ? '\u4E2D\u6587' : 'English';\n\n            // Update button styling to indicate current language\n            const translateBtn = document.getElementById('translate-btn');\n            if (currentLanguage === 'zh') {\n                translateBtn.classList.add('btn-warning');\n                translateBtn.classList.remove('btn-outline-light');\n            } else {\n                translateBtn.classList.remove('btn-warning');\n                translateBtn.classList.add('btn-outline-light');\n            }\n\n            // Reload current paper if one is selected\n            if (window.currentPaperIndex !== undefined) {\n                loadPaperContent(window.currentPaperIndex);\n            }\n        }\n\n        function generateTranslatedPaperDetails(paper) {\n            if (currentLanguage === 'zh' && paper.analysis) {\n                // Use Chinese translations if available\n                const publishedDate = paper.published ? formatChineseDate(paper.published) : '\u672A\u77E5';\n                const authors = paper.authors ? paper.authors.slice(0, 5).join(', ') + (paper.authors.length > 5 ? ' \u7B49' : '') : '\u672A\u77E5\u4F5C\u8005';\n                const category = (paper.analysis && paper.analysis.category) || paper.category || '\u5176\u4ED6';\n                const totalScore = (paper.scoring && paper.scoring.total_score) || (paper.analysis && paper.analysis.relevance_score) || 5;\n                const sourceDisplay = getChineseSourceName(paper.source);\n\n                let html = '<h5>' + paper.title + '</h5>';\n                html += '<div class=\"mb-3\">';\n                html += '<p class=\"text-muted mb-1\"><strong>\u4F5C\u8005:</strong> ' + authors + '</p>';\n                html += '<p class=\"text-muted mb-1\"><strong>\u53D1\u5E03\u65E5\u671F:</strong> ' + publishedDate + '</p>';\n                html += '<p class=\"text-muted mb-1\"><strong>\u6765\u6E90:</strong> ' + sourceDisplay + '</p>';\n                html += '<p class=\"text-muted mb-1\"><strong>\u5206\u7C7B:</strong> ' + category.replace('_', ' ') + '</p>';\n                html += '<p class=\"text-muted mb-1\"><strong>\u8BC4\u5206:</strong> <span class=\"badge bg-success\">' + totalScore.toFixed(1) + '/10</span></p>';\n                html += '</div>';\n\n                // Use Chinese abstract if available, otherwise show original with Chinese label\n                if (paper.abstract) {\n                    html += '<h6>\u6458\u8981 / Abstract</h6>';\n                    if (paper.analysis.chinese_abstract && paper.analysis.chinese_abstract.trim() && \n                        paper.analysis.chinese_abstract !== '\u82F1\u6587\u5185\u5BB9\u4E0D\u53EF\u7528 / English content not available' &&\n                        paper.analysis.chinese_abstract !== '\u7FFB\u8BD1\u5931\u8D25\uFF0C\u8BF7\u67E5\u770B\u82F1\u6587\u539F\u6587 / Translation failed, please see English original') {\n                        html += '<p>' + sanitizeChineseContent(paper.analysis.chinese_abstract) + '</p>';\n                        html += '<div class=\"alert alert-info alert-sm mt-2 mb-0\" role=\"alert\">';\n                        html += '<i class=\"fas fa-info-circle me-1\"></i>\u5DF2\u63D0\u4F9B\u4E2D\u6587\u7FFB\u8BD1';\n                        html += '</div>';\n                    } else {\n                        html += '<p>' + paper.abstract + '</p>';\n                        html += '<div class=\"alert alert-warning alert-sm mt-2 mb-0\" role=\"alert\">';\n                        html += '<i class=\"fas fa-exclamation-triangle me-1\"></i>\u6458\u8981\u4E3A\u82F1\u6587\u539F\u6587\uFF0C\u4E2D\u6587\u7FFB\u8BD1\u751F\u6210\u4E2D...';\n                        html += '</div>';\n                    }\n                } else {\n                    html += '<h6>\u6458\u8981 / Abstract</h6>';\n                    html += '<p class=\"text-muted\">\u6682\u65E0\u6458\u8981 / No abstract available</p>';\n                }\n\n                html += '<div class=\"mt-3\">';\n                html += '<a href=\"' + paper.url + '\" target=\"_blank\" class=\"btn btn-primary btn-sm me-2\">';\n                html += '<i class=\"fas fa-external-link-alt me-1\"></i>\u67E5\u770B\u8BBA\u6587 / View Paper</a>';\n                if (paper.pdf_url) {\n                    html += '<a href=\"' + paper.pdf_url + '\" target=\"_blank\" class=\"btn btn-danger btn-sm\">';\n                    html += '<i class=\"fas fa-file-pdf me-1\"></i>\u4E0B\u8F7DPDF / Download PDF</a>';\n                }\n                html += '</div>';\n\n                return html;\n            }\n\n            // Default to English\n            return generatePaperDetails(paper);\n        }\n\n        function generateTranslatedAIAnalysis(paper) {\n            if (currentLanguage === 'zh' && paper.analysis) {\n                const analysis = paper.analysis;\n                let html = '';\n                let hasChineseContent = false;\n                let translationStatus = [];\n\n                // Check translation status\n                if (analysis.chinese_introduction && analysis.chinese_introduction.trim() && \n                    analysis.chinese_introduction !== '\u82F1\u6587\u5185\u5BB9\u4E0D\u53EF\u7528 / English content not available' &&\n                    analysis.chinese_introduction !== '\u7FFB\u8BD1\u5931\u8D25\uFF0C\u8BF7\u67E5\u770B\u82F1\u6587\u539F\u6587 / Translation failed, please see English original') {\n                    hasChineseContent = true;\n                }\n                if (analysis.chinese_innovations && analysis.chinese_innovations.trim() && \n                    analysis.chinese_innovations !== '\u82F1\u6587\u5185\u5BB9\u4E0D\u53EF\u7528 / English content not available' &&\n                    analysis.chinese_innovations !== '\u7FFB\u8BD1\u5931\u8D25\uFF0C\u8BF7\u67E5\u770B\u82F1\u6587\u539F\u6587 / Translation failed, please see English original') {\n                    hasChineseContent = true;\n                }\n                if (analysis.chinese_experiments && analysis.chinese_experiments.trim() && \n                    analysis.chinese_experiments !== '\u82F1\u6587\u5185\u5BB9\u4E0D\u53EF\u7528 / English content not available' &&\n                    analysis.chinese_experiments !== '\u7FFB\u8BD1\u5931\u8D25\uFF0C\u8BF7\u67E5\u770B\u82F1\u6587\u539F\u6587 / Translation failed, please see English original') {\n                    hasChineseContent = true;\n                }\n                if (analysis.chinese_insights && analysis.chinese_insights.trim() && \n                    analysis.chinese_insights !== '\u82F1\u6587\u5185\u5BB9\u4E0D\u53EF\u7528 / English content not available' &&\n                    analysis.chinese_insights !== '\u7FFB\u8BD1\u5931\u8D25\uFF0C\u8BF7\u67E5\u770B\u82F1\u6587\u539F\u6587 / Translation failed, please see English original') {\n                    hasChineseContent = true;\n                }\n\n                if (analysis.introduction) {\n                    if (analysis.chinese_introduction && analysis.chinese_introduction.trim()) {\n                        html += '<h6>\u4ECB\u7ECD / Introduction</h6>';\n                        html += '<p>' + sanitizeChineseContent(analysis.chinese_introduction) + '</p>';\n                        html += '<div class=\"alert alert-info alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-check-circle me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u5DF2\u5B8C\u6210';\n                        html += '</div>';\n                    } else {\n                        html += '<h6>\u4ECB\u7ECD / Introduction</h6>';\n                        html += '<p>' + analysis.introduction + '</p>';\n                        html += '<div class=\"alert alert-warning alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-spinner fa-spin me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u751F\u6210\u4E2D...';\n                        html += '</div>';\n                    }\n                }\n\n                if (analysis.challenges) {\n                    if (analysis.chinese_challenges && analysis.chinese_challenges.trim()) {\n                        html += '<h6>\u6311\u6218 / Challenges</h6>';\n                        html += '<p>' + sanitizeChineseContent(analysis.chinese_challenges) + '</p>';\n                        html += '<div class=\"alert alert-info alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-check-circle me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u5DF2\u5B8C\u6210';\n                        html += '</div>';\n                    } else {\n                        html += '<h6>\u6311\u6218 / Challenges</h6>';\n                        html += '<p>' + analysis.challenges + '</p>';\n                        html += '<div class=\"alert alert-warning alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-spinner fa-spin me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u751F\u6210\u4E2D...';\n                        html += '</div>';\n                    }\n                }\n\n                if (analysis.innovations) {\n                    if (analysis.chinese_innovations && analysis.chinese_innovations.trim()) {\n                        html += '<h6>\u521B\u65B0\u70B9 / Innovations</h6>';\n                        html += '<p>' + sanitizeChineseContent(analysis.chinese_innovations) + '</p>';\n                        html += '<div class=\"alert alert-info alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-check-circle me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u5DF2\u5B8C\u6210';\n                        html += '</div>';\n                    } else {\n                        html += '<h6>\u521B\u65B0\u70B9 / Innovations</h6>';\n                        html += '<p>' + analysis.innovations + '</p>';\n                        html += '<div class=\"alert alert-warning alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-spinner fa-spin me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u751F\u6210\u4E2D...';\n                        html += '</div>';\n                    }\n                }\n\n                if (analysis.experiments) {\n                    if (analysis.chinese_experiments && analysis.chinese_experiments.trim()) {\n                        html += '<h6>\u5B9E\u9A8C\u4E0E\u7ED3\u679C / Experiments & Results</h6>';\n                        html += '<p>' + sanitizeChineseContent(analysis.chinese_experiments) + '</p>';\n                        html += '<div class=\"alert alert-info alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-check-circle me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u5DF2\u5B8C\u6210';\n                        html += '</div>';\n                    } else {\n                        html += '<h6>\u5B9E\u9A8C\u4E0E\u7ED3\u679C / Experiments & Results</h6>';\n                        html += '<p>' + analysis.experiments + '</p>';\n                        html += '<div class=\"alert alert-warning alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-spinner fa-spin me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u751F\u6210\u4E2D...';\n                        html += '</div>';\n                    }\n                }\n\n                if (analysis.insights) {\n                    if (analysis.chinese_insights && analysis.chinese_insights.trim()) {\n                        html += '<h6>\u89C1\u89E3\u4E0E\u672A\u6765\u65B9\u5411 / Insights & Future Directions</h6>';\n                        html += '<p>' + sanitizeChineseContent(analysis.chinese_insights) + '</p>';\n                        html += '<div class=\"alert alert-info alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-check-circle me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u5DF2\u5B8C\u6210';\n                        html += '</div>';\n                    } else {\n                        html += '<h6>\u89C1\u89E3\u4E0E\u672A\u6765\u65B9\u5411 / Insights & Future Directions</h6>';\n                        html += '<p>' + analysis.insights + '</p>';\n                        html += '<div class=\"alert alert-warning alert-sm mt-2 mb-3\" role=\"alert\">';\n                        html += '<i class=\"fas fa-spinner fa-spin me-1\"></i>\u4E2D\u6587\u7FFB\u8BD1\u751F\u6210\u4E2D...';\n                        html += '</div>';\n                    }\n                }\n\n                if (analysis.keywords && analysis.keywords.length > 0) {\n                    html += '<h6>\u5173\u952E\u8BCD / Keywords</h6>';\n                    html += '<div class=\"mb-2\">';\n                    analysis.keywords.forEach(keyword => {\n                        html += '<span class=\"badge bg-secondary me-1 mb-1\">' + keyword + '</span>';\n                    });\n                    html += '</div>';\n                }\n\n                if (analysis.relevance_score) {\n                    html += '<div class=\"mt-3 p-2 bg-light rounded\">';\n                    html += '<strong>\u76F8\u5173\u5EA6\u8BC4\u5206 / Relevance Score:</strong> ' + analysis.relevance_score + '/10<br>';\n                    html += '<strong>\u6280\u672F\u6DF1\u5EA6 / Technical Depth:</strong> ' + (analysis.technical_depth || '\u672A\u77E5');\n                    html += '</div>';\n                }\n\n                // Add overall translation status\n                if (hasChineseContent) {\n                    html += '<div class=\"mt-3 p-3 bg-success bg-opacity-10 border border-success rounded\">';\n                    html += '<i class=\"fas fa-language text-success me-2\"></i>';\n                    html += '<strong>\u7FFB\u8BD1\u72B6\u6001:</strong> \u90E8\u5206\u6216\u5168\u90E8\u5185\u5BB9\u5DF2\u7FFB\u8BD1\u4E3A\u4E2D\u6587';\n                    html += '</div>';\n                } else {\n                    html += '<div class=\"mt-3 p-3 bg-warning bg-opacity-10 border border-warning rounded\">';\n                    html += '<i class=\"fas fa-language text-warning me-2\"></i>';\n                    html += '<strong>\u7FFB\u8BD1\u72B6\u6001:</strong> \u6B63\u5728\u751F\u6210\u4E2D\u6587\u7FFB\u8BD1\uFF0C\u8BF7\u7A0D\u5019\u5237\u65B0\u9875\u9762';\n                    html += '</div>';\n                }\n\n                return html || '<p class=\"text-muted\">\u6682\u65E0\u5206\u6790\u8BE6\u60C5 / No analysis details available.</p>';\n            }\n\n            // Default to English\n            return generateAIAnalysis(paper);\n        }\n\n        // Override the loadPaperContent function to support translation\n        window.currentPaperIndex = undefined;\n\n        function loadPaperContent(index) {\n            const paper = window.currentPapers[index];\n            if (!paper) return;\n\n            window.currentPaperIndex = index;\n\n            // Track view when paper is selected\n            if (paper.id) {\n                trackPaperView(paper.id);\n            }\n\n            // Load paper details with translation\n            const paperContent = generateTranslatedPaperDetails(paper);\n            document.getElementById('paper-content').innerHTML = paperContent;\n\n            // Load AI analysis with translation\n            const analysisContent = generateTranslatedAIAnalysis(paper);\n            document.getElementById('analysis-content').innerHTML = analysisContent;\n\n            // Highlight selected paper\n            document.querySelectorAll('.paper-card').forEach((card, i) => {\n                if (i === index) {\n                    card.classList.add('border-primary', 'bg-light');\n                } else {\n                    card.classList.remove('border-primary', 'bg-light');\n                }\n            });\n        }\n    </script>\n</body>\n</html>`;\n}\n", "import { AppError } from './config.js';\n\nconst logger = {\n  info: (msg, data = {}) => console.log(`[VISITOR] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[VISITOR] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[VISITOR] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[VISITOR] ${msg}`, data)\n};\n\n// Visitor counter storage keys\nconst VISITOR_KEYS = {\n  daily: (date) => `visitors_${date}`,\n  total: 'visitors_total',\n  unique: 'visitors_unique',\n  monthly: (year, month) => `visitors_monthly_${year}_${month}`,\n  ip_hash: (ip) => `visitor_ip_${ip}`\n};\n\n// Generate visitor ID from IP address (privacy-compliant)\nfunction generateVisitorId(ip, userAgent) {\n  // Create a simple hash of IP + user agent for unique identification\n  const data = `${ip}:${userAgent || 'unknown'}:${new Date().toISOString().split('T')[0]}`;\n  let hash = 0;\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return Math.abs(hash).toString(36);\n}\n\n// Get current date in YYYY-MM-DD format\nfunction getCurrentDate() {\n  return new Date().toISOString().split('T')[0];\n}\n\n// Get current month in YYYY-MM format\nfunction getCurrentMonth() {\n  const date = new Date();\n  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n}\n\n// Track visitor\nexport async function trackVisitor(request, env) {\n  try {\n    const ip = request.headers.get('CF-Connecting-IP') || 'unknown';\n    const userAgent = request.headers.get('User-Agent') || 'unknown';\n    const today = getCurrentDate();\n    const currentMonth = getCurrentMonth();\n    const visitorId = generateVisitorId(ip, userAgent);\n\n    logger.info('Tracking visitor', { ip, visitorId, date: today });\n\n    // Check if this visitor was already counted today\n    const todayVisitorKey = `${VISITOR_KEYS.ip_hash(visitorId)}_${today}`;\n    const alreadyCounted = await env.PAPERS.get(todayVisitorKey);\n\n    if (!alreadyCounted) {\n      // Mark this visitor as counted for today (expires in 24 hours)\n      await env.PAPERS.put(todayVisitorKey, '1', {\n        expirationTtl: 24 * 60 * 60 // 24 hours\n      });\n\n      // Increment daily counter\n      const dailyKey = VISITOR_KEYS.daily(today);\n      const dailyCount = await env.PAPERS.get(dailyKey);\n      const newDailyCount = (dailyCount ? parseInt(dailyCount) : 0) + 1;\n      await env.PAPERS.put(dailyKey, newDailyCount.toString(), {\n        expirationTtl: 7 * 24 * 60 * 60 // Keep for 7 days\n      });\n\n      // Increment total counter\n      const totalKey = VISITOR_KEYS.total;\n      const totalCount = await env.PAPERS.get(totalKey);\n      const newTotalCount = (totalCount ? parseInt(totalCount) : 0) + 1;\n      await env.PAPERS.put(totalKey, newTotalCount.toString());\n\n      // Increment monthly counter\n      const monthlyKey = VISITOR_KEYS.monthly(currentMonth.split('-')[0], currentMonth.split('-')[1]);\n      const monthlyCount = await env.PAPERS.get(monthlyKey);\n      const newMonthlyCount = (monthlyCount ? parseInt(monthlyCount) : 0) + 1;\n      await env.PAPERS.put(monthlyKey, newMonthlyCount.toString(), {\n        expirationTtl: 32 * 24 * 60 * 60 // Keep for ~1 month\n      });\n\n      logger.info('New visitor counted', { visitorId, daily: newDailyCount, total: newTotalCount });\n\n      return {\n        isNewVisitor: true,\n        daily: newDailyCount,\n        total: newTotalCount,\n        monthly: newMonthlyCount\n      };\n    } else {\n      // Get current counts for returning visitor\n      const dailyCount = await env.PAPERS.get(VISITOR_KEYS.daily(today)) || '0';\n      const totalCount = await env.PAPERS.get(VISITOR_KEYS.total) || '0';\n      const monthlyCount = await env.PAPERS.get(VISITOR_KEYS.monthly(currentMonth.split('-')[0], currentMonth.split('-')[1])) || '0';\n\n      return {\n        isNewVisitor: false,\n        daily: parseInt(dailyCount),\n        total: parseInt(totalCount),\n        monthly: parseInt(monthlyCount)\n      };\n    }\n  } catch (error) {\n    logger.error('Error tracking visitor:', error);\n    // Return default values if tracking fails\n    return {\n      isNewVisitor: false,\n      daily: 0,\n      total: 0,\n      monthly: 0,\n      error: error.message\n    };\n  }\n}\n\n// Get visitor statistics\nexport async function getVisitorStats(env) {\n  try {\n    const today = getCurrentDate();\n    const currentMonth = getCurrentMonth();\n\n    const dailyCount = await env.PAPERS.get(VISITOR_KEYS.daily(today)) || '0';\n    const totalCount = await env.PAPERS.get(VISITOR_KEYS.total) || '0';\n    const monthlyCount = await env.PAPERS.get(VISITOR_KEYS.monthly(currentMonth.split('-')[0], currentMonth.split('-')[1])) || '0';\n\n    // Get last 7 days for trend\n    const dailyTrend = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const count = await env.PAPERS.get(VISITOR_KEYS.daily(dateStr)) || '0';\n      dailyTrend.push({\n        date: dateStr,\n        count: parseInt(count)\n      });\n    }\n\n    return {\n      today: parseInt(dailyCount),\n      total: parseInt(totalCount),\n      thisMonth: parseInt(monthlyCount),\n      dailyTrend: dailyTrend.reverse(), // Oldest to newest\n      lastUpdated: new Date().toISOString()\n    };\n  } catch (error) {\n    logger.error('Error getting visitor stats:', error);\n    return {\n      today: 0,\n      total: 0,\n      thisMonth: 0,\n      dailyTrend: [],\n      error: error.message\n    };\n  }\n}\n\n// Format visitor statistics for display\nexport function formatVisitorStats(stats) {\n  if (!stats || stats.error) {\n    return {\n      today: '0',\n      total: '0',\n      thisMonth: '0',\n      displayText: 'Visitor stats unavailable'\n    };\n  }\n\n  const formatNumber = (num) => {\n    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';\n    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';\n    return num.toString();\n  };\n\n  return {\n    today: formatNumber(stats.today),\n    total: formatNumber(stats.total),\n    thisMonth: formatNumber(stats.thisMonth),\n    displayText: `${formatNumber(stats.total)} total visitors`\n  };\n}\n\n// Clean up old visitor data (optional maintenance function)\nexport async function cleanupVisitorData(env, daysToKeep = 30) {\n  try {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n    logger.info(`Cleaning up visitor data older than ${daysToKeep} days`);\n\n    // This would be implemented if we had a way to list keys\n    // For now, we rely on TTL expiration\n    return { success: true, message: 'Cleanup completed (TTL-based)' };\n  } catch (error) {\n    logger.error('Error cleaning up visitor data:', error);\n    return { success: false, error: error.message };\n  }\n}\n\nexport { VISITOR_KEYS };", "import { AppError, corsHeaders } from './config.js';\nimport {\n  archivePapers,\n  getArchivedPapers,\n  getArchivedPapersByRange,\n  searchArchivedPapers,\n  getArchiveStatistics,\n  getAvailableArchiveDates,\n  getArchiveIndex\n} from './archive-manager.js';\nimport {\n  exportArchiveData,\n  validateExportRequest,\n  prepareExportData,\n  EXPORT_FORMATS,\n  generateExportFilename\n} from './archive-exporter.js';\nimport { validateDate, jsonResponse, errorResponse } from './utils.js';\n\nconst logger = {\n  info: (msg, data = {}) => console.log(`[ARCHIVE_HANDLER] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[ARCHIVE_HANDLER] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[ARCHIVE_HANDLER] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[ARCHIVE_HANDLER] ${msg}`, data)\n};\n\n// Get available archive dates\nexport async function handleArchiveDates(request, env) {\n  try {\n    logger.info('Getting available archive dates');\n\n    const dates = await getAvailableArchiveDates(env);\n    const index = await getArchiveIndex(env);\n\n    return jsonResponse({\n      available_dates: dates,\n      total_archives: dates.length,\n      date_range: dates.length > 0 ? {\n        start: dates[dates.length - 1],\n        end: dates[0]\n      } : null,\n      date_stats: index?.date_stats || {},\n      last_updated: index?.last_updated || null\n    });\n  } catch (error) {\n    logger.error('Error getting archive dates:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\n// Get archived papers for specific date\nexport async function handleArchiveByDate(request, env, date) {\n  try {\n    validateDate(date);\n    logger.info(`Getting archived papers for date: ${date}`);\n\n    const archive = await getArchivedPapers(date, env);\n    if (!archive) {\n      return errorResponse('No archived papers found for this date', 404);\n    }\n\n    return jsonResponse({\n      date: date,\n      papers: archive.papers,\n      metadata: archive.metadata,\n      total_papers: archive.papers.length\n    });\n  } catch (error) {\n    logger.error(`Error getting archived papers for ${date}:`, error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\n// Get archived papers for date range\nexport async function handleArchiveRange(request, env) {\n  try {\n    const url = new URL(request.url);\n    const startDate = url.searchParams.get('start_date');\n    const endDate = url.searchParams.get('end_date');\n    const category = url.searchParams.get('category');\n    const minScore = url.searchParams.get('min_score') ? parseFloat(url.searchParams.get('min_score')) : null;\n    const maxScore = url.searchParams.get('max_score') ? parseFloat(url.searchParams.get('max_score')) : null;\n\n    if (!startDate || !endDate) {\n      return errorResponse('Both start_date and end_date are required', 400);\n    }\n\n    validateDate(startDate);\n    validateDate(endDate);\n\n    logger.info(`Getting archived papers for range: ${startDate} to ${endDate}`);\n\n    let archives = await getArchivedPapersByRange(startDate, endDate, env);\n\n    // Apply additional filters\n    if (category || minScore !== null || maxScore !== null) {\n      archives = archives.map(archive => ({\n        ...archive,\n        papers: archive.papers.filter(paper => {\n          if (category) {\n            const paperCategory = paper.analysis?.category || paper.category || 'other';\n            if (paperCategory.toLowerCase() !== category.toLowerCase()) return false;\n          }\n          if (minScore !== null) {\n            const score = paper.analysis?.relevance_score || 5;\n            if (score < minScore) return false;\n          }\n          if (maxScore !== null) {\n            const score = paper.analysis?.relevance_score || 5;\n            if (score > maxScore) return false;\n          }\n          return true;\n        })\n      })).filter(archive => archive.papers.length > 0);\n    }\n\n    // Flatten papers and add archive date\n    const allPapers = [];\n    let totalPapers = 0;\n\n    archives.forEach(archive => {\n      archive.papers.forEach(paper => {\n        allPapers.push({\n          ...paper,\n          archive_date: archive.date\n        });\n      });\n      totalPapers += archive.papers.length;\n    });\n\n    return jsonResponse({\n      date_range: {\n        start: startDate,\n        end: endDate\n      },\n      archives_found: archives.length,\n      total_papers: totalPapers,\n      filters_applied: {\n        category,\n        min_score: minScore,\n        max_score: maxScore\n      },\n      papers: allPapers\n    });\n  } catch (error) {\n    logger.error('Error getting archived papers by range:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\n// Search archived papers\nexport async function handleArchiveSearch(request, env) {\n  try {\n    const url = new URL(request.url);\n    const query = url.searchParams.get('q');\n    const startDate = url.searchParams.get('start_date');\n    const endDate = url.searchParams.get('end_date');\n    const category = url.searchParams.get('category');\n    const minScore = url.searchParams.get('min_score') ? parseFloat(url.searchParams.get('min_score')) : null;\n    const maxResults = parseInt(url.searchParams.get('max_results')) || 50;\n\n    if (!query || query.trim().length < 2) {\n      return errorResponse('Search query must be at least 2 characters', 400);\n    }\n\n    logger.info(`Searching archived papers with query: ${query}`);\n\n    const filters = {\n      startDate,\n      endDate,\n      category,\n      minScore,\n      maxResults\n    };\n\n    const results = await searchArchivedPapers(query, filters, env);\n\n    return jsonResponse({\n      query,\n      filters: filters,\n      results: results.results,\n      total_results: results.total_results,\n      archives_searched: results.archives_searched,\n      date_range: results.date_range\n    });\n  } catch (error) {\n    logger.error('Error searching archived papers:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\n// Get archive statistics\nexport async function handleArchiveStatistics(request, env) {\n  try {\n    logger.info('Getting archive statistics');\n\n    const stats = await getArchiveStatistics(env);\n\n    return jsonResponse({\n      statistics: stats,\n      generated_at: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error('Error getting archive statistics:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\n// Export archived papers\nexport async function handleArchiveExport(request, env) {\n  try {\n    const url = new URL(request.url);\n    const format = url.searchParams.get('format') || 'json';\n    const startDate = url.searchParams.get('start_date');\n    const endDate = url.searchParams.get('end_date');\n    const category = url.searchParams.get('category');\n    const minScore = url.searchParams.get('min_score') ? parseFloat(url.searchParams.get('min_score')) : null;\n    const maxScore = url.searchParams.get('max_score') ? parseFloat(url.searchParams.get('max_score')) : null;\n    const includeAbstracts = url.searchParams.get('include_abstracts') !== 'false';\n    const includeAnalysis = url.searchParams.get('include_analysis') !== 'false';\n    const includeStatistics = url.searchParams.get('include_statistics') !== 'false';\n\n    logger.info(`Exporting archived papers in ${format} format`, {\n      startDate,\n      endDate,\n      category,\n      minScore,\n      maxScore\n    });\n\n    // Validate export parameters\n    const exportParams = validateExportRequest({\n      format,\n      startDate,\n      endDate,\n      category,\n      minScore,\n      maxScore,\n      options: {\n        includeAbstracts,\n        includeAnalysis,\n        includeStatistics\n      }\n    });\n\n    logger.info(`Validated export parameters:`, exportParams);\n\n    // Get archives based on date range\n    let archives;\n    if (startDate && endDate) {\n      archives = await getArchivedPapersByRange(startDate, endDate, env);\n    } else {\n      // Get all available archives\n      const availableDates = await getAvailableArchiveDates(env);\n      if (availableDates.length === 0) {\n        return errorResponse('No archived papers available for export', 404);\n      }\n      archives = await Promise.all(\n        availableDates.slice(0, 30).map(date => getArchivedPapers(date, env))\n      );\n      archives = archives.filter(archive => archive !== null);\n    }\n\n    if (archives.length === 0) {\n      return errorResponse('No archived papers found for the specified criteria', 404);\n    }\n\n    // Generate export\n    logger.info(`Generating export from ${archives.length} archives`);\n    const exportResult = await exportArchiveData(archives, exportParams);\n\n    logger.info(`Export generated successfully:`, {\n      format: exportResult.format,\n      filename: exportResult.filename,\n      size: exportResult.content.length,\n      papers: exportResult.statistics?.total_papers || 0\n    });\n\n    // Return file download response\n    return new Response(exportResult.content, {\n      status: 200,\n      headers: {\n        'Content-Type': exportResult.contentType,\n        'Content-Disposition': `attachment; filename=\"${exportResult.filename}\"`,\n        'Access-Control-Expose-Headers': 'Content-Disposition',\n        'Content-Length': exportResult.content.length.toString(),\n        ...corsHeaders\n      }\n    });\n  } catch (error) {\n    logger.error('Error exporting archived papers:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\n// Get available export formats\nexport async function handleExportFormats(request, env) {\n  try {\n    logger.info('Getting available export formats');\n\n    const formats = Object.values(EXPORT_FORMATS).map(format => ({\n      format: format,\n      description: getFormatDescription(format),\n      content_type: getContentType(format),\n      file_extension: getFileExtension(format),\n      supports_analysis: supportsAnalysis(format),\n      supports_statistics: supportsStatistics(format)\n    }));\n\n    return jsonResponse({\n      formats: formats,\n      default_format: EXPORT_FORMATS.JSON,\n      total_formats: formats.length\n    });\n  } catch (error) {\n    logger.error('Error getting export formats:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\n// Create new archive (manual archiving)\nexport async function handleCreateArchive(request, env) {\n  try {\n    // Check for API key or admin authentication\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return errorResponse('Authorization required', 401);\n    }\n\n    // For now, simple token check - in production, use proper authentication\n    const token = authHeader.split(' ')[1];\n    if (token !== env.ADMIN_TOKEN) {\n      return errorResponse('Invalid authorization token', 403);\n    }\n\n    const body = await request.json();\n    const { date, papers, metadata = {} } = body;\n\n    if (!date || !papers || !Array.isArray(papers)) {\n      return errorResponse('Date and papers array are required', 400);\n    }\n\n    validateDate(date);\n\n    logger.info(`Creating manual archive for date: ${date}`);\n\n    const result = await archivePapers(date, papers, env, metadata);\n\n    return jsonResponse({\n      success: true,\n      message: `Successfully archived ${result.papers_archived} papers for ${date}`,\n      date: date,\n      papers_archived: result.papers_archived,\n      metadata: result.metadata\n    });\n  } catch (error) {\n    logger.error('Error creating archive:', error);\n    return errorResponse(error.message, error.statusCode || 500);\n  }\n}\n\n// Helper functions\nfunction getFormatDescription(format) {\n  const descriptions = {\n    [EXPORT_FORMATS.JSON]: 'Complete data in JSON format with full analysis and metadata',\n    [EXPORT_FORMATS.CSV]: 'Structured tabular data suitable for spreadsheet applications',\n    [EXPORT_FORMATS.MARKDOWN]: 'Human-readable format with formatting and structure',\n    [EXPORT_FORMATS.BIBTEX]: 'Academic citation format for reference management software',\n    [EXPORT_FORMATS.PDF]: 'Formatted PDF documents (coming soon)'\n  };\n  return descriptions[format] || 'Unknown format';\n}\n\nfunction getContentType(format) {\n  const contentTypes = {\n    [EXPORT_FORMATS.JSON]: 'application/json',\n    [EXPORT_FORMATS.CSV]: 'text/csv',\n    [EXPORT_FORMATS.MARKDOWN]: 'text/markdown',\n    [EXPORT_FORMATS.BIBTEX]: 'text/plain',\n    [EXPORT_FORMATS.PDF]: 'application/pdf'\n  };\n  return contentTypes[format] || 'application/octet-stream';\n}\n\nfunction getFileExtension(format) {\n  const extensions = {\n    [EXPORT_FORMATS.JSON]: 'json',\n    [EXPORT_FORMATS.CSV]: 'csv',\n    [EXPORT_FORMATS.MARKDOWN]: 'md',\n    [EXPORT_FORMATS.BIBTEX]: 'bib',\n    [EXPORT_FORMATS.PDF]: 'pdf'\n  };\n  return extensions[format] || 'txt';\n}\n\nfunction supportsAnalysis(format) {\n  return [EXPORT_FORMATS.JSON, EXPORT_FORMATS.MARKDOWN].includes(format);\n}\n\nfunction supportsStatistics(format) {\n  return [EXPORT_FORMATS.JSON, EXPORT_FORMATS.MARKDOWN, EXPORT_FORMATS.CSV].includes(format);\n}\n\n// Export all handlers\nexport const archiveHandlers = {\n  handleArchiveDates,\n  handleArchiveByDate,\n  handleArchiveRange,\n  handleArchiveSearch,\n  handleArchiveStatistics,\n  handleArchiveExport,\n  handleExportFormats,\n  handleCreateArchive\n};", "import { AppError } from './config.js';\n\nconst logger = {\n  info: (msg, data = {}) => console.log(`[EXPORT] ${msg}`, data),\n  debug: (msg, data = {}) => console.log(`[EXPORT] ${msg}`, data),\n  warn: (msg, data = {}) => console.warn(`[EXPORT] ${msg}`, data),\n  error: (msg, data = {}) => console.error(`[EXPORT] ${msg}`, data)\n};\n\n// Export format types\nexport const EXPORT_FORMATS = {\n  JSON: 'json',\n  CSV: 'csv',\n  MARKDOWN: 'markdown',\n  BIBTEX: 'bibtex',\n  PDF: 'pdf' // Future implementation\n};\n\n// Export options defaults\nconst DEFAULT_EXPORT_OPTIONS = {\n  includeAbstracts: true,\n  includeAnalysis: true,\n  includeMetadata: true,\n  includeStatistics: true,\n  compressLargeExports: true,\n  maxPapersPerFile: 1000,\n  dateFormat: 'YYYY-MM-DD',\n  authorSeparator: '; ',\n  keywordSeparator: '; ',\n  citationStyle: 'apa' // For future citation formats\n};\n\n// Validate export request\nexport function validateExportRequest(params) {\n  logger.info('Validating export request', params);\n\n  const { format, startDate, endDate, category, minScore, maxScore, options = {} } = params;\n\n  // Validate format\n  if (!Object.values(EXPORT_FORMATS).includes(format)) {\n    throw new AppError(`Invalid export format. Supported formats: ${Object.values(EXPORT_FORMATS).join(', ')}`, 400);\n  }\n\n  // Validate dates if provided\n  if (startDate || endDate) {\n    if (startDate && !isValidDate(startDate)) {\n      throw new AppError('Invalid start date format. Use YYYY-MM-DD', 400);\n    }\n    if (endDate && !isValidDate(endDate)) {\n      throw new AppError('Invalid end date format. Use YYYY-MM-DD', 400);\n    }\n    if (startDate && endDate && new Date(startDate) > new Date(endDate)) {\n      throw new AppError('Start date must be before or equal to end date', 400);\n    }\n  }\n\n  // Validate score range\n  if (minScore && (minScore < 0 || minScore > 10)) {\n    throw new AppError('Minimum score must be between 0 and 10', 400);\n  }\n  if (maxScore && (maxScore < 0 || maxScore > 10)) {\n    throw new AppError('Maximum score must be between 0 and 10', 400);\n  }\n  if (minScore && maxScore && minScore > maxScore) {\n    throw new AppError('Minimum score must be less than or equal to maximum score', 400);\n  }\n\n  // Validate options\n  const validOptions = { ...DEFAULT_EXPORT_OPTIONS, ...options };\n\n  const validatedParams = {\n    format,\n    startDate,\n    endDate,\n    category,\n    minScore,\n    maxScore,\n    options: validOptions\n  };\n\n  logger.info('Export request validated successfully', validatedParams);\n  return validatedParams;\n}\n\n// Helper function to validate date format\nfunction isValidDate(dateString) {\n  const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!regex.test(dateString)) return false;\n\n  const date = new Date(dateString);\n  return !isNaN(date.getTime());\n}\n\n// Filter papers based on export parameters\nexport function filterPapersForExport(papers, filters) {\n  const { startDate, endDate, category, minScore, maxScore } = filters;\n\n  return papers.filter(paper => {\n    // Date filter\n    if (startDate || endDate) {\n      const paperDate = paper.archive_date || paper.published || paper.scraped_at;\n      if (startDate && new Date(paperDate) < new Date(startDate)) return false;\n      if (endDate && new Date(paperDate) > new Date(endDate)) return false;\n    }\n\n    // Category filter\n    if (category) {\n      const paperCategory = paper.analysis?.category || paper.category || 'other';\n      if (paperCategory.toLowerCase() !== category.toLowerCase()) return false;\n    }\n\n    // Score filter\n    if (minScore || maxScore) {\n      const score = paper.analysis?.relevance_score || 5;\n      if (minScore && score < minScore) return false;\n      if (maxScore && score > maxScore) return false;\n    }\n\n    return true;\n  });\n}\n\n// Prepare export data with metadata\nexport function prepareExportData(archives, filters, options = {}) {\n  try {\n    logger.info('Preparing export data', { archives: archives.length, filters, options });\n\n    // Validate input\n    if (!archives || !Array.isArray(archives)) {\n      throw new AppError('Invalid archives data', 400);\n    }\n\n    if (archives.length === 0) {\n      return {\n        papers: [],\n        statistics: {\n          total_papers: 0,\n          category_distribution: {},\n          source_distribution: {},\n          score_distribution: { '1-3': 0, '4-6': 0, '7-8': 0, '9-10': 0 },\n          average_score: 0,\n          date_range: null\n        },\n        metadata: {\n          version: '1.0',\n          exported_at: new Date().toISOString(),\n          total_original_papers: 0,\n          total_filtered_papers: 0,\n          filters_applied: filters,\n          options_used: options,\n          archives_processed: 0,\n          date_range: null,\n          format: filters.format || 'unknown'\n        }\n      };\n    }\n\n    // Collect all papers from archives\n    let allPapers = [];\n    archives.forEach(archive => {\n      if (archive && archive.papers && Array.isArray(archive.papers)) {\n        const papersWithDate = archive.papers.map(paper => ({\n          ...paper,\n          archive_date: archive.date,\n          archive_metadata: archive.metadata\n        }));\n        allPapers = allPapers.concat(papersWithDate);\n      }\n    });\n\n    if (allPapers.length === 0) {\n      logger.warn('No papers found in archives for export');\n      return {\n        papers: [],\n        statistics: {\n          total_papers: 0,\n          category_distribution: {},\n          source_distribution: {},\n          score_distribution: { '1-3': 0, '4-6': 0, '7-8': 0, '9-10': 0 },\n          average_score: 0,\n          date_range: null\n        },\n        metadata: {\n          version: '1.0',\n          exported_at: new Date().toISOString(),\n          total_original_papers: 0,\n          total_filtered_papers: 0,\n          filters_applied: filters,\n          options_used: options,\n          archives_processed: archives.length,\n          date_range: null,\n          format: filters.format || 'unknown'\n        }\n      };\n    }\n\n    // Apply filters\n    const filteredPapers = filterPapersForExport(allPapers, filters);\n\n    // Generate statistics\n    const statistics = generateExportStatistics(filteredPapers, archives, filters);\n\n    // Create export metadata\n    const exportMetadata = {\n      version: '1.0',\n      exported_at: new Date().toISOString(),\n      total_original_papers: allPapers.length,\n      total_filtered_papers: filteredPapers.length,\n      filters_applied: filters,\n      options_used: options,\n      archives_processed: archives.length,\n      date_range: getDateRangeFromPapers(filteredPapers),\n      format: filters.format\n    };\n\n    return {\n      papers: filteredPapers,\n      statistics,\n      metadata: exportMetadata\n    };\n  } catch (error) {\n    logger.error('Error preparing export data:', error);\n    throw new AppError(`Failed to prepare export data: ${error.message}`, 500);\n  }\n}\n\n// Generate export statistics\nfunction generateExportStatistics(papers, archives, filters) {\n  const categoryStats = {};\n  const sourceStats = {};\n  const dateStats = {};\n  const scoreDistribution = { '1-3': 0, '4-6': 0, '7-8': 0, '9-10': 0 };\n  let totalScore = 0;\n\n  papers.forEach(paper => {\n    // Category statistics\n    const category = paper.analysis?.category || paper.category || 'other';\n    categoryStats[category] = (categoryStats[category] || 0) + 1;\n\n    // Source statistics\n    const source = paper.source || 'unknown';\n    sourceStats[source] = (sourceStats[source] || 0) + 1;\n\n    // Date statistics\n    const date = paper.archive_date || paper.published || paper.scraped_at;\n    const dateKey = date.split('T')[0]; // Extract date part\n    dateStats[dateKey] = (dateStats[dateKey] || 0) + 1;\n\n    // Score distribution\n    const score = paper.analysis?.relevance_score || 5;\n    totalScore += score;\n\n    if (score >= 1 && score <= 3) scoreDistribution['1-3']++;\n    else if (score >= 4 && score <= 6) scoreDistribution['4-6']++;\n    else if (score >= 7 && score <= 8) scoreDistribution['7-8']++;\n    else if (score >= 9 && score <= 10) scoreDistribution['9-10']++;\n  });\n\n  const avgScore = papers.length > 0 ? totalScore / papers.length : 0;\n\n  return {\n    total_papers: papers.length,\n    category_distribution: categoryStats,\n    source_distribution: sourceStats,\n    date_distribution: dateStats,\n    score_distribution: scoreDistribution,\n    average_score: Math.round(avgScore * 100) / 100,\n    date_range: getDateRangeFromPapers(papers)\n  };\n}\n\n// Get date range from papers\nfunction getDateRangeFromPapers(papers) {\n  if (papers.length === 0) return null;\n\n  const dates = papers.map(paper => {\n    const dateStr = paper.archive_date || paper.published || paper.scraped_at;\n    return new Date(dateStr);\n  });\n\n  const minDate = new Date(Math.min(...dates));\n  const maxDate = new Date(Math.max(...dates));\n\n  return {\n    start: minDate.toISOString().split('T')[0],\n    end: maxDate.toISOString().split('T')[0]\n  };\n}\n\n// Generate JSON export\nexport function generateJSONExport(data, options = {}) {\n  try {\n    logger.info('Generating JSON export', { paper_count: data.papers.length });\n\n    const { includeAbstracts = true, includeAnalysis = true, includeMetadata = true, includeStatistics = true } = options;\n\n    let exportData = {\n      export_metadata: data.metadata\n    };\n\n    // Process papers based on options\n    if (includeAnalysis && includeAbstracts) {\n      exportData.papers = data.papers;\n    } else {\n      exportData.papers = data.papers.map(paper => {\n        const exportedPaper = { ...paper };\n\n        if (!includeAbstracts) {\n          delete exportedPaper.abstract;\n        }\n\n        if (!includeAnalysis) {\n          delete exportedPaper.analysis;\n        }\n\n        return exportedPaper;\n      });\n    }\n\n    if (includeStatistics) {\n      exportData.statistics = data.statistics;\n    }\n\n    return JSON.stringify(exportData, null, 2);\n  } catch (error) {\n    logger.error('Error generating JSON export:', error);\n    throw new AppError(`Failed to generate JSON export: ${error.message}`, 500);\n  }\n}\n\n// Generate CSV export\nexport function generateCSVExport(data, options = {}) {\n  try {\n    logger.info('Generating CSV export', { paper_count: data.papers.length });\n\n    const {\n      includeAbstracts = true,\n      includeAnalysis = false, // Analysis data is complex for CSV\n      authorSeparator = '; ',\n      keywordSeparator = '; '\n    } = options;\n\n    // Define CSV headers\n    const headers = [\n      'archive_date',\n      'title',\n      'authors',\n      'category',\n      'relevance_score',\n      'source',\n      'published_date',\n      'url',\n      'primary_category'\n    ];\n\n    if (includeAbstracts) {\n      headers.push('abstract');\n    }\n\n    if (includeAnalysis) {\n      headers.push('keywords', 'technical_depth');\n    }\n\n    // Generate CSV rows\n    const rows = data.papers.map(paper => {\n      const row = {\n        archive_date: paper.archive_date || '',\n        title: escapeCSV(paper.title),\n        authors: escapeCSV(paper.authors?.join(authorSeparator) || ''),\n        category: escapeCSV(paper.analysis?.category || paper.category || 'other'),\n        relevance_score: paper.analysis?.relevance_score || 5,\n        source: paper.source || 'unknown',\n        published_date: paper.published ? paper.published.split('T')[0] : '',\n        url: paper.url || '',\n        primary_category: paper.primary_category || ''\n      };\n\n      if (includeAbstracts) {\n        row.abstract = escapeCSV(paper.abstract || '');\n      }\n\n      if (includeAnalysis) {\n        row.keywords = escapeCSV(paper.analysis?.keywords?.join(keywordSeparator) || '');\n        row.technical_depth = paper.analysis?.technical_depth || 'unknown';\n      }\n\n      return headers.map(header => `\"${row[header] || ''}\"`).join(',');\n    });\n\n    // Combine headers and rows\n    const csvContent = [headers.join(','), ...rows].join('\\n');\n\n    return csvContent;\n  } catch (error) {\n    logger.error('Error generating CSV export:', error);\n    throw new AppError(`Failed to generate CSV export: ${error.message}`, 500);\n  }\n}\n\n// Escape CSV values\nfunction escapeCSV(value) {\n  if (typeof value !== 'string') return value;\n\n  // Replace quotes with double quotes and wrap in quotes if needed\n  return value.replace(/\"/g, '\"\"');\n}\n\n// Generate Markdown export\nexport function generateMarkdownExport(data, options = {}) {\n  try {\n    logger.info('Generating Markdown export', { paper_count: data.papers.length });\n\n    const {\n      includeAbstracts = true,\n      includeAnalysis = true,\n      includeStatistics = true\n    } = options;\n\n    let markdown = `# PaperDog Archive Export\\n\\n`;\n\n    // Add export metadata\n    markdown += `**Generated**: ${data.metadata.exported_at}\\n`;\n    if (data.metadata.date_range) {\n      markdown += `**Date Range**: ${data.metadata.date_range.start} to ${data.metadata.date_range.end}\\n`;\n    } else {\n      markdown += `**Date Range**: No date range available\\n`;\n    }\n    markdown += `**Total Papers**: ${data.papers.length}\\n\\n`;\n\n    // Add statistics if requested\n    if (includeStatistics && data.statistics) {\n      markdown += '## Export Statistics\\n\\n';\n      markdown += `- **Total Papers**: ${data.statistics.total_papers}\\n`;\n      markdown += `- **Average Score**: ${data.statistics.average_score}/10\\n`;\n      markdown += `- **Date Range**: ${data.statistics.date_range ? `${data.statistics.date_range.start} to ${data.statistics.date_range.end}` : 'No date range available'}\\n\\n`;\n\n      // Category distribution\n      if (Object.keys(data.statistics.category_distribution).length > 0) {\n        markdown += '### Papers by Category\\n\\n';\n        Object.entries(data.statistics.category_distribution)\n          .sort(([,a], [,b]) => b - a)\n          .forEach(([category, count]) => {\n            markdown += `- **${category}**: ${count} papers\\n`;\n          });\n        markdown += '\\n';\n      }\n\n      // Source distribution\n      if (Object.keys(data.statistics.source_distribution).length > 0) {\n        markdown += '### Papers by Source\\n\\n';\n        Object.entries(data.statistics.source_distribution)\n          .sort(([,a], [,b]) => b - a)\n          .forEach(([source, count]) => {\n            markdown += `- **${source}**: ${count} papers\\n`;\n          });\n        markdown += '\\n';\n      }\n\n      // Score distribution\n      markdown += '### Score Distribution\\n\\n';\n      Object.entries(data.statistics.score_distribution).forEach(([range, count]) => {\n        markdown += `- **${range}**: ${count} papers\\n`;\n      });\n      markdown += '\\n---\\n\\n';\n    }\n\n    // Group papers by date\n    const papersByDate = {};\n    data.papers.forEach(paper => {\n      const date = paper.archive_date || paper.published?.split('T')[0] || 'Unknown';\n      if (!papersByDate[date]) papersByDate[date] = [];\n      papersByDate[date].push(paper);\n    });\n\n    // Add papers grouped by date\n    Object.keys(papersByDate).sort().reverse().forEach(date => {\n      const papers = papersByDate[date];\n      markdown += `## ${date} (${papers.length} papers)\\n\\n`;\n\n      papers.forEach((paper, index) => {\n        const score = paper.analysis?.relevance_score || 5;\n        const category = paper.analysis?.category || paper.category || 'other';\n        const depth = paper.analysis?.technical_depth || 'unknown';\n\n        markdown += `### ${index + 1}. [${score}/10] ${paper.title}\\n\\n`;\n        markdown += `**Authors**: ${paper.authors?.join(', ') || 'Unknown'}\\n`;\n        markdown += `**Category**: ${category} | **Source**: ${paper.source || 'unknown'} | **Depth**: ${depth}\\n`;\n\n        if (paper.url) {\n          markdown += `**URL**: ${paper.url}\\n`;\n        }\n\n        if (paper.published) {\n          markdown += `**Published**: ${paper.published.split('T')[0]}\\n`;\n        }\n\n        if (includeAnalysis && paper.analysis?.keywords?.length > 0) {\n          markdown += `**Keywords**: ${paper.analysis.keywords.join(', ')}\\n`;\n        }\n\n        markdown += '\\n';\n\n        if (includeAbstracts && paper.abstract) {\n          markdown += '**Abstract**:\\n';\n          markdown += `${paper.abstract}\\n\\n`;\n        }\n\n        if (includeAnalysis && paper.analysis) {\n          const analysis = paper.analysis;\n\n          if (analysis.introduction) {\n            markdown += '**Introduction**:\\n';\n            markdown += `${analysis.introduction}\\n\\n`;\n          }\n\n          if (analysis.innovations) {\n            markdown += '**Innovations**:\\n';\n            markdown += `${analysis.innovations}\\n\\n`;\n          }\n\n          if (analysis.experiments) {\n            markdown += '**Experiments & Results**:\\n';\n            markdown += `${analysis.experiments}\\n\\n`;\n          }\n\n          if (analysis.insights) {\n            markdown += '**Insights & Future Directions**:\\n';\n            markdown += `${analysis.insights}\\n\\n`;\n          }\n        }\n\n        markdown += '---\\n\\n';\n      });\n    });\n\n    return markdown;\n  } catch (error) {\n    logger.error('Error generating Markdown export:', error);\n    throw new AppError(`Failed to generate Markdown export: ${error.message}`, 500);\n  }\n}\n\n// Generate BibTeX export\nexport function generateBibTeXExport(data, options = {}) {\n  try {\n    logger.info('Generating BibTeX export', { paper_count: data.papers.length });\n\n    const { citationStyle = 'apa' } = options;\n    let bibtex = '';\n\n    data.papers.forEach((paper, index) => {\n      const key = generateBibTeXKey(paper, index);\n      const authors = formatBibTeXAuthors(paper.authors || []);\n      const title = paper.title.replace(/[{}]/g, '\\\\$&'); // Escape special chars\n      const year = new Date(paper.published || paper.archive_date).getFullYear();\n      const month = new Date(paper.published || paper.archive_date).toLocaleString('default', { month: 'short' }).toLowerCase();\n\n      bibtex += `@article{${key},\\n`;\n      bibtex += `  title={${title}},\\n`;\n\n      if (authors) {\n        bibtex += `  author={${authors}},\\n`;\n      }\n\n      bibtex += `  year={${year}},\\n`;\n      bibtex += `  month={${month}},\\n`;\n\n      // Add journal/source information\n      if (paper.source === 'arxiv' && paper.url) {\n        const arxivMatch = paper.url.match(/arxiv\\.org\\/abs\\/(\\d+\\.\\d+)/);\n        if (arxivMatch) {\n          bibtex += `  journal={arXiv preprint arXiv:${arxivMatch[1]}},\\n`;\n        }\n      } else if (paper.source === 'huggingface') {\n        bibtex += `  journal={HuggingFace Papers},\\n`;\n      } else {\n        bibtex += `  journal={${paper.source || 'Unknown Source'}},\\n`;\n      }\n\n      // Add URL\n      if (paper.url) {\n        bibtex += `  url={${paper.url}},\\n`;\n      }\n\n      // Add primary category as note\n      if (paper.primary_category) {\n        bibtex += `  note={Primary category: ${paper.primary_category}},\\n`;\n      }\n\n      // Add keywords if available\n      if (paper.analysis?.keywords?.length > 0) {\n        const keywords = paper.analysis.keywords.join(', ');\n        bibtex += `  keywords={${keywords}},\\n`;\n      }\n\n      // Add PaperDog reference\n      bibtex += `  note={Accessed via PaperDog Archive},\\n`;\n\n      // Remove trailing comma and newline\n      bibtex = bibtex.trim().replace(/,\\n$/, '\\n');\n      bibtex += '}\\n\\n';\n    });\n\n    return bibtex.trim();\n  } catch (error) {\n    logger.error('Error generating BibTeX export:', error);\n    throw new AppError(`Failed to generate BibTeX export: ${error.message}`, 500);\n  }\n}\n\n// Generate BibTeX key\nfunction generateBibTeXKey(paper, index) {\n  const authors = paper.authors || [];\n  const year = new Date(paper.published || paper.archive_date).getFullYear();\n\n  // Use first author's last name if available\n  let authorKey = '';\n  if (authors.length > 0) {\n    const firstAuthor = authors[0];\n    const nameParts = firstAuthor.split(' ');\n    authorKey = nameParts[nameParts.length - 1].toLowerCase().replace(/[^a-z]/g, '');\n  } else {\n    authorKey = 'unknown';\n  }\n\n  // Create title key (first few words)\n  const titleWords = paper.title.toLowerCase().split(' ').slice(0, 3);\n  const titleKey = titleWords.map(word => word.replace(/[^a-z]/g, '')).join('_');\n\n  return `paperdog_${year}_${authorKey}_${titleKey}_${index + 1}`;\n}\n\n// Format authors for BibTeX\nfunction formatBibTeXAuthors(authors) {\n  if (!authors || authors.length === 0) return '';\n\n  // Convert \"First Last\" to \"Last, First\" format\n  const formattedAuthors = authors.map(author => {\n    const nameParts = author.trim().split(' ');\n    if (nameParts.length >= 2) {\n      const firstName = nameParts.slice(0, -1).join(' ');\n      const lastName = nameParts[nameParts.length - 1];\n      return `${lastName}, ${firstName}`;\n    }\n    return author;\n  });\n\n  return formattedAuthors.join(' and ');\n}\n\n// Generate export filename\nexport function generateExportFilename(format, dateRange, filters = {}) {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\n  const startDate = dateRange?.start || 'all';\n  const endDate = dateRange?.end || 'all';\n\n  let filename = `paperdog_archive_${startDate}_to_${endDate}`;\n\n  // Add filter indicators\n  if (filters.category) filename += `_cat_${filters.category}`;\n  if (filters.minScore) filename += `_min_${filters.minScore}`;\n  if (filters.maxScore) filename += `_max_${filters.maxScore}`;\n\n  filename += `_${timestamp}.${format}`;\n\n  return filename;\n}\n\n// Compress export data\nexport async function compressExport(data, format) {\n  try {\n    logger.info('Compressing export data');\n\n    // For now, we'll use basic compression\n    // In a real implementation, you might use a compression library\n    const compressed = {\n      compressed: true,\n      format: format,\n      original_size: data.length,\n      compressed_size: data.length, // Placeholder\n      compression_ratio: 1.0, // Placeholder\n      data: data\n    };\n\n    return JSON.stringify(compressed);\n  } catch (error) {\n    logger.error('Error compressing export data:', error);\n    throw new AppError(`Failed to compress export: ${error.message}`, 500);\n  }\n}\n\n// Main export function\nexport async function exportArchiveData(archives, params) {\n  try {\n    logger.info('Starting archive export', { format: params.format, archives: archives.length });\n\n    // Validate and normalize parameters\n    const validatedParams = validateExportRequest(params);\n    const { format, options } = validatedParams;\n\n    logger.info('Preparing export data...');\n    // Prepare export data\n    const exportData = prepareExportData(archives, validatedParams, options);\n\n    logger.info(`Generating ${format} export for ${exportData.papers.length} papers`);\n    // Generate export content based on format\n    let exportContent;\n    let contentType;\n    let fileExtension;\n\n    switch (format) {\n      case EXPORT_FORMATS.JSON:\n        exportContent = generateJSONExport(exportData, options);\n        contentType = 'application/json';\n        fileExtension = 'json';\n        break;\n\n      case EXPORT_FORMATS.CSV:\n        exportContent = generateCSVExport(exportData, options);\n        contentType = 'text/csv';\n        fileExtension = 'csv';\n        break;\n\n      case EXPORT_FORMATS.MARKDOWN:\n        exportContent = generateMarkdownExport(exportData, options);\n        contentType = 'text/markdown';\n        fileExtension = 'md';\n        break;\n\n      case EXPORT_FORMATS.BIBTEX:\n        exportContent = generateBibTeXExport(exportData, options);\n        contentType = 'text/plain';\n        fileExtension = 'bib';\n        break;\n\n      default:\n        throw new AppError(`Export format '${format}' not implemented yet`, 501);\n    }\n\n    logger.info(`Export content generated (${exportContent.length} characters)`);\n\n    // Generate filename\n    const filename = generateExportFilename(fileExtension, exportData.metadata.date_range, validatedParams);\n\n    // Compress if requested and content is large\n    if (options.compressLargeExports && exportContent.length > 100000) { // 100KB threshold\n      logger.info('Compressing large export...');\n      exportContent = await compressExport(exportContent, format);\n      contentType = 'application/json'; // Compressed data is JSON-wrapped\n    }\n\n    logger.info('Export completed successfully', {\n      format,\n      papers: exportData.papers.length,\n      size: exportContent.length\n    });\n\n    return {\n      content: exportContent,\n      contentType,\n      filename,\n      format,\n      metadata: exportData.metadata,\n      statistics: exportData.statistics\n    };\n  } catch (error) {\n    logger.error('Error in exportArchiveData:', error);\n    throw error instanceof AppError ? error : new AppError(`Export failed: ${error.message}`, 500);\n  }\n}\n\n// Batch export for large datasets\nexport async function batchExportArchiveData(archives, params, batchSize = 1000) {\n  try {\n    logger.info('Starting batch export', { batch_size: batchSize, total_archives: archives.length });\n\n    const allPapers = [];\n    archives.forEach(archive => {\n      const papersWithDate = archive.papers.map(paper => ({\n        ...paper,\n        archive_date: archive.date\n      }));\n      allPapers.push(...papersWithDate);\n    });\n\n    // Filter papers\n    const filteredPapers = filterPapersForExport(allPapers, params);\n\n    if (filteredPapers.length === 0) {\n      throw new AppError('No papers match the specified filters', 404);\n    }\n\n    // Process in batches\n    const batches = [];\n    for (let i = 0; i < filteredPapers.length; i += batchSize) {\n      const batchPapers = filteredPapers.slice(i, i + batchSize);\n      const batchData = {\n        papers: batchPapers,\n        metadata: {\n          ...params,\n          batch_number: Math.floor(i / batchSize) + 1,\n          total_batches: Math.ceil(filteredPapers.length / batchSize)\n        }\n      };\n      batches.push(batchData);\n    }\n\n    logger.info(`Created ${batches.length} batches for export`);\n    return batches;\n  } catch (error) {\n    logger.error('Error in batchExportArchiveData:', error);\n    throw error instanceof AppError ? error : new AppError(`Batch export failed: ${error.message}`, 500);\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["corsHeaders", "logger", "logger", "papers", "description", "logger", "logger", "extractKeywords", "logger", "logger", "displayPapers", "date", "getAvailableArchiveDates", "getArchivedPapers", "getArchiveStatistics", "generateEnhancedArchiveHTML", "logger", "logger", "getArchiveHTML", "validateDate", "getCachedPapers", "generateDailyReport", "getReportHTML"]
}
